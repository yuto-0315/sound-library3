{"ast":null,"code":"var _jsxFileName = \"/Users/nakataniyuutomo/Desktop/Programing/\\u30BB\\u3099\\u30DF\\u958B\\u767A/sound-library2/src/pages/DAWPage.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './DAWPage.css';\n\n// DAWの定数\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BEAT_WIDTH = 100; // 1拍の幅（px）\nconst BEATS_PER_MEASURE = 4; // 1小節あたりの拍数\nconst MEASURE_WIDTH = BEAT_WIDTH * BEATS_PER_MEASURE; // 1小節の幅（400px）\nconst SUB_BEAT_WIDTH = BEAT_WIDTH / 2; // 8分音符の幅（50px）\nconst TOTAL_MEASURES = 16; // 表示する小節数\nconst TOTAL_BEATS = TOTAL_MEASURES * BEATS_PER_MEASURE; // 総拍数\n\n// 時間モードの定数\nconst TIME_MODE_TOTAL_SECONDS = 60; // 表示する総秒数\nconst PIXELS_PER_SECOND = 100; // 1秒あたりのピクセル数\n\nconst DAWPage = () => {\n  _s();\n  // ユニークID生成用のカウンター\n  const trackIdCounterRef = useRef(1);\n  // トラック名の番号管理用カウンター\n  const trackNameCounterRef = useRef(1);\n\n  // LocalStorageからの自動復元機能\n  const loadAutoSavedProject = () => {\n    try {\n      const autoSavedData = localStorage.getItem('dawProjectAutoSave');\n      if (autoSavedData) {\n        const projectData = JSON.parse(autoSavedData);\n\n        // トラックカウンターの復元\n        if (projectData.trackNameCounter) {\n          trackNameCounterRef.current = projectData.trackNameCounter;\n        }\n        if (projectData.trackIdCounter) {\n          trackIdCounterRef.current = projectData.trackIdCounter;\n        }\n\n        // 無効なクリップをフィルタリング\n        const validTracks = (projectData.tracks || []).map(track => ({\n          ...track,\n          clips: (track.clips || []).filter(clip => {\n            if (!clip.soundData || !clip.soundData.name) {\n              console.warn('自動保存データから無効なクリップを除外:', clip);\n              return false;\n            }\n            return true;\n          })\n        }));\n        return {\n          tracks: validTracks.length > 0 ? validTracks : [{\n            id: Date.now(),\n            name: 'トラック 1',\n            clips: []\n          }],\n          bpm: projectData.bpm || 120,\n          isTimeMode: projectData.isTimeMode || false,\n          secondsPerBeat: projectData.secondsPerBeat || 0.5\n        };\n      }\n    } catch (error) {\n      console.error('自動保存データの復元に失敗:', error);\n    }\n    return {\n      tracks: [{\n        id: Date.now(),\n        name: 'トラック 1',\n        clips: []\n      }],\n      bpm: 120\n    };\n  };\n  const initialData = loadAutoSavedProject();\n  const [tracks, setTracks] = useState(initialData.tracks);\n  const [bpm, setBpm] = useState(initialData.bpm);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [audioContext, setAudioContext] = useState(null);\n  const [trackHeight] = useState(80);\n  const [playingAudios, setPlayingAudios] = useState(new Map());\n  const [startPlayTime, setStartPlayTime] = useState(null);\n  const [error, setError] = useState(null);\n  const [sounds, setSounds] = useState([]);\n  const [showSoundPanel, setShowSoundPanel] = useState(true);\n  const [draggedClip, setDraggedClip] = useState(null);\n  const [dragPreview, setDragPreview] = useState(null);\n  const [draggedSoundDuration, setDraggedSoundDuration] = useState(400); // ドラッグ中の音素材の長さ\n  const [dragOffset, setDragOffset] = useState(0); // ドラッグ開始時のクリップ内オフセット\n\n  // 時間モード関連の状態\n  const [isTimeMode, setIsTimeMode] = useState(false); // false: 拍子モード, true: 秒数モード\n  const [secondsPerBeat, setSecondsPerBeat] = useState(0.5); // 秒数モード時の1拍あたりの秒数\n  const [isExporting, setIsExporting] = useState(false); // 音源出力中フラグ\n  const timelineRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const dragOverTimeoutRef = useRef(null);\n  useEffect(() => {\n    // Web Audio API の初期化\n    const ctx = new (window.AudioContext || window.webkitAudioContext)();\n    setAudioContext(ctx);\n\n    // LocalStorageから音素材を読み込み\n    const savedSounds = JSON.parse(localStorage.getItem('soundRecordings') || '[]');\n\n    // audioDataからBlobを復元\n    const soundsWithBlob = savedSounds.map(sound => {\n      if (sound.audioData) {\n        try {\n          // Base64データの検証\n          if (!sound.audioData.includes(',')) {\n            console.error('無効なBase64フォーマット:', sound.name);\n            return sound;\n          }\n          const base64Data = sound.audioData.split(',')[1];\n          if (!base64Data || base64Data.length === 0) {\n            console.error('Base64データが空です:', sound.name);\n            return sound;\n          }\n          const byteCharacters = atob(base64Data);\n          const byteNumbers = new Array(byteCharacters.length);\n          for (let i = 0; i < byteCharacters.length; i++) {\n            byteNumbers[i] = byteCharacters.charCodeAt(i);\n          }\n          const byteArray = new Uint8Array(byteNumbers);\n\n          // Blobサイズの検証\n          if (byteArray.length === 0) {\n            console.error('Blobデータが空です:', sound.name);\n            return sound;\n          }\n          const blob = new Blob([byteArray], {\n            type: 'audio/wav'\n          });\n\n          // Blobの有効性を確認\n          if (blob.size === 0) {\n            console.error('作成されたBlobのサイズが0です:', sound.name);\n            return sound;\n          }\n          return {\n            ...sound,\n            audioBlob: blob\n          };\n        } catch (error) {\n          console.error('音声データの復元に失敗:', sound.name, error);\n          return sound;\n        }\n      }\n      return sound;\n    });\n\n    // 有効な音素材のみをフィルタリング\n    const validSounds = soundsWithBlob.filter(sound => {\n      if (!sound.audioBlob) {\n        console.warn('audioBlobが存在しない音素材をスキップ:', sound.name);\n        return false;\n      }\n      if (!(sound.audioBlob instanceof Blob)) {\n        console.warn('無効なBlob形式の音素材をスキップ:', sound.name);\n        return false;\n      }\n      if (sound.audioBlob.size === 0) {\n        console.warn('サイズが0のBlob音素材をスキップ:', sound.name);\n        return false;\n      }\n      return true;\n    });\n    setSounds(validSounds);\n\n    // 無効な音素材があった場合はLocalStorageを更新\n    if (validSounds.length !== soundsWithBlob.length) {\n      const validSoundsForStorage = validSounds.map(sound => ({\n        ...sound,\n        audioBlob: undefined // Blobは保存しない\n      }));\n      localStorage.setItem('soundRecordings', JSON.stringify(validSoundsForStorage));\n    }\n    return () => {\n      if (ctx && ctx.state !== 'closed') {\n        ctx.close().catch(error => {\n          console.warn('初期AudioContext のクローズに失敗:', error);\n        });\n      }\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (dragOverTimeoutRef.current) {\n        clearTimeout(dragOverTimeoutRef.current);\n      }\n      // 再生中の音声をすべて停止・クリーンアップ\n      // useEffect内でplayingAudiosの最新値を取得\n      setPlayingAudios(currentPlayingAudios => {\n        currentPlayingAudios.forEach(({\n          audio,\n          timeoutId,\n          audioUrl\n        }) => {\n          if (timeoutId) {\n            clearTimeout(timeoutId);\n          }\n          if (audio) {\n            audio.pause();\n            audio.src = '';\n          }\n          if (audioUrl) {\n            URL.revokeObjectURL(audioUrl);\n          }\n        });\n        return new Map(); // 空のMapを返す\n      });\n      // グローバル変数をクリーンアップ\n      if (window.currentDraggedSoundBlob) {\n        window.currentDraggedSoundBlob = null;\n      }\n      if (window.currentDraggedSound) {\n        window.currentDraggedSound = null;\n      }\n    };\n  }, []);\n\n  // 音声ファイルの継続時間を取得してピクセル幅に変換\n  const getAudioDuration = useCallback((audioBlob, currentBpm = bpm) => {\n    return new Promise(async resolve => {\n      if (!audioBlob || !(audioBlob instanceof Blob)) {\n        resolve(400);\n        return;\n      }\n\n      // AudioContextを使用した方法を優先\n      if (audioContext) {\n        try {\n          const arrayBuffer = await audioBlob.arrayBuffer();\n          const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n          const durationInSeconds = audioBuffer.duration;\n          if (isFinite(durationInSeconds) && durationInSeconds > 0) {\n            let pixelsPerSecond;\n            if (isTimeMode) {\n              // 秒数モード：直接1秒 = PIXELS_PER_SECONDピクセル\n              pixelsPerSecond = PIXELS_PER_SECOND;\n            } else {\n              // 拍子モード：BPMベース\n              pixelsPerSecond = currentBpm / 60 * 100;\n            }\n            const widthInPixels = durationInSeconds * pixelsPerSecond;\n            resolve(widthInPixels);\n            return;\n          }\n        } catch (error) {\n          console.error('AudioContext方式でエラー:', error);\n        }\n      }\n      resolve(400);\n    });\n  }, [audioContext, bpm, isTimeMode]);\n\n  // 時間モードとBPMモードを切り替える関数\n  const toggleTimeMode = useCallback(async () => {\n    const newTimeMode = !isTimeMode;\n    setIsTimeMode(newTimeMode);\n\n    // 既存のクリップのdurationを新しいモードで再計算\n    const updatedTracks = await Promise.all(tracks.map(async track => {\n      const updatedClips = await Promise.all(track.clips.map(async clip => {\n        if (clip.soundData && clip.soundData.audioBlob) {\n          try {\n            const arrayBuffer = await clip.soundData.audioBlob.arrayBuffer();\n            const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n            const durationInSeconds = audioBuffer.duration;\n            let pixelsPerSecond;\n            if (newTimeMode) {\n              pixelsPerSecond = PIXELS_PER_SECOND;\n            } else {\n              pixelsPerSecond = bpm / 60 * 100;\n            }\n            const newDuration = durationInSeconds * pixelsPerSecond;\n            return {\n              ...clip,\n              duration: newDuration\n            };\n          } catch (error) {\n            console.warn('クリップのduration再計算に失敗:', error);\n            return clip;\n          }\n        }\n        return clip;\n      }));\n      return {\n        ...track,\n        clips: updatedClips\n      };\n    }));\n    setTracks(updatedTracks);\n  }, [isTimeMode, tracks, audioContext, bpm]);\n\n  // 秒数モードでの1拍あたりの秒数を変更する関数\n  const handleSecondsPerBeatChange = useCallback(newSecondsPerBeat => {\n    setSecondsPerBeat(newSecondsPerBeat);\n  }, []);\n\n  // スナップ処理（拍子モード vs 秒数モード）\n  const getSnapPosition = useCallback(position => {\n    if (isTimeMode) {\n      // 秒数モード：1拍（秒数）単位でスナップ\n      const beatWidthInPixels = secondsPerBeat * PIXELS_PER_SECOND;\n      const subBeatWidth = beatWidthInPixels / 2; // 半拍でスナップ\n      return Math.round(position / subBeatWidth) * subBeatWidth;\n    } else {\n      // 拍子モード：8分音符単位でスナップ\n      return Math.round(position / SUB_BEAT_WIDTH) * SUB_BEAT_WIDTH;\n    }\n  }, [isTimeMode, secondsPerBeat]);\n\n  // プレイヘッドのアニメーション更新\n  const updatePlayhead = useCallback(() => {\n    const animate = () => {\n      if (isPlaying && startPlayTime) {\n        const elapsed = (Date.now() - startPlayTime) / 1000; // 経過時間（秒）\n\n        let pixelsPerSecond;\n        if (isTimeMode) {\n          // 秒数モード：直接1秒 = PIXELS_PER_SECONDピクセル\n          pixelsPerSecond = PIXELS_PER_SECOND;\n        } else {\n          // 拍子モード：BPMに基づいたピクセル/秒\n          pixelsPerSecond = bpm / 60 * 100;\n        }\n        const newCurrentTime = elapsed * pixelsPerSecond;\n\n        // 有効な数値かチェック\n        if (isFinite(newCurrentTime) && newCurrentTime >= 0) {\n          setCurrentTime(newCurrentTime);\n        } else {\n          console.warn('無効なcurrentTime:', newCurrentTime, 'elapsed:', elapsed, 'pixelsPerSecond:', pixelsPerSecond);\n        }\n\n        // 次のフレームを要求\n        animationFrameRef.current = requestAnimationFrame(animate);\n      }\n    };\n    if (isPlaying && startPlayTime) {\n      animate();\n    }\n  }, [isPlaying, startPlayTime, bpm, isTimeMode]);\n  useEffect(() => {\n    if (isPlaying) {\n      if (!startPlayTime) {\n        // 再生開始時にstartPlayTimeを設定\n        let pixelsPerSecond;\n        if (isTimeMode) {\n          pixelsPerSecond = PIXELS_PER_SECOND;\n        } else {\n          pixelsPerSecond = bpm / 60 * 100;\n        }\n        if (isFinite(pixelsPerSecond) && pixelsPerSecond > 0) {\n          const timeInSeconds = currentTime / pixelsPerSecond;\n          if (isFinite(timeInSeconds) && timeInSeconds >= 0) {\n            setStartPlayTime(Date.now() - timeInSeconds * 1000);\n          } else {\n            setStartPlayTime(Date.now());\n          }\n        } else {\n          setStartPlayTime(Date.now());\n        }\n      }\n    } else {\n      // 再生停止時にアニメーションをクリア\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n        animationFrameRef.current = null;\n      }\n      setStartPlayTime(null);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPlaying, bpm, currentTime, isTimeMode]);\n\n  // startPlayTimeが設定されたときにアニメーションを開始\n  useEffect(() => {\n    if (isPlaying && startPlayTime) {\n      updatePlayhead();\n    }\n  }, [isPlaying, startPlayTime, updatePlayhead]);\n\n  // BPM変更時のハンドラー\n  const handleBpmChange = useCallback(async newBpm => {\n    setBpm(newBpm);\n\n    // 既存のクリップのdurationを新しいBPMで再計算\n    const updatedTracks = await Promise.all(tracks.map(async track => {\n      const updatedClips = await Promise.all(track.clips.map(async clip => {\n        if (clip.soundData && clip.soundData.audioBlob) {\n          try {\n            const newDuration = await getAudioDuration(clip.soundData.audioBlob, newBpm);\n            return {\n              ...clip,\n              duration: newDuration\n            };\n          } catch (error) {\n            console.warn('クリップのduration更新に失敗:', error);\n            return clip;\n          }\n        }\n        return clip;\n      }));\n      return {\n        ...track,\n        clips: updatedClips\n      };\n    }));\n    setTracks(updatedTracks);\n  }, [tracks, getAudioDuration]);\n\n  // プロジェクト保存機能\n  const saveProject = () => {\n    try {\n      const projectData = {\n        version: '1.0',\n        bpm: bpm,\n        tracks: tracks,\n        sounds: sounds.map(sound => ({\n          ...sound,\n          audioBlob: null,\n          // Blobは別途保存\n          audioData: sound.audioData // base64データを保持\n        })),\n        timestamp: Date.now(),\n        trackNameCounter: trackNameCounterRef.current,\n        trackIdCounter: trackIdCounterRef.current\n      };\n      const projectJson = JSON.stringify(projectData, null, 2);\n      const blob = new Blob([projectJson], {\n        type: 'application/json'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `music-project-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('プロジェクト保存エラー:', error);\n      setError('プロジェクトの保存に失敗しました。');\n    }\n  };\n\n  // プロジェクト読み込み機能\n  const loadProject = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const projectData = JSON.parse(e.target.result);\n\n        // バージョンチェック\n        if (!projectData.version) {\n          throw new Error('不正なプロジェクトファイルです');\n        }\n\n        // 音声データ復元用のヘルパー関数\n        const restoreAudioBlob = soundData => {\n          if (soundData && soundData.audioData) {\n            try {\n              const byteCharacters = atob(soundData.audioData.split(',')[1]);\n              const byteNumbers = new Array(byteCharacters.length);\n              for (let i = 0; i < byteCharacters.length; i++) {\n                byteNumbers[i] = byteCharacters.charCodeAt(i);\n              }\n              const byteArray = new Uint8Array(byteNumbers);\n              const blob = new Blob([byteArray], {\n                type: 'audio/wav'\n              });\n              return {\n                ...soundData,\n                audioBlob: blob\n              };\n            } catch (error) {\n              console.error('音声データの復元に失敗:', soundData.name || 'unknown', error);\n              return soundData;\n            }\n          }\n          return soundData;\n        };\n\n        // BPMを復元\n        setBpm(projectData.bpm || 120);\n\n        // トラックを復元（クリップ内の音声データも復元）\n        if (projectData.tracks) {\n          const restoredTracks = projectData.tracks.map(track => ({\n            ...track,\n            clips: track.clips.map(clip => ({\n              ...clip,\n              soundData: restoreAudioBlob(clip.soundData)\n            })).filter(clip => {\n              // 無効なクリップを除外\n              if (!clip.soundData || !clip.soundData.name) {\n                console.warn('無効なクリップを除外:', clip);\n                return false;\n              }\n              return true;\n            })\n          }));\n          setTracks(restoredTracks);\n        }\n\n        // カウンターを復元\n        if (projectData.trackNameCounter) {\n          trackNameCounterRef.current = projectData.trackNameCounter;\n        }\n        if (projectData.trackIdCounter) {\n          trackIdCounterRef.current = projectData.trackIdCounter;\n        }\n\n        // 音素材を復元（既存の音素材に追加）\n        if (projectData.sounds) {\n          const restoredSounds = projectData.sounds.map(sound => restoreAudioBlob(sound));\n\n          // 既存の音素材と読み込んだ音素材を結合\n          setSounds(prevSounds => {\n            const maxId = prevSounds.length > 0 ? Math.max(...prevSounds.map(s => s.id)) : 0;\n            const existingNames = new Set(prevSounds.map(s => s.name));\n            const newSounds = restoredSounds.map((sound, index) => {\n              let newName = sound.name;\n              let counter = 1;\n\n              // 名前の重複をチェックして、重複する場合は番号を付ける\n              while (existingNames.has(newName)) {\n                newName = `${sound.name} (${counter})`;\n                counter++;\n              }\n              existingNames.add(newName);\n              return {\n                ...sound,\n                id: maxId + index + 1,\n                // 新しいIDを割り当て\n                name: newName // 重複しない名前を設定\n              };\n            });\n            return [...prevSounds, ...newSounds];\n          });\n        }\n        setError(null);\n\n        // 読み込み後に自動保存データも更新\n        setTimeout(() => {\n          const autoSaveData = {\n            version: '1.0',\n            bpm: projectData.bpm || 120,\n            tracks: projectData.tracks || [],\n            timestamp: Date.now(),\n            trackNameCounter: projectData.trackNameCounter || 1,\n            trackIdCounter: projectData.trackIdCounter || 1\n          };\n          localStorage.setItem('dawProjectAutoSave', JSON.stringify(autoSaveData));\n        }, 100);\n      } catch (error) {\n        console.error('プロジェクト読み込みエラー:', error);\n        setError('プロジェクトファイルの読み込みに失敗しました。ファイルが正しいか確認してください。');\n      }\n    };\n    reader.readAsText(file);\n    // ファイル選択をリセット\n    event.target.value = '';\n  };\n\n  // 音源出力機能\n  const exportAudio = async () => {\n    if (!audioContext) {\n      setError('AudioContextが初期化されていません。');\n      return;\n    }\n    setIsExporting(true);\n    try {\n      // 全トラックの全クリップの最大終了時間を計算\n      let maxDuration = 0;\n      tracks.forEach(track => {\n        track.clips.forEach(clip => {\n          const pixelsPerSecond = bpm / 60 * 100;\n          const clipStartTimeInSeconds = clip.startTime / pixelsPerSecond;\n          const clipDurationInSeconds = clip.duration / pixelsPerSecond;\n          const clipEndTime = clipStartTimeInSeconds + clipDurationInSeconds;\n          maxDuration = Math.max(maxDuration, clipEndTime);\n        });\n      });\n      if (maxDuration === 0) {\n        setError('出力する音声がありません。音素材を配置してください。');\n        setIsExporting(false);\n        return;\n      }\n\n      // 出力用AudioContextを作成（44.1kHz）\n      const exportContext = new AudioContext({\n        sampleRate: 44100\n      });\n      const bufferLength = Math.ceil(maxDuration * exportContext.sampleRate);\n      const outputBuffer = exportContext.createBuffer(2, bufferLength, exportContext.sampleRate);\n      const leftChannel = outputBuffer.getChannelData(0);\n      const rightChannel = outputBuffer.getChannelData(1);\n\n      // 各トラックの各クリップを処理\n      for (const track of tracks) {\n        for (const clip of track.clips) {\n          if (clip.soundData && clip.soundData.audioBlob) {\n            try {\n              const arrayBuffer = await clip.soundData.audioBlob.arrayBuffer();\n              const audioBuffer = await exportContext.decodeAudioData(arrayBuffer);\n              const pixelsPerSecond = bpm / 60 * 100;\n              const startTimeInSamples = Math.floor(clip.startTime / pixelsPerSecond * exportContext.sampleRate);\n\n              // 音声をミックス\n              for (let channel = 0; channel < Math.min(audioBuffer.numberOfChannels, 2); channel++) {\n                const sourceData = audioBuffer.getChannelData(channel);\n                const targetData = channel === 0 ? leftChannel : rightChannel;\n                for (let i = 0; i < sourceData.length && startTimeInSamples + i < targetData.length; i++) {\n                  targetData[startTimeInSamples + i] += sourceData[i];\n                }\n              }\n\n              // モノラル音源の場合は両チャンネルにコピー\n              if (audioBuffer.numberOfChannels === 1) {\n                const sourceData = audioBuffer.getChannelData(0);\n                for (let i = 0; i < sourceData.length && startTimeInSamples + i < rightChannel.length; i++) {\n                  rightChannel[startTimeInSamples + i] += sourceData[i];\n                }\n              }\n            } catch (error) {\n              console.error('クリップの処理エラー:', error);\n            }\n          }\n        }\n      }\n\n      // WAVファイルとして出力\n      const wavBlob = audioBufferToWav(outputBuffer);\n      const url = URL.createObjectURL(wavBlob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `exported-music-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.wav`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      if (exportContext && exportContext.state !== 'closed') {\n        await exportContext.close().catch(error => {\n          console.warn('Export AudioContext のクローズに失敗:', error);\n        });\n      }\n    } catch (error) {\n      console.error('音源出力エラー:', error);\n      setError('音源の出力に失敗しました。');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  // AudioBufferをWAVファイルに変換\n  const audioBufferToWav = buffer => {\n    const length = buffer.length;\n    const numberOfChannels = buffer.numberOfChannels;\n    const sampleRate = buffer.sampleRate;\n    const bytesPerSample = 2;\n    const blockAlign = numberOfChannels * bytesPerSample;\n    const byteRate = sampleRate * blockAlign;\n    const dataSize = length * blockAlign;\n    const bufferSize = 44 + dataSize;\n    const arrayBuffer = new ArrayBuffer(bufferSize);\n    const view = new DataView(arrayBuffer);\n\n    // WAVファイルヘッダー\n    const writeString = (offset, string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    writeString(0, 'RIFF');\n    view.setUint32(4, bufferSize - 8, true);\n    writeString(8, 'WAVE');\n    writeString(12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, numberOfChannels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, byteRate, true);\n    view.setUint16(32, blockAlign, true);\n    view.setUint16(34, bytesPerSample * 8, true);\n    writeString(36, 'data');\n    view.setUint32(40, dataSize, true);\n\n    // 音声データ\n    let offset = 44;\n    for (let i = 0; i < length; i++) {\n      for (let channel = 0; channel < numberOfChannels; channel++) {\n        const sample = buffer.getChannelData(channel)[i];\n        const intSample = Math.max(-1, Math.min(1, sample)) * 0x7FFF;\n        view.setInt16(offset, intSample, true);\n        offset += 2;\n      }\n    }\n    return new Blob([arrayBuffer], {\n      type: 'audio/wav'\n    });\n  };\n  const addTrack = () => {\n    // より確実にユニークなIDを生成\n    trackIdCounterRef.current += 1;\n    const uniqueId = Date.now() + trackIdCounterRef.current;\n\n    // トラック名の番号を増加（削除されても番号は戻らない）\n    trackNameCounterRef.current += 1;\n    const trackName = `トラック ${trackNameCounterRef.current}`;\n    const newTrack = {\n      id: uniqueId,\n      name: trackName,\n      clips: []\n    };\n    setTracks(prevTracks => [...prevTracks, newTrack]);\n  };\n  const removeTrack = trackId => {\n    setTracks(prevTracks => {\n      if (prevTracks.length > 1) {\n        return prevTracks.filter(track => track.id !== trackId);\n      }\n      return prevTracks;\n    });\n  };\n  const handleDrop = async (e, trackId, timePosition) => {\n    e.preventDefault();\n    setDragPreview(null);\n    try {\n      // 既存のクリップの移動かどうかチェック\n      if (draggedClip) {\n        // ドラッグオフセットを考慮した新しい開始位置を計算\n        const adjustedPosition = timePosition - dragOffset;\n        // 拍または秒に合わせて位置を調整\n        const snappedPosition = Math.max(0, getSnapPosition(adjustedPosition));\n\n        // 既存クリップの移動\n        const updatedClip = {\n          ...draggedClip,\n          startTime: snappedPosition,\n          trackId: trackId\n        };\n        setTracks(prevTracks => prevTracks.map(track => {\n          if (track.id === draggedClip.originalTrackId && track.id === trackId) {\n            // 同じトラック内での移動\n            return {\n              ...track,\n              clips: track.clips.map(clip => clip.id === draggedClip.id ? updatedClip : clip)\n            };\n          } else if (track.id === draggedClip.originalTrackId) {\n            // 元のトラックからクリップを削除\n            return {\n              ...track,\n              clips: track.clips.filter(clip => clip.id !== draggedClip.id)\n            };\n          } else if (track.id === trackId) {\n            // 新しいトラックにクリップを追加\n            return {\n              ...track,\n              clips: [...track.clips, updatedClip]\n            };\n          }\n          return track;\n        }));\n        setDraggedClip(null);\n        setDragOffset(0);\n        return;\n      }\n\n      // 新しい音素材の配置\n      let soundData;\n      try {\n        // dataTransferからデータを取得\n        const jsonData = e.dataTransfer ? e.dataTransfer.getData('application/json') : '';\n        if (jsonData) {\n          soundData = JSON.parse(jsonData);\n        } else {\n          // モバイルの場合はグローバル変数から取得\n          soundData = window.currentDraggedSound;\n        }\n      } catch (error) {\n        console.error('ドラッグデータの取得に失敗:', error);\n        soundData = window.currentDraggedSound; // フォールバック\n      }\n      if (!soundData) {\n        console.error('音素材データが見つかりません');\n        setError('音素材データが見つかりません。再度お試しください。');\n        return;\n      }\n\n      // soundDataの必要なプロパティをチェック\n      if (!soundData.name) {\n        console.error('音素材の名前が見つかりません:', soundData);\n        setError('音素材の名前が不正です。再度お試しください。');\n        return;\n      }\n\n      // グローバル変数からaudioBlobを復元\n      if (window.currentDraggedSoundBlob) {\n        soundData.audioBlob = window.currentDraggedSoundBlob;\n        window.currentDraggedSoundBlob = null; // クリーンアップ\n      }\n\n      // グローバル変数をクリア\n      window.currentDraggedSound = null;\n\n      // 音声の実際の継続時間を取得（現在のBPMに基づいて）\n      let duration = 400; // デフォルト値（1小節）\n      if (soundData.audioBlob) {\n        try {\n          duration = await getAudioDuration(soundData.audioBlob, bpm);\n        } catch (error) {\n          console.warn('音声継続時間の取得に失敗しました:', error);\n        }\n      }\n\n      // durationが有効な値かチェック\n      if (!isFinite(duration) || duration <= 0) {\n        console.warn('無効なduration:', duration, 'デフォルト値を使用');\n        duration = 400; // 1小節分\n      }\n\n      // 新しい音素材の場合は通常のスナップ処理\n      const snappedPosition = getSnapPosition(timePosition);\n      const newClip = {\n        id: Date.now() + Math.random(),\n        // より確実にユニークなIDを生成\n        soundData: soundData,\n        startTime: snappedPosition,\n        duration: duration,\n        trackId: trackId\n      };\n\n      // 関数型更新を使用して最新の状態を確実に取得\n      setTracks(prevTracks => {\n        const updatedTracks = prevTracks.map(track => track.id === trackId ? {\n          ...track,\n          clips: [...track.clips, newClip]\n        } : track);\n        return updatedTracks;\n      });\n    } catch (error) {\n      console.error('ドロップエラー:', error);\n      setError('音素材の配置に失敗しました。再度お試しください。');\n    }\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n\n    // ドラッグされているのが既存クリップか新しい音素材かで処理を分ける\n    if (draggedClip) {\n      e.dataTransfer.dropEffect = 'move';\n    } else {\n      e.dataTransfer.dropEffect = 'copy';\n    }\n\n    // スロットリング - 16ms（60FPS）間隔で実行を制限\n    if (dragOverTimeoutRef.current) {\n      return;\n    }\n\n    // 必要な情報を事前に抽出\n    const clientX = e.clientX;\n    const currentTarget = e.currentTarget;\n    dragOverTimeoutRef.current = setTimeout(() => {\n      dragOverTimeoutRef.current = null;\n      updateDragPreview(clientX, currentTarget);\n    }, 16);\n  };\n  const updateDragPreview = (clientX, trackElement) => {\n    // null チェックを追加\n    if (!trackElement || !timelineRef.current) {\n      return;\n    }\n\n    // 初回ドラッグプレビュー表示時に強制クリーンアップタイマーを設定\n    if (!window.dragCleanupTimer) {\n      window.dragCleanupTimer = setTimeout(() => {\n        cleanupDragState();\n      }, 10000); // 10秒後に強制クリーンアップ\n    }\n    try {\n      // ドラッグプレビューの更新\n      const rect = trackElement.getBoundingClientRect();\n      const timePosition = clientX - rect.left;\n      let snappedPosition;\n      if (draggedClip) {\n        // 既存クリップの場合：ドラッグオフセットを考慮\n        const adjustedPosition = timePosition - dragOffset;\n        snappedPosition = Math.max(0, getSnapPosition(adjustedPosition));\n      } else {\n        // 新しい音素材の場合：通常の処理\n        snappedPosition = getSnapPosition(timePosition);\n      }\n      const trackRect = trackElement.getBoundingClientRect();\n      const tracksAreaRect = timelineRef.current.getBoundingClientRect();\n      if (tracksAreaRect && trackElement.dataset && trackElement.dataset.trackId) {\n        const relativeTop = trackRect.top - tracksAreaRect.top;\n        const trackId = parseInt(trackElement.dataset.trackId);\n\n        // trackIdが有効な数値かチェック\n        if (isNaN(trackId)) {\n          return;\n        }\n\n        // プレビュー幅を決定\n        let previewWidth = 400; // デフォルト値（1小節）\n\n        if (draggedClip) {\n          // 既存クリップの場合\n          previewWidth = isFinite(draggedClip.duration) && draggedClip.duration > 0 ? draggedClip.duration : 400;\n        } else {\n          // 新しい音素材の場合、事前に計算された長さを使用\n          previewWidth = draggedSoundDuration;\n        }\n        setDragPreview({\n          left: snappedPosition,\n          top: relativeTop + 10,\n          width: previewWidth,\n          trackId: trackId\n        });\n      }\n    } catch (error) {\n      console.warn('ドラッグプレビュー更新エラー:', error);\n      // エラーが発生した場合はプレビューをクリア\n      setDragPreview(null);\n    }\n  };\n  const removeClip = (trackId, clipId) => {\n    setTracks(prevTracks => prevTracks.map(track => track.id === trackId ? {\n      ...track,\n      clips: track.clips.filter(clip => clip.id !== clipId)\n    } : track));\n  };\n\n  // クリップのドラッグ開始\n  const handleClipDragStart = (clip, originalTrackId, mouseX, clipElement) => {\n    // クリップ内でのマウス位置のオフセットを計算\n    const clipRect = clipElement.getBoundingClientRect();\n    const offsetInClip = mouseX - clipRect.left;\n    setDraggedClip({\n      ...clip,\n      originalTrackId\n    });\n    setDragOffset(offsetInClip);\n  };\n\n  // ドラッグ状態の完全なクリーンアップ\n  const cleanupDragState = useCallback(() => {\n    // ドラッグオーバーのタイムアウトをクリア\n    if (dragOverTimeoutRef.current) {\n      clearTimeout(dragOverTimeoutRef.current);\n      dragOverTimeoutRef.current = null;\n    }\n\n    // 強制クリーンアップタイマーをクリア\n    if (window.dragCleanupTimer) {\n      clearTimeout(window.dragCleanupTimer);\n      window.dragCleanupTimer = null;\n    }\n\n    // すべてのドラッグ関連の状態をリセット\n    setDraggedClip(null);\n    setDragPreview(null);\n    setDraggedSoundDuration(400);\n    setDragOffset(0);\n\n    // DOM要素のクリーンアップ\n    document.querySelectorAll('.track').forEach(track => {\n      track.classList.remove('drag-over');\n    });\n\n    // モバイル用のドラッグプレビューを削除\n    const mobileDragPreview = document.querySelector('.mobile-drag-preview');\n    if (mobileDragPreview) {\n      mobileDragPreview.remove();\n    }\n\n    // グローバル変数のクリーンアップ\n    if (window.currentDraggedSoundBlob) {\n      window.currentDraggedSoundBlob = null;\n    }\n    if (window.currentDraggedSound) {\n      window.currentDraggedSound = null;\n    }\n\n    // ボディクラスのクリーンアップ\n    document.body.classList.remove('dragging');\n  }, []);\n\n  // コンポーネントマウント時にグローバルコールバックを設定\n  useEffect(() => {\n    window.cleanupDragStateCallback = cleanupDragState;\n\n    // グローバルなドラッグ終了イベントリスナーを追加\n    const handleGlobalDragEnd = () => {\n      cleanupDragState();\n    };\n    const handleGlobalDragLeave = e => {\n      // ドキュメント外にドラッグが出た場合\n      if (!e.relatedTarget || e.relatedTarget.nodeName === 'HTML') {\n        cleanupDragState();\n      }\n    };\n\n    // ドキュメントレベルでイベントリスナーを設定\n    document.addEventListener('dragend', handleGlobalDragEnd);\n    document.addEventListener('dragleave', handleGlobalDragLeave);\n\n    // クリーンアップ関数\n    return () => {\n      if (window.cleanupDragStateCallback === cleanupDragState) {\n        window.cleanupDragStateCallback = null;\n      }\n      document.removeEventListener('dragend', handleGlobalDragEnd);\n      document.removeEventListener('dragleave', handleGlobalDragLeave);\n    };\n  }, [cleanupDragState]);\n\n  // ドラッグ終了時のクリーンアップ\n  const handleDragEnd = e => {\n    // ドロップが正常に処理されなかった場合、元の状態を保持\n    if (draggedClip && e && e.dataTransfer && e.dataTransfer.dropEffect === 'none') {}\n\n    // 完全なクリーンアップ\n    cleanupDragState();\n  };\n  const play = async () => {\n    try {\n      // AudioContextが中断されている場合は再開\n      if (audioContext && audioContext.state === 'suspended') {\n        await audioContext.resume();\n      }\n      setIsPlaying(true);\n\n      // 現在の時間位置に基づいて、再生すべきクリップを見つける\n      let pixelsPerSecond;\n      if (isTimeMode) {\n        pixelsPerSecond = PIXELS_PER_SECOND;\n      } else {\n        pixelsPerSecond = bpm / 60 * 100;\n      }\n      const currentTimeInSeconds = currentTime / pixelsPerSecond;\n\n      // 各トラックのクリップを再生\n      const newPlayingAudios = new Map();\n      tracks.forEach(track => {\n        track.clips.forEach(clip => {\n          // clip.durationが有効な値かチェック\n          if (!isFinite(clip.duration) || clip.duration <= 0) {\n            console.warn('無効なclip.duration:', clip.duration, 'クリップをスキップします');\n            return;\n          }\n          const clipStartTimeInSeconds = clip.startTime / pixelsPerSecond;\n          const clipEndTimeInSeconds = clipStartTimeInSeconds + clip.duration / pixelsPerSecond;\n\n          // 計算結果が有効かチェック\n          if (!isFinite(clipStartTimeInSeconds) || !isFinite(clipEndTimeInSeconds)) {\n            console.warn('無効な時間計算:', {\n              clipStartTimeInSeconds,\n              clipEndTimeInSeconds\n            });\n            return;\n          }\n\n          // 現在の時間位置がクリップの範囲内または今後再生される場合\n          if (clipEndTimeInSeconds > currentTimeInSeconds) {\n            const delay = Math.max(0, clipStartTimeInSeconds - currentTimeInSeconds);\n            if (isFinite(delay) && delay >= 0) {\n              scheduleClipPlayback(clip, delay * 1000, newPlayingAudios);\n            }\n          }\n        });\n      });\n      setPlayingAudios(newPlayingAudios);\n    } catch (error) {\n      console.error('再生エラー:', error);\n      setError('音声の再生に失敗しました。ブラウザで音声が有効になっているか確認してください。');\n    }\n  };\n  const scheduleClipPlayback = (clip, delayMs, playingAudiosMap) => {\n    if (clip.soundData && clip.soundData.audioBlob && clip.soundData.audioBlob instanceof Blob) {\n      try {\n        const audio = new Audio();\n        const audioUrl = URL.createObjectURL(clip.soundData.audioBlob);\n        audio.src = audioUrl;\n        const timeoutId = setTimeout(() => {\n          audio.play().catch(error => {\n            console.error('音声再生エラー:', error);\n            URL.revokeObjectURL(audioUrl); // メモリリークを防ぐ\n          });\n        }, delayMs);\n\n        // 音声終了時にURLを解放\n        audio.addEventListener('ended', () => {\n          URL.revokeObjectURL(audioUrl);\n        });\n        playingAudiosMap.set(clip.id, {\n          audio,\n          timeoutId,\n          audioUrl\n        });\n      } catch (error) {\n        console.error('createObjectURL エラー:', error, 'audioBlob:', clip.soundData.audioBlob);\n      }\n    } else {\n      var _clip$soundData, _clip$soundData2, _clip$soundData3, _clip$soundData4, _clip$soundData5;\n      console.warn('audioBlobが無効です。クリップ情報:', {\n        clipId: clip.id,\n        soundDataName: (_clip$soundData = clip.soundData) === null || _clip$soundData === void 0 ? void 0 : _clip$soundData.name,\n        hasAudioData: !!((_clip$soundData2 = clip.soundData) !== null && _clip$soundData2 !== void 0 && _clip$soundData2.audioData),\n        hasAudioBlob: !!((_clip$soundData3 = clip.soundData) !== null && _clip$soundData3 !== void 0 && _clip$soundData3.audioBlob),\n        audioBlobType: typeof ((_clip$soundData4 = clip.soundData) === null || _clip$soundData4 === void 0 ? void 0 : _clip$soundData4.audioBlob),\n        isInstanceOfBlob: ((_clip$soundData5 = clip.soundData) === null || _clip$soundData5 === void 0 ? void 0 : _clip$soundData5.audioBlob) instanceof Blob\n      });\n\n      // AudioBlobが無効な場合、audioDataから復元を試行\n      if (clip.soundData && clip.soundData.audioData && !clip.soundData.audioBlob) {\n        try {\n          const byteCharacters = atob(clip.soundData.audioData.split(',')[1]);\n          const byteNumbers = new Array(byteCharacters.length);\n          for (let i = 0; i < byteCharacters.length; i++) {\n            byteNumbers[i] = byteCharacters.charCodeAt(i);\n          }\n          const byteArray = new Uint8Array(byteNumbers);\n          const blob = new Blob([byteArray], {\n            type: 'audio/wav'\n          });\n\n          // クリップのsoundDataを更新\n          clip.soundData.audioBlob = blob;\n\n          // 再帰的に再試行\n          scheduleClipPlayback(clip, delayMs, playingAudiosMap);\n          return;\n        } catch (restoreError) {\n          console.error('audioDataからのBlob復元に失敗:', restoreError);\n        }\n      }\n    }\n  };\n  const pause = () => {\n    setIsPlaying(false);\n\n    // 再生中の音声を一時停止\n    playingAudios.forEach(({\n      audio,\n      timeoutId,\n      audioUrl\n    }) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      if (!audio.paused) {\n        audio.pause();\n      }\n      // URLを解放\n      if (audioUrl) {\n        URL.revokeObjectURL(audioUrl);\n      }\n    });\n  };\n  const stop = () => {\n    setIsPlaying(false);\n    setCurrentTime(0);\n\n    // 再生中の音声を停止\n    playingAudios.forEach(({\n      audio,\n      timeoutId,\n      audioUrl\n    }) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      audio.pause();\n      audio.currentTime = 0;\n      // URLを解放\n      if (audioUrl) {\n        URL.revokeObjectURL(audioUrl);\n      }\n    });\n    setPlayingAudios(new Map());\n  };\n\n  // タイムラインデータの自動保存機能\n  useEffect(() => {\n    const autoSaveProject = () => {\n      try {\n        const projectData = {\n          version: '1.0',\n          bpm: bpm,\n          tracks: tracks,\n          timestamp: Date.now(),\n          trackNameCounter: trackNameCounterRef.current,\n          trackIdCounter: trackIdCounterRef.current,\n          isTimeMode: isTimeMode,\n          secondsPerBeat: secondsPerBeat\n        };\n        localStorage.setItem('dawProjectAutoSave', JSON.stringify(projectData));\n      } catch (error) {\n        console.error('プロジェクトの自動保存に失敗:', error);\n      }\n    };\n\n    // 初期化後の自動保存（tracksやbpmが変更された時）\n    if (tracks.length > 0) {\n      autoSaveProject();\n    }\n  }, [tracks, bpm, isTimeMode, secondsPerBeat]);\n\n  // 音素材の更新監視（他のページで音が追加された場合の対応）\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (!document.hidden) {\n        // ページが表示されたときに音素材を再読み込み\n        const savedSounds = JSON.parse(localStorage.getItem('soundRecordings') || '[]');\n\n        // 音声データ復元処理（既存のロジックを再利用）\n        const soundsWithBlob = savedSounds.map(sound => {\n          if (sound.audioData) {\n            try {\n              const base64Data = sound.audioData.split(',')[1];\n              if (!base64Data || base64Data.length === 0) {\n                return sound;\n              }\n              const byteCharacters = atob(base64Data);\n              const byteNumbers = new Array(byteCharacters.length);\n              for (let i = 0; i < byteCharacters.length; i++) {\n                byteNumbers[i] = byteCharacters.charCodeAt(i);\n              }\n              const byteArray = new Uint8Array(byteNumbers);\n              const blob = new Blob([byteArray], {\n                type: 'audio/wav'\n              });\n              return {\n                ...sound,\n                audioBlob: blob\n              };\n            } catch (error) {\n              console.error('音声データの復元に失敗:', sound.name, error);\n              return sound;\n            }\n          }\n          return sound;\n        });\n        const validSounds = soundsWithBlob.filter(sound => sound.audioBlob && sound.audioBlob instanceof Blob && sound.audioBlob.size > 0);\n        setSounds(validSounds);\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, []);\n\n  // 自動保存データをクリアする機能\n  const clearAutoSave = () => {\n    try {\n      localStorage.removeItem('dawProjectAutoSave');\n\n      // 初期状態にリセット\n      setTracks([{\n        id: Date.now(),\n        name: 'トラック 1',\n        clips: []\n      }]);\n      setBpm(120);\n      trackNameCounterRef.current = 1;\n      trackIdCounterRef.current = 1;\n      setError(null);\n      alert('✅ プロジェクトをリセットしました');\n    } catch (error) {\n      console.error('自動保存データのクリアに失敗:', error);\n      setError('プロジェクトのリセットに失敗しました');\n    }\n  };\n\n  // 無効なクリップを除外する関数\n  const cleanupInvalidClips = () => {\n    setTracks(prevTracks => {\n      const cleanedTracks = prevTracks.map(track => ({\n        ...track,\n        clips: track.clips.filter(clip => {\n          if (!clip.soundData || !clip.soundData.name) {\n            console.warn('無効なクリップを除外:', clip);\n            return false;\n          }\n          return true;\n        })\n      }));\n      const removedCount = prevTracks.reduce((total, track) => total + track.clips.length, 0) - cleanedTracks.reduce((total, track) => total + track.clips.length, 0);\n      if (removedCount > 0) {}\n      return cleanedTracks;\n    });\n  };\n\n  // 初期化時に無効なクリップをクリーンアップ\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      cleanupInvalidClips();\n    }, 1000); // 1秒後に実行\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  // コンポーネントアンマウント時の包括的クリーンアップ\n  useEffect(() => {\n    return () => {\n      // ドラッグ状態のクリーンアップ\n      cleanupDragState();\n\n      // 再生中の音声をすべて停止\n      setPlayingAudios(currentPlayingAudios => {\n        currentPlayingAudios.forEach(({\n          audio,\n          timeoutId,\n          audioUrl\n        }) => {\n          if (timeoutId) {\n            clearTimeout(timeoutId);\n          }\n          if (audio) {\n            audio.pause();\n            audio.src = '';\n          }\n          if (audioUrl) {\n            URL.revokeObjectURL(audioUrl);\n          }\n        });\n        return new Map();\n      });\n\n      // AudioContextをクリーンアップ\n      if (audioContext && audioContext.state !== 'closed') {\n        audioContext.close().catch(error => {\n          console.warn('AudioContext のクローズに失敗:', error);\n        });\n      }\n\n      // アニメーションフレームをクリア\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n\n      // タイムアウトをクリア\n      if (dragOverTimeoutRef.current) {\n        clearTimeout(dragOverTimeoutRef.current);\n      }\n    };\n  }, [cleanupDragState, audioContext]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"daw-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83C\\uDFB9 \\u97F3\\u697D\\u3065\\u304F\\u308A\\u30DA\\u30FC\\u30B8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1404,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u97F3\\u7D20\\u6750\\u3092\\u30C9\\u30E9\\u30C3\\u30B0&\\u30C9\\u30ED\\u30C3\\u30D7\\u3057\\u3066\\u97F3\\u697D\\u3092\\u4F5C\\u308A\\u307E\\u3057\\u3087\\u3046\\uFF01\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1405,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u26A0\\uFE0F \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1409,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setError(null),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1410,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1408,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"daw-controls card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transport-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `transport-btn play-btn ${isPlaying ? 'playing' : ''}`,\n          onClick: isPlaying ? pause : play,\n          children: isPlaying ? '⏸️' : '▶️'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1416,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"transport-btn stop-btn\",\n          onClick: stop,\n          children: \"\\u23F9\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1422,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1415,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bpm-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"bpm\",\n          children: \"\\uD83C\\uDFB5 BPM:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1428,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"bpm\",\n          type: \"number\",\n          value: bpm,\n          onChange: e => handleBpmChange(parseInt(e.target.value)),\n          min: \"60\",\n          max: \"200\",\n          className: \"bpm-input\",\n          disabled: isTimeMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1429,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1427,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time-mode-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `time-mode-toggle ${isTimeMode ? 'active' : ''}`,\n          onClick: toggleTimeMode,\n          title: isTimeMode ? '拍子モードに切り替え' : '秒数モードに切り替え',\n          children: [\"\\u23F0 \", isTimeMode ? '秒数モード' : '拍子モード']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1442,\n          columnNumber: 11\n        }, this), isTimeMode && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"seconds-per-beat-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"secondsPerBeat\",\n            children: \"1\\u62CD:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1452,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"secondsPerBeat\",\n            type: \"number\",\n            value: secondsPerBeat,\n            onChange: e => handleSecondsPerBeatChange(parseFloat(e.target.value)),\n            min: \"0.1\",\n            max: \"5.0\",\n            step: \"0.1\",\n            className: \"seconds-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1453,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\u79D2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1463,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1451,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1441,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"track-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button-primary\",\n          onClick: addTrack,\n          children: \"\\u2795 \\u30C8\\u30E9\\u30C3\\u30AF\\u8FFD\\u52A0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1469,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button-secondary\",\n          onClick: () => setShowSoundPanel(!showSoundPanel),\n          children: showSoundPanel ? '🎵 音素材を隠す' : '🎵 音素材を表示'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1472,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1468,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button-secondary\",\n          onClick: saveProject,\n          children: \"\\uD83D\\uDCBE \\u30D7\\u30ED\\u30B8\\u30A7\\u30AF\\u30C8\\u4FDD\\u5B58\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1481,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"button-secondary file-input-label\",\n          children: [\"\\uD83D\\uDCC1 \\u30D7\\u30ED\\u30B8\\u30A7\\u30AF\\u30C8\\u8AAD\\u307F\\u8FBC\\u307F\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".json\",\n            onChange: loadProject,\n            style: {\n              display: 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1486,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1484,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button-warning\",\n          onClick: () => {\n            if (window.confirm('🗑️ プロジェクトをリセットしますか？\\n\\n現在の作業内容がすべて削除されます。')) {\n              clearAutoSave();\n            }\n          },\n          title: \"\\u30D7\\u30ED\\u30B8\\u30A7\\u30AF\\u30C8\\u3092\\u30EA\\u30BB\\u30C3\\u30C8\\uFF08\\u81EA\\u52D5\\u4FDD\\u5B58\\u30C7\\u30FC\\u30BF\\u3082\\u30AF\\u30EA\\u30A2\\uFF09\",\n          children: \"\\uD83D\\uDDD1\\uFE0F \\u30EA\\u30BB\\u30C3\\u30C8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1493,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button-primary\",\n          onClick: exportAudio,\n          disabled: isExporting,\n          children: isExporting ? '🔄 出力中...' : '🎧 音源出力'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1504,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1480,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1414,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"daw-main-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `sound-panel ${!showSoundPanel ? 'panel-hidden' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sound-panel-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83C\\uDFB5 \\u97F3\\u7D20\\u6750\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1517,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sound-panel-close\",\n            onClick: () => setShowSoundPanel(false),\n            title: \"\\u97F3\\u7D20\\u6750\\u30D1\\u30CD\\u30EB\\u3092\\u9589\\u3058\\u308B\",\n            children: \"\\u2715\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1518,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1516,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sound-list\",\n          children: sounds.length > 0 ? sounds.map(sound => /*#__PURE__*/_jsxDEV(SoundItem, {\n            sound: sound,\n            onDragStart: async sound => {\n              // ドラッグ開始時に音声の長さを計算\n              if (sound.audioBlob) {\n                try {\n                  const duration = await getAudioDuration(sound.audioBlob, bpm);\n                  setDraggedSoundDuration(duration);\n                } catch (error) {\n                  console.warn('ドラッグ時の音声長さ計算に失敗:', error);\n                  setDraggedSoundDuration(400);\n                }\n              } else {\n                setDraggedSoundDuration(400);\n              }\n            }\n          }, sound.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1529,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-sounds\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\u97F3\\u7D20\\u6750\\u304C\\u3042\\u308A\\u307E\\u305B\\u3093\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1550,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\u300C\\u97F3\\u3042\\u3064\\u3081\\u300D\\u30DA\\u30FC\\u30B8\\u3067\\u97F3\\u3092\\u9332\\u97F3\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1551,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1549,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1526,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1515,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `daw-workspace ${!showSoundPanel ? 'panel-hidden' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track-headers\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timeline-header-spacer\",\n            children: \"\\u30BF\\u30A4\\u30E0\\u30E9\\u30A4\\u30F3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1559,\n            columnNumber: 13\n          }, this), tracks.map((track, index) => /*#__PURE__*/_jsxDEV(TrackHeader, {\n            track: track,\n            trackIndex: index,\n            onRemove: removeTrack,\n            trackHeight: trackHeight\n          }, track.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1563,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1558,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timeline-container\",\n          children: [/*#__PURE__*/_jsxDEV(Timeline, {\n            bpm: bpm,\n            isTimeMode: isTimeMode,\n            secondsPerBeat: secondsPerBeat\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1574,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tracks-area\",\n            ref: timelineRef,\n            style: {\n              minWidth: isTimeMode ? TIME_MODE_TOTAL_SECONDS * PIXELS_PER_SECOND : TOTAL_MEASURES * MEASURE_WIDTH\n            },\n            children: [/*#__PURE__*/_jsxDEV(Playhead, {\n              currentTime: currentTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1584,\n              columnNumber: 15\n            }, this), dragPreview && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"drag-preview\",\n              style: {\n                left: dragPreview.left,\n                top: dragPreview.top,\n                width: dragPreview.width\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1586,\n              columnNumber: 17\n            }, this), tracks.map(track => /*#__PURE__*/_jsxDEV(Track, {\n              track: track,\n              onDrop: handleDrop,\n              onDragOver: handleDragOver,\n              onRemoveClip: removeClip,\n              onClipDragStart: handleClipDragStart,\n              onDragEnd: handleDragEnd,\n              trackHeight: trackHeight,\n              updateDragPreview: updateDragPreview,\n              isTimeMode: isTimeMode,\n              secondsPerBeat: secondsPerBeat\n            }, track.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1596,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1575,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1573,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1557,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1514,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"instructions card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDCD6 \\u4F7F\\u3044\\u65B9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1616,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uD83D\\uDDA5\\uFE0F PC:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1618,\n            columnNumber: 15\n          }, this), \" \\u5DE6\\u5074\\u306E\\u97F3\\u7D20\\u6750\\u30D1\\u30CD\\u30EB\\u304B\\u3089\\u97F3\\u7D20\\u6750\\u3092\\u30C8\\u30E9\\u30C3\\u30AF\\u306B\\u30C9\\u30E9\\u30C3\\u30B0&\\u30C9\\u30ED\\u30C3\\u30D7\\u3057\\u3066\\u914D\\u7F6E\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1618,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uD83D\\uDCF1 \\u30B9\\u30DE\\u30DB/\\u30BF\\u30D6\\u30EC\\u30C3\\u30C8:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1619,\n            columnNumber: 15\n          }, this), \" \\u97F3\\u7D20\\u6750\\u3092\\u9577\\u62BC\\u3057\\u3057\\u3066\\u304B\\u3089\\u30C8\\u30E9\\u30C3\\u30AF\\u307E\\u3067\\u30C9\\u30E9\\u30C3\\u30B0\\u3057\\u3066\\u914D\\u7F6E\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1619,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u914D\\u7F6E\\u6E08\\u307F\\u306E\\u97F3\\u7D20\\u6750\\u3082\\u30C9\\u30E9\\u30C3\\u30B0\\u3057\\u3066\\u5225\\u306E\\u5834\\u6240\\u306B\\u79FB\\u52D5\\u3067\\u304D\\u307E\\u3059\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1620,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u30C9\\u30E9\\u30C3\\u30B0\\u4E2D\\u306F\\u914D\\u7F6E\\u4E88\\u5B9A\\u4F4D\\u7F6E\\u306B\\u9752\\u3044\\u5F71\\u304C\\u8868\\u793A\\u3055\\u308C\\u307E\\u3059\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1621,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u97F3\\u7D20\\u6750\\u306F8\\u5206\\u97F3\\u7B26\\uFF08\\u88CF\\u62CD\\u542B\\u3080\\uFF09\\u306B\\u5408\\u308F\\u305B\\u3066\\u81EA\\u52D5\\u7684\\u306B\\u914D\\u7F6E\\u3055\\u308C\\u307E\\u3059\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1622,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u97F3\\u7D20\\u6750\\u30D1\\u30CD\\u30EB\\u306E\\u25B6\\uFE0F\\u30DC\\u30BF\\u30F3\\u3067\\u500B\\u5225\\u306B\\u97F3\\u3092\\u78BA\\u8A8D\\u3067\\u304D\\u307E\\u3059\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1623,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u25B6\\uFE0F\\u30DC\\u30BF\\u30F3\\u3067\\u518D\\u751F\\u3001\\u23F8\\uFE0F\\u30DC\\u30BF\\u30F3\\u3067\\u4E00\\u6642\\u505C\\u6B62\\u3001\\u23F9\\uFE0F\\u30DC\\u30BF\\u30F3\\u3067\\u505C\\u6B62\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1624,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"BPM\\u3092\\u5909\\u66F4\\u3057\\u3066\\u97F3\\u697D\\u306E\\u901F\\u3055\\u3092\\u8ABF\\u6574\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1625,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u30C8\\u30E9\\u30C3\\u30AF\\u3092\\u8FFD\\u52A0\\u3057\\u3066\\u8907\\u6570\\u306E\\u97F3\\u3092\\u91CD\\u306D\\u308B\\u3053\\u3068\\u304C\\u3067\\u304D\\u307E\\u3059\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1626,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uD83D\\uDCBE \\u30D7\\u30ED\\u30B8\\u30A7\\u30AF\\u30C8\\u4FDD\\u5B58:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1627,\n            columnNumber: 15\n          }, this), \" \\u7DE8\\u96C6\\u4E2D\\u306E\\u30C7\\u30FC\\u30BF\\u3092JSON\\u30D5\\u30A1\\u30A4\\u30EB\\u3068\\u3057\\u3066\\u4FDD\\u5B58\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1627,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uD83D\\uDCC1 \\u30D7\\u30ED\\u30B8\\u30A7\\u30AF\\u30C8\\u8AAD\\u307F\\u8FBC\\u307F:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1628,\n            columnNumber: 15\n          }, this), \" \\u4FDD\\u5B58\\u3057\\u305F\\u30D7\\u30ED\\u30B8\\u30A7\\u30AF\\u30C8\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u8AAD\\u307F\\u8FBC\\u3093\\u3067\\u7DE8\\u96C6\\u3092\\u518D\\u958B\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1628,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uD83C\\uDFA7 \\u97F3\\u6E90\\u51FA\\u529B:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1629,\n            columnNumber: 15\n          }, this), \" \\u5B8C\\u6210\\u3057\\u305F\\u697D\\u66F2\\u3092WAV\\u30D5\\u30A1\\u30A4\\u30EB\\u3068\\u3057\\u3066\\u51FA\\u529B\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1629,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uD83D\\uDDD1\\uFE0F \\u30EA\\u30BB\\u30C3\\u30C8:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1630,\n            columnNumber: 15\n          }, this), \" \\u73FE\\u5728\\u306E\\u30D7\\u30ED\\u30B8\\u30A7\\u30AF\\u30C8\\u3092\\u30EA\\u30BB\\u30C3\\u30C8\\u3057\\u3066\\u65B0\\u3057\\u304F\\u59CB\\u3081\\u308B\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1630,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1617,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auto-save-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uD83D\\uDCBE \\u81EA\\u52D5\\u4FDD\\u5B58\\u6A5F\\u80FD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1633,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u81EA\\u52D5\\u4FDD\\u5B58:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1635,\n              columnNumber: 17\n            }, this), \" \\u30C8\\u30E9\\u30C3\\u30AF\\u3084BPM\\u306E\\u5909\\u66F4\\u306F\\u81EA\\u52D5\\u7684\\u306B\\u4FDD\\u5B58\\u3055\\u308C\\u307E\\u3059\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1635,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u4ED6\\u30DA\\u30FC\\u30B8\\u3068\\u306E\\u9023\\u643A:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1636,\n              columnNumber: 17\n            }, this), \" \\u300C\\u97F3\\u3042\\u3064\\u3081\\u300D\\u30DA\\u30FC\\u30B8\\u3067\\u9332\\u97F3\\u3057\\u305F\\u97F3\\u306F\\u81EA\\u52D5\\u7684\\u306B\\u53CD\\u6620\\u3055\\u308C\\u307E\\u3059\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1636,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u5FA9\\u5143\\u6A5F\\u80FD:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1637,\n              columnNumber: 17\n            }, this), \" \\u30DA\\u30FC\\u30B8\\u3092\\u30EA\\u30ED\\u30FC\\u30C9\\u3057\\u3066\\u3082\\u4F5C\\u696D\\u5185\\u5BB9\\u304C\\u81EA\\u52D5\\u7684\\u306B\\u5FA9\\u5143\\u3055\\u308C\\u307E\\u3059\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1637,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u5B89\\u5FC3\\u3057\\u3066\\u79FB\\u52D5:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1638,\n              columnNumber: 17\n            }, this), \" \\u4ED6\\u306E\\u30DA\\u30FC\\u30B8\\u306B\\u79FB\\u52D5\\u3057\\u3066\\u3082\\u4F5C\\u696D\\u5185\\u5BB9\\u306F\\u4FDD\\u6301\\u3055\\u308C\\u307E\\u3059\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1638,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1634,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1632,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mobile-tips\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uD83D\\uDCF1 \\u30B9\\u30DE\\u30FC\\u30C8\\u30D5\\u30A9\\u30F3\\u5229\\u7528\\u306E\\u30B3\\u30C4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1642,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\u97F3\\u7D20\\u6750\\u3092\\u8EFD\\u304F\\u9577\\u62BC\\u3057\\u3059\\u308B\\u3068\\u30C9\\u30E9\\u30C3\\u30B0\\u30E2\\u30FC\\u30C9\\u306B\\u306A\\u308A\\u307E\\u3059\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1644,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\u30C9\\u30E9\\u30C3\\u30B0\\u4E2D\\u306F\\u753B\\u9762\\u304C\\u30B9\\u30AF\\u30ED\\u30FC\\u30EB\\u3057\\u306A\\u3044\\u3088\\u3046\\u5236\\u5FA1\\u3055\\u308C\\u307E\\u3059\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1645,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\u9752\\u304F\\u30CF\\u30A4\\u30E9\\u30A4\\u30C8\\u3055\\u308C\\u305F\\u30C8\\u30E9\\u30C3\\u30AF\\u3067\\u6307\\u3092\\u96E2\\u3059\\u3068\\u97F3\\u7D20\\u6750\\u304C\\u914D\\u7F6E\\u3055\\u308C\\u307E\\u3059\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1646,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\u6A2A\\u753B\\u9762\\u8868\\u793A\\u306B\\u3059\\u308B\\u3068\\u3088\\u308A\\u4F7F\\u3044\\u3084\\u3059\\u304F\\u306A\\u308A\\u307E\\u3059\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1647,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1643,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1641,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1615,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1403,\n    columnNumber: 5\n  }, this);\n};\n_s(DAWPage, \"p4s6QSctaO9OcHoEQk9laJ/pKZo=\");\n_c = DAWPage;\nconst SoundItem = ({\n  sound,\n  onDragStart\n}) => {\n  _s2();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const [touchStart, setTouchStart] = useState(null);\n  const [touchMove, setTouchMove] = useState(null);\n  const handleDragStart = e => {\n    // audioBlob以外のデータをJSON文字列として設定\n    const soundDataForTransfer = {\n      ...sound,\n      audioBlob: null // Blobは直接シリアライズできないため一時的にnullに\n    };\n    e.dataTransfer.setData('application/json', JSON.stringify(soundDataForTransfer));\n    e.dataTransfer.effectAllowed = 'copy';\n\n    // 実際のaudioBlobは別途グローバル変数で保持\n    window.currentDraggedSoundBlob = sound.audioBlob;\n\n    // 親コンポーネントのonDragStart関数を呼び出し（音声の長さを計算）\n    if (onDragStart) {\n      onDragStart(sound);\n    }\n  };\n\n  // タッチイベント対応\n  const handleTouchStart = e => {\n    const touch = e.touches[0];\n    setTouchStart({\n      x: touch.clientX,\n      y: touch.clientY\n    });\n    setIsDragging(false);\n\n    // 長押し判定用のタイマーは設定せず、移動検知でのみドラッグを開始\n  };\n  const handleTouchMove = e => {\n    if (!touchStart) return;\n    const touch = e.touches[0];\n    const currentPos = {\n      x: touch.clientX,\n      y: touch.clientY\n    };\n    setTouchMove(currentPos);\n\n    // ドラッグ開始の判定（15px以上移動）- 閾値を上げてより意図的な移動のみドラッグ扱い\n    const deltaX = Math.abs(currentPos.x - touchStart.x);\n    const deltaY = Math.abs(currentPos.y - touchStart.y);\n    if (!isDragging && (deltaX > 15 || deltaY > 15)) {\n      setIsDragging(true);\n      // スクロールを一時的に無効化（移動が確定してから）\n      document.body.classList.add('dragging');\n\n      // 親コンポーネントのonDragStart関数を呼び出し\n      if (onDragStart) {\n        onDragStart(sound);\n      }\n      // グローバル変数に設定\n      window.currentDraggedSoundBlob = sound.audioBlob;\n      window.currentDraggedSound = sound;\n    }\n    if (isDragging) {\n      // passiveイベントではpreventDefaultが使えないので、代わりにtouchActionでスクロールを制御\n\n      // ドラッグプレビューの位置を更新\n      const dragPreview = document.querySelector('.mobile-drag-preview');\n      if (dragPreview) {\n        dragPreview.style.left = `${currentPos.x - 50}px`;\n        dragPreview.style.top = `${currentPos.y - 20}px`;\n      }\n\n      // ドロップターゲットのハイライト\n      const elementBelow = document.elementFromPoint(currentPos.x, currentPos.y);\n      const trackElement = elementBelow === null || elementBelow === void 0 ? void 0 : elementBelow.closest('.track');\n\n      // 既存のハイライトを削除\n      document.querySelectorAll('.track').forEach(track => {\n        track.classList.remove('drag-over');\n      });\n\n      // 新しいハイライトを追加\n      if (trackElement) {\n        trackElement.classList.add('drag-over');\n      }\n    }\n  };\n  const handleTouchEnd = e => {\n    if (isDragging && touchMove) {\n      // ドロップ処理\n      const elementBelow = document.elementFromPoint(touchMove.x, touchMove.y);\n      const trackElement = elementBelow === null || elementBelow === void 0 ? void 0 : elementBelow.closest('.track');\n      if (trackElement) {\n        const trackId = parseInt(trackElement.dataset.trackId);\n        const rect = trackElement.getBoundingClientRect();\n        const timePosition = touchMove.x - rect.left;\n\n        // ドロップイベントを発火\n        const dropEvent = new CustomEvent('mobileDrop', {\n          detail: {\n            trackId,\n            timePosition,\n            sound: sound\n          }\n        });\n        trackElement.dispatchEvent(dropEvent);\n      }\n    }\n\n    // クリーンアップ\n    setTouchStart(null);\n    setTouchMove(null);\n    setIsDragging(false);\n\n    // SoundItem 内での直接クリーンアップ\n    document.body.classList.remove('dragging');\n\n    // ハイライトを削除\n    document.querySelectorAll('.track').forEach(track => {\n      track.classList.remove('drag-over');\n    });\n\n    // モバイル用のドラッグプレビューを削除\n    const mobileDragPreview = document.querySelector('.mobile-drag-preview');\n    if (mobileDragPreview) {\n      mobileDragPreview.remove();\n    }\n\n    // グローバル変数をクリア\n    if (window.currentDraggedSoundBlob) {\n      window.currentDraggedSoundBlob = null;\n    }\n    if (window.currentDraggedSound) {\n      window.currentDraggedSound = null;\n    }\n  };\n  const playSound = () => {\n    if (sound.audioBlob && !isPlaying && !isDragging) {\n      // Blobの有効性をチェック\n      if (!(sound.audioBlob instanceof Blob) || sound.audioBlob.size === 0) {\n        var _sound$audioBlob;\n        console.error('無効なaudioBlob:', {\n          name: sound.name,\n          isBlob: sound.audioBlob instanceof Blob,\n          size: (_sound$audioBlob = sound.audioBlob) === null || _sound$audioBlob === void 0 ? void 0 : _sound$audioBlob.size\n        });\n        return;\n      }\n      const audio = new Audio();\n      let audioUrl;\n      try {\n        audioUrl = URL.createObjectURL(sound.audioBlob);\n        audio.src = audioUrl;\n        audio.play().then(() => {\n          setIsPlaying(true);\n          const handleEnded = () => {\n            setIsPlaying(false);\n            if (audioUrl) {\n              URL.revokeObjectURL(audioUrl); // URLをクリーンアップ\n            }\n            audio.removeEventListener('ended', handleEnded);\n          };\n          audio.addEventListener('ended', handleEnded);\n\n          // 音声の読み込みエラーもハンドリング\n          audio.addEventListener('error', error => {\n            console.error('音声読み込みエラー:', error);\n            setIsPlaying(false);\n            if (audioUrl) {\n              URL.revokeObjectURL(audioUrl);\n            }\n          });\n        }).catch(error => {\n          console.error('音声再生エラー:', error);\n          if (audioUrl) {\n            URL.revokeObjectURL(audioUrl); // エラー時もクリーンアップ\n          }\n          setIsPlaying(false);\n        });\n      } catch (error) {\n        console.error('createObjectURLエラー:', error);\n        setIsPlaying(false);\n      }\n    } else {\n      console.error('再生条件不満足:', {\n        hasAudioBlob: !!sound.audioBlob,\n        isPlaying,\n        isDragging\n      });\n    }\n  };\n\n  // ドラッグプレビューを作成\n  const createDragPreview = useCallback(() => {\n    if (isDragging && touchMove) {\n      let dragPreview = document.querySelector('.mobile-drag-preview');\n      if (!dragPreview) {\n        dragPreview = document.createElement('div');\n        dragPreview.className = 'mobile-drag-preview';\n        dragPreview.textContent = sound.name;\n        dragPreview.style.cssText = `\n          position: fixed;\n          background: rgba(0, 123, 255, 0.8);\n          color: white;\n          padding: 5px 10px;\n          border-radius: 4px;\n          font-size: 12px;\n          pointer-events: none;\n          z-index: 1000;\n          left: ${touchMove.x - 50}px;\n          top: ${touchMove.y - 20}px;\n        `;\n        document.body.appendChild(dragPreview);\n      }\n    }\n  }, [isDragging, touchMove, sound.name]);\n\n  // ドラッグプレビューの更新\n  React.useEffect(() => {\n    if (isDragging) {\n      createDragPreview();\n    }\n  }, [isDragging, touchMove, createDragPreview]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `sound-item ${isDragging ? 'dragging' : ''}`,\n    draggable: \"true\",\n    onDragStart: handleDragStart,\n    onTouchStart: handleTouchStart,\n    onTouchMove: handleTouchMove,\n    onTouchEnd: handleTouchEnd,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sound-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: sound.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1895,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sound-tags\",\n        children: sound.tags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"sound-tag\",\n          children: tag\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1898,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1896,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1894,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sound-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"play-sound-btn\",\n        onClick: playSound,\n        disabled: isPlaying,\n        children: isPlaying ? '⏸️' : '▶️'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1903,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1902,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1886,\n    columnNumber: 5\n  }, this);\n};\n_s2(SoundItem, \"RkxO1xburwD1wlHDqN3nCO+JHik=\");\n_c2 = SoundItem;\nconst TrackHeader = ({\n  track,\n  onRemove,\n  trackHeight,\n  trackIndex\n}) => {\n  // トラック名を表示番号と元の名前で構成\n  const displayName = `トラック ${trackIndex + 1}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"track-header\",\n    style: {\n      height: trackHeight\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"track-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: displayName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1922,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"track-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"remove-track-btn\",\n          onClick: () => onRemove(track.id),\n          title: `${displayName}を削除`,\n          \"aria-label\": `${displayName}を削除`,\n          children: \"\\uD83D\\uDDD1\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1924,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1923,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1921,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1920,\n    columnNumber: 5\n  }, this);\n};\n_c3 = TrackHeader;\nconst Timeline = ({\n  bpm,\n  isTimeMode,\n  secondsPerBeat\n}) => {\n  if (isTimeMode) {\n    // 秒数モード: 秒単位で表示\n    const totalSeconds = TIME_MODE_TOTAL_SECONDS;\n    const secondWidth = PIXELS_PER_SECOND;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeline\",\n      style: {\n        minWidth: totalSeconds * secondWidth\n      },\n      children: Array.from({\n        length: totalSeconds / 5\n      }, (_, intervalIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time-interval\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time-number\",\n          children: [intervalIndex * 5, \"\\u79D2\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1948,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time-marks\",\n          children: Array.from({\n            length: 5\n          }, (_, secondIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-mark\",\n            style: {\n              width: secondWidth\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"time-main\",\n              children: intervalIndex * 5 + secondIndex\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1956,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"time-sub\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sub-time-marker\",\n                children: \"\\u30FB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1960,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1959,\n              columnNumber: 19\n            }, this)]\n          }, secondIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1951,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1949,\n          columnNumber: 13\n        }, this)]\n      }, intervalIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1947,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1945,\n      columnNumber: 7\n    }, this);\n  } else {\n    // 拍子モード: 従来の小節・拍表示\n    const measures = TOTAL_MEASURES; // 16小節表示\n    const beatsPerMeasure = BEATS_PER_MEASURE; // 4/4拍子\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeline\",\n      style: {\n        minWidth: TOTAL_MEASURES * MEASURE_WIDTH\n      },\n      children: Array.from({\n        length: measures\n      }, (_, measureIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"measure\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"measure-number\",\n          children: measureIndex + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1978,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"beats\",\n          children: Array.from({\n            length: beatsPerMeasure\n          }, (_, beatIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"beat\",\n            style: {\n              width: BEAT_WIDTH\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"beat-main\",\n              children: beatIndex + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1986,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"beat-sub\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sub-beat-marker\",\n                children: \"\\u30FB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1990,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1989,\n              columnNumber: 19\n            }, this)]\n          }, beatIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1981,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1979,\n          columnNumber: 13\n        }, this)]\n      }, measureIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1977,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1975,\n      columnNumber: 7\n    }, this);\n  }\n};\n_c4 = Timeline;\nconst Track = ({\n  track,\n  onDrop,\n  onDragOver,\n  onRemoveClip,\n  onClipDragStart,\n  onDragEnd,\n  trackHeight,\n  updateDragPreview,\n  isTimeMode,\n  secondsPerBeat\n}) => {\n  _s3();\n  const handleDrop = e => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const timePosition = e.clientX - rect.left;\n    onDrop(e, track.id, timePosition);\n  };\n\n  // モバイルドロップイベントの処理\n  const handleMobileDrop = useCallback(e => {\n    const {\n      trackId,\n      timePosition,\n      sound\n    } = e.detail;\n\n    // 模擬的なドロップイベントを作成\n    const mockDropEvent = {\n      preventDefault: () => {},\n      dataTransfer: {\n        getData: type => {\n          if (type === 'application/json') {\n            return JSON.stringify(sound);\n          }\n          return '';\n        }\n      }\n    };\n    onDrop(mockDropEvent, trackId, timePosition);\n  }, [onDrop]);\n\n  // モバイルクリップ移動イベントの処理\n  const handleMobileClipMove = useCallback(e => {\n    const {\n      clip,\n      newTrackId,\n      timePosition\n    } = e.detail;\n\n    // 模擬的なドロップイベントを作成\n    const mockDropEvent = {\n      preventDefault: () => {},\n      dataTransfer: {\n        getData: type => {\n          if (type === 'text/plain') {\n            return `existing-clip-${clip.id}`;\n          }\n          return '';\n        }\n      }\n    };\n    onDrop(mockDropEvent, newTrackId, timePosition);\n  }, [onDrop]);\n  const handleUpdateDragPreview = useCallback(e => {\n    const {\n      clientX,\n      trackElement\n    } = e.detail;\n    // 親コンポーネントのupdateDragPreview関数を呼び出し\n    if (typeof updateDragPreview === 'function') {\n      updateDragPreview(clientX, trackElement);\n    }\n  }, [updateDragPreview]);\n  React.useEffect(() => {\n    const trackElement = document.querySelector(`[data-track-id=\"${track.id}\"]`);\n    if (trackElement) {\n      trackElement.addEventListener('mobileDrop', handleMobileDrop);\n      trackElement.addEventListener('mobileClipMove', handleMobileClipMove);\n      trackElement.addEventListener('updateDragPreview', handleUpdateDragPreview);\n      return () => {\n        trackElement.removeEventListener('mobileDrop', handleMobileDrop);\n        trackElement.removeEventListener('mobileClipMove', handleMobileClipMove);\n        trackElement.removeEventListener('updateDragPreview', handleUpdateDragPreview);\n      };\n    }\n  }, [track.id, handleMobileDrop, handleMobileClipMove, handleUpdateDragPreview]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"track\",\n    style: {\n      height: trackHeight\n    },\n    \"data-track-id\": track.id,\n    onDrop: handleDrop,\n    onDragOver: onDragOver,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"track-grid\",\n      children: isTimeMode ?\n      /*#__PURE__*/\n      // 秒数モード: 秒単位でグリッド線を表示\n      _jsxDEV(_Fragment, {\n        children: [Array.from({\n          length: TIME_MODE_TOTAL_SECONDS\n        }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `beat-line beat-line-main ${index === 0 ? 'first-beat' : ''} ${index % 5 === 0 ? 'measure-start' : ''}`,\n          style: {\n            left: index * PIXELS_PER_SECOND\n          }\n        }, `time-main-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2085,\n          columnNumber: 15\n        }, this)), Array.from({\n          length: TIME_MODE_TOTAL_SECONDS * 2\n        }, (_, index) => {\n          if (index % 2 === 1) {\n            // 奇数のインデックス（0.5秒、1.5秒など）\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"beat-line beat-line-sub\",\n              style: {\n                left: index * PIXELS_PER_SECOND / 2\n              }\n            }, `time-sub-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2095,\n              columnNumber: 19\n            }, this);\n          }\n          return null;\n        })]\n      }, void 0, true) :\n      /*#__PURE__*/\n      // 拍子モード: 従来の拍・小節グリッド\n      _jsxDEV(_Fragment, {\n        children: [Array.from({\n          length: TOTAL_BEATS\n        }, (_, index) => {\n          const isFirstBeat = index === 0;\n          const isMeasureStart = index % BEATS_PER_MEASURE === 0;\n          const className = `beat-line beat-line-main ${isFirstBeat ? 'first-beat' : ''} ${isMeasureStart ? 'measure-start' : ''}`;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: className,\n            style: {\n              left: index * BEAT_WIDTH\n            }\n          }, `main-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2114,\n            columnNumber: 17\n          }, this);\n        }), Array.from({\n          length: TOTAL_BEATS\n        }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"beat-line beat-line-sub\",\n          style: {\n            left: index * BEAT_WIDTH + SUB_BEAT_WIDTH\n          }\n        }, `sub-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2119,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2079,\n      columnNumber: 7\n    }, this), track.clips.map(clip => /*#__PURE__*/_jsxDEV(AudioClip, {\n      clip: clip,\n      trackId: track.id,\n      onRemove: () => onRemoveClip(track.id, clip.id),\n      onDragStart: onClipDragStart,\n      onDragEnd: onDragEnd\n    }, clip.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2126,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2072,\n    columnNumber: 5\n  }, this);\n};\n_s3(Track, \"0FaauKG5na1Hr/QQyJUJBzUbaJk=\");\n_c5 = Track;\nconst AudioClip = ({\n  clip,\n  trackId,\n  onRemove,\n  onDragStart,\n  onDragEnd\n}) => {\n  _s4();\n  var _clip$soundData6;\n  const [waveformData, setWaveformData] = React.useState([]);\n  const [isDragging, setIsDragging] = React.useState(false);\n  const [touchStart, setTouchStart] = React.useState(null);\n  const [touchMove, setTouchMove] = React.useState(null);\n  React.useEffect(() => {\n    // clip.soundData が存在する場合のみ波形データを生成\n    if (clip && clip.soundData) {\n      // 簡単な波形データ生成（実際の実装では音声解析が必要）\n      const generateWaveform = () => {\n        const points = 20; // 波形のポイント数\n        const data = [];\n        for (let i = 0; i < points; i++) {\n          data.push(Math.random() * 0.8 + 0.2); // 0.2-1.0の間のランダム値\n        }\n        setWaveformData(data);\n      };\n      generateWaveform();\n    }\n  }, [clip, clip === null || clip === void 0 ? void 0 : clip.soundData]);\n\n  // clip.soundData の安全性をチェック（Hooksの後で）\n  if (!clip || !clip.soundData) {\n    console.warn('無効なクリップデータ:', clip);\n    return null; // 無効なクリップは表示しない\n  }\n  const handleDragStart = e => {\n    e.stopPropagation(); // イベントバブリングを防ぐ\n\n    // ドラッグデータに既存クリップの情報を設定\n    e.dataTransfer.setData('text/plain', `existing-clip-${clip.id}`);\n    e.dataTransfer.effectAllowed = 'move';\n\n    // onDragStartコールバックを呼び出し（マウス位置とクリップ要素を渡す）\n    onDragStart(clip, trackId, e.clientX, e.currentTarget);\n  };\n  const handleDragEnd = e => {\n    // ドラッグ終了時にクリーンアップを呼び出し\n    if (onDragEnd) {\n      onDragEnd(e);\n    }\n  };\n\n  // タッチイベント対応（クリップの移動）\n  const handleTouchStart = e => {\n    e.stopPropagation();\n    const touch = e.touches[0];\n    setTouchStart({\n      x: touch.clientX,\n      y: touch.clientY\n    });\n    setIsDragging(false);\n\n    // ドラッグモードは移動が確定してから有効化\n  };\n  const handleTouchMove = e => {\n    if (!touchStart) return;\n    const touch = e.touches[0];\n    const currentPos = {\n      x: touch.clientX,\n      y: touch.clientY\n    };\n    setTouchMove(currentPos);\n\n    // ドラッグ開始の判定（10px以上移動）\n    const deltaX = Math.abs(currentPos.x - touchStart.x);\n    const deltaY = Math.abs(currentPos.y - touchStart.y);\n    if (!isDragging && (deltaX > 10 || deltaY > 10)) {\n      setIsDragging(true);\n      // スクロールを一時的に無効化（移動が確定してから）\n      document.body.classList.add('dragging');\n      onDragStart(clip, trackId, touchStart.x, e.currentTarget);\n    }\n    if (isDragging) {\n      // passiveイベントではpreventDefaultが使えないので、touchActionで制御\n\n      // ドロップターゲットのハイライト\n      const elementBelow = document.elementFromPoint(currentPos.x, currentPos.y);\n      const trackElement = elementBelow === null || elementBelow === void 0 ? void 0 : elementBelow.closest('.track');\n\n      // 既存のハイライトを削除\n      document.querySelectorAll('.track').forEach(track => {\n        track.classList.remove('drag-over');\n      });\n\n      // 新しいハイライトを追加（自分のトラック以外も含む）\n      if (trackElement) {\n        trackElement.classList.add('drag-over');\n\n        // ドラッグプレビューも更新（onDragStart時と同様のロジック）\n        if (onDragStart) {\n          // 親コンポーネントのupdateDragPreview関数を呼び出すためのカスタムイベント\n          const dragPreviewEvent = new CustomEvent('updateDragPreview', {\n            detail: {\n              clientX: currentPos.x,\n              trackElement: trackElement\n            }\n          });\n          trackElement.dispatchEvent(dragPreviewEvent);\n        }\n      }\n    }\n  };\n  const handleTouchEnd = e => {\n    if (isDragging && touchMove) {\n      // ドロップ処理\n      const elementBelow = document.elementFromPoint(touchMove.x, touchMove.y);\n      const trackElement = elementBelow === null || elementBelow === void 0 ? void 0 : elementBelow.closest('.track');\n      if (trackElement) {\n        const newTrackId = parseInt(trackElement.dataset.trackId);\n        const rect = trackElement.getBoundingClientRect();\n        const timePosition = touchMove.x - rect.left;\n\n        // 既存クリップの移動イベントを発火\n        const moveEvent = new CustomEvent('mobileClipMove', {\n          detail: {\n            clip,\n            originalTrackId: trackId,\n            newTrackId,\n            timePosition\n          }\n        });\n        trackElement.dispatchEvent(moveEvent);\n      }\n    }\n\n    // クリーンアップ\n    setTouchStart(null);\n    setTouchMove(null);\n    setIsDragging(false);\n    document.body.classList.remove('dragging');\n\n    // ハイライトを削除\n    document.querySelectorAll('.track').forEach(track => {\n      track.classList.remove('drag-over');\n    });\n\n    // ドラッグプレビューをクリア（親コンポーネントの状態もリセット）\n    if (onDragEnd) {\n      onDragEnd(null); // nullを渡してガード条件を満たす\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `audio-clip ${isDragging ? 'dragging' : ''}`,\n    draggable: \"true\",\n    onDragStart: handleDragStart,\n    onDragEnd: handleDragEnd,\n    onTouchStart: handleTouchStart,\n    onTouchMove: handleTouchMove,\n    onTouchEnd: handleTouchEnd,\n    style: {\n      left: clip.startTime,\n      width: isFinite(clip.duration) && clip.duration > 0 ? clip.duration : 400 // デフォルト1小節\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clip-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"clip-name\",\n        children: ((_clip$soundData6 = clip.soundData) === null || _clip$soundData6 === void 0 ? void 0 : _clip$soundData6.name) || '不明な音素材'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"remove-clip-btn\",\n        onClick: onRemove,\n        title: \"\\u30AF\\u30EA\\u30C3\\u30D7\\u3092\\u524A\\u9664\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clip-waveform\",\n      children: waveformData.length > 0 ? /*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"waveform-svg\",\n        width: \"100%\",\n        height: \"30\",\n        children: waveformData.map((height, index) => /*#__PURE__*/_jsxDEV(\"rect\", {\n          x: `${index / waveformData.length * 100}%`,\n          y: `${(1 - height) * 15}`,\n          width: `${80 / waveformData.length}%`,\n          height: `${height * 30}`,\n          fill: \"rgba(255, 255, 255, 0.8)\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2314,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2312,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"waveform-placeholder\",\n        children: \"\\uD83D\\uDD0A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2325,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2310,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2287,\n    columnNumber: 5\n  }, this);\n};\n_s4(AudioClip, \"NeAysvgdzDwGIytG3p5NplFZv3M=\");\n_c6 = AudioClip;\nconst Playhead = ({\n  currentTime\n}) => {\n  // currentTimeが有効な数値かチェック\n  const safeCurrentTime = isFinite(currentTime) && currentTime >= 0 ? currentTime : 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playhead\",\n    style: {\n      left: safeCurrentTime\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 2337,\n    columnNumber: 5\n  }, this);\n};\n_c7 = Playhead;\nexport default DAWPage;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"DAWPage\");\n$RefreshReg$(_c2, \"SoundItem\");\n$RefreshReg$(_c3, \"TrackHeader\");\n$RefreshReg$(_c4, \"Timeline\");\n$RefreshReg$(_c5, \"Track\");\n$RefreshReg$(_c6, \"AudioClip\");\n$RefreshReg$(_c7, \"Playhead\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","jsxDEV","_jsxDEV","Fragment","_Fragment","BEAT_WIDTH","BEATS_PER_MEASURE","MEASURE_WIDTH","SUB_BEAT_WIDTH","TOTAL_MEASURES","TOTAL_BEATS","TIME_MODE_TOTAL_SECONDS","PIXELS_PER_SECOND","DAWPage","_s","trackIdCounterRef","trackNameCounterRef","loadAutoSavedProject","autoSavedData","localStorage","getItem","projectData","JSON","parse","trackNameCounter","current","trackIdCounter","validTracks","tracks","map","track","clips","filter","clip","soundData","name","console","warn","length","id","Date","now","bpm","isTimeMode","secondsPerBeat","error","initialData","setTracks","setBpm","isPlaying","setIsPlaying","currentTime","setCurrentTime","audioContext","setAudioContext","trackHeight","playingAudios","setPlayingAudios","Map","startPlayTime","setStartPlayTime","setError","sounds","setSounds","showSoundPanel","setShowSoundPanel","draggedClip","setDraggedClip","dragPreview","setDragPreview","draggedSoundDuration","setDraggedSoundDuration","dragOffset","setDragOffset","setIsTimeMode","setSecondsPerBeat","isExporting","setIsExporting","timelineRef","animationFrameRef","dragOverTimeoutRef","ctx","window","AudioContext","webkitAudioContext","savedSounds","soundsWithBlob","sound","audioData","includes","base64Data","split","byteCharacters","atob","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","blob","Blob","type","size","audioBlob","validSounds","validSoundsForStorage","undefined","setItem","stringify","state","close","catch","cancelAnimationFrame","clearTimeout","currentPlayingAudios","forEach","audio","timeoutId","audioUrl","pause","src","URL","revokeObjectURL","currentDraggedSoundBlob","currentDraggedSound","getAudioDuration","currentBpm","Promise","resolve","arrayBuffer","audioBuffer","decodeAudioData","durationInSeconds","duration","isFinite","pixelsPerSecond","widthInPixels","toggleTimeMode","newTimeMode","updatedTracks","all","updatedClips","newDuration","handleSecondsPerBeatChange","newSecondsPerBeat","getSnapPosition","position","beatWidthInPixels","subBeatWidth","Math","round","updatePlayhead","animate","elapsed","newCurrentTime","requestAnimationFrame","timeInSeconds","handleBpmChange","newBpm","saveProject","version","timestamp","projectJson","url","createObjectURL","link","document","createElement","href","download","toISOString","slice","replace","body","appendChild","click","removeChild","loadProject","event","file","target","files","reader","FileReader","onload","e","result","Error","restoreAudioBlob","restoredTracks","restoredSounds","prevSounds","maxId","max","s","existingNames","Set","newSounds","index","newName","counter","has","add","setTimeout","autoSaveData","readAsText","value","exportAudio","maxDuration","clipStartTimeInSeconds","startTime","clipDurationInSeconds","clipEndTime","exportContext","sampleRate","bufferLength","ceil","outputBuffer","createBuffer","leftChannel","getChannelData","rightChannel","startTimeInSamples","floor","channel","min","numberOfChannels","sourceData","targetData","wavBlob","audioBufferToWav","buffer","bytesPerSample","blockAlign","byteRate","dataSize","bufferSize","ArrayBuffer","view","DataView","writeString","offset","string","setUint8","setUint32","setUint16","sample","intSample","setInt16","addTrack","uniqueId","trackName","newTrack","prevTracks","removeTrack","trackId","handleDrop","timePosition","preventDefault","adjustedPosition","snappedPosition","updatedClip","originalTrackId","jsonData","dataTransfer","getData","newClip","random","handleDragOver","dropEffect","clientX","currentTarget","updateDragPreview","trackElement","dragCleanupTimer","cleanupDragState","rect","getBoundingClientRect","left","trackRect","tracksAreaRect","dataset","relativeTop","top","parseInt","isNaN","previewWidth","width","removeClip","clipId","handleClipDragStart","mouseX","clipElement","clipRect","offsetInClip","querySelectorAll","classList","remove","mobileDragPreview","querySelector","cleanupDragStateCallback","handleGlobalDragEnd","handleGlobalDragLeave","relatedTarget","nodeName","addEventListener","removeEventListener","handleDragEnd","play","resume","currentTimeInSeconds","newPlayingAudios","clipEndTimeInSeconds","delay","scheduleClipPlayback","delayMs","playingAudiosMap","Audio","set","_clip$soundData","_clip$soundData2","_clip$soundData3","_clip$soundData4","_clip$soundData5","soundDataName","hasAudioData","hasAudioBlob","audioBlobType","isInstanceOfBlob","restoreError","paused","stop","autoSaveProject","handleVisibilityChange","hidden","clearAutoSave","removeItem","alert","cleanupInvalidClips","cleanedTracks","removedCount","reduce","total","timer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","htmlFor","onChange","disabled","title","parseFloat","step","accept","style","display","confirm","SoundItem","onDragStart","TrackHeader","trackIndex","onRemove","Timeline","ref","minWidth","Playhead","Track","onDrop","onDragOver","onRemoveClip","onClipDragStart","onDragEnd","_c","_s2","isDragging","setIsDragging","touchStart","setTouchStart","touchMove","setTouchMove","handleDragStart","soundDataForTransfer","setData","effectAllowed","handleTouchStart","touch","touches","x","y","clientY","handleTouchMove","currentPos","deltaX","abs","deltaY","elementBelow","elementFromPoint","closest","handleTouchEnd","dropEvent","CustomEvent","detail","dispatchEvent","playSound","_sound$audioBlob","isBlob","then","handleEnded","createDragPreview","textContent","cssText","draggable","onTouchStart","onTouchMove","onTouchEnd","tags","tag","_c2","displayName","height","_c3","totalSeconds","secondWidth","from","_","intervalIndex","secondIndex","measures","beatsPerMeasure","measureIndex","beatIndex","_c4","_s3","handleMobileDrop","mockDropEvent","handleMobileClipMove","newTrackId","handleUpdateDragPreview","isFirstBeat","isMeasureStart","AudioClip","_c5","_s4","_clip$soundData6","waveformData","setWaveformData","generateWaveform","points","data","push","stopPropagation","dragPreviewEvent","moveEvent","fill","_c6","safeCurrentTime","_c7","$RefreshReg$"],"sources":["/Users/nakataniyuutomo/Desktop/Programing/ゼミ開発/sound-library2/src/pages/DAWPage.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './DAWPage.css';\n\n// DAWの定数\nconst BEAT_WIDTH = 100; // 1拍の幅（px）\nconst BEATS_PER_MEASURE = 4; // 1小節あたりの拍数\nconst MEASURE_WIDTH = BEAT_WIDTH * BEATS_PER_MEASURE; // 1小節の幅（400px）\nconst SUB_BEAT_WIDTH = BEAT_WIDTH / 2; // 8分音符の幅（50px）\nconst TOTAL_MEASURES = 16; // 表示する小節数\nconst TOTAL_BEATS = TOTAL_MEASURES * BEATS_PER_MEASURE; // 総拍数\n\n// 時間モードの定数\nconst TIME_MODE_TOTAL_SECONDS = 60; // 表示する総秒数\nconst PIXELS_PER_SECOND = 100; // 1秒あたりのピクセル数\n\nconst DAWPage = () => {\n  // ユニークID生成用のカウンター\n  const trackIdCounterRef = useRef(1);\n  // トラック名の番号管理用カウンター\n  const trackNameCounterRef = useRef(1);\n  \n  // LocalStorageからの自動復元機能\n  const loadAutoSavedProject = () => {\n    try {\n      const autoSavedData = localStorage.getItem('dawProjectAutoSave');\n      if (autoSavedData) {\n        const projectData = JSON.parse(autoSavedData);\n        \n        // トラックカウンターの復元\n        if (projectData.trackNameCounter) {\n          trackNameCounterRef.current = projectData.trackNameCounter;\n        }\n        if (projectData.trackIdCounter) {\n          trackIdCounterRef.current = projectData.trackIdCounter;\n        }\n        \n        // 無効なクリップをフィルタリング\n        const validTracks = (projectData.tracks || []).map(track => ({\n          ...track,\n          clips: (track.clips || []).filter(clip => {\n            if (!clip.soundData || !clip.soundData.name) {\n              console.warn('自動保存データから無効なクリップを除外:', clip);\n              return false;\n            }\n            return true;\n          })\n        }));\n        \n        return {\n          tracks: validTracks.length > 0 ? validTracks : [{ \n            id: Date.now(), \n            name: 'トラック 1', \n            clips: [] \n          }],\n          bpm: projectData.bpm || 120,\n          isTimeMode: projectData.isTimeMode || false,\n          secondsPerBeat: projectData.secondsPerBeat || 0.5\n        };\n      }\n    } catch (error) {\n      console.error('自動保存データの復元に失敗:', error);\n    }\n    \n    return {\n      tracks: [{ \n        id: Date.now(), \n        name: 'トラック 1', \n        clips: [] \n      }],\n      bpm: 120\n    };\n  };\n\n  const initialData = loadAutoSavedProject();\n  const [tracks, setTracks] = useState(initialData.tracks);\n  const [bpm, setBpm] = useState(initialData.bpm);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [audioContext, setAudioContext] = useState(null);\n  const [trackHeight] = useState(80);\n  const [playingAudios, setPlayingAudios] = useState(new Map());\n  const [startPlayTime, setStartPlayTime] = useState(null);\n  const [error, setError] = useState(null);\n  const [sounds, setSounds] = useState([]);\n  const [showSoundPanel, setShowSoundPanel] = useState(true);\n  const [draggedClip, setDraggedClip] = useState(null);\n  const [dragPreview, setDragPreview] = useState(null);\n  const [draggedSoundDuration, setDraggedSoundDuration] = useState(400); // ドラッグ中の音素材の長さ\n  const [dragOffset, setDragOffset] = useState(0); // ドラッグ開始時のクリップ内オフセット\n  \n  // 時間モード関連の状態\n  const [isTimeMode, setIsTimeMode] = useState(false); // false: 拍子モード, true: 秒数モード\n  const [secondsPerBeat, setSecondsPerBeat] = useState(0.5); // 秒数モード時の1拍あたりの秒数\n  const [isExporting, setIsExporting] = useState(false); // 音源出力中フラグ\n  const timelineRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const dragOverTimeoutRef = useRef(null);\n\n  useEffect(() => {\n    // Web Audio API の初期化\n    const ctx = new (window.AudioContext || window.webkitAudioContext)();\n    setAudioContext(ctx);\n    \n    // LocalStorageから音素材を読み込み\n    const savedSounds = JSON.parse(localStorage.getItem('soundRecordings') || '[]');\n    \n    // audioDataからBlobを復元\n    const soundsWithBlob = savedSounds.map(sound => {\n      if (sound.audioData) {\n        try {\n          // Base64データの検証\n          if (!sound.audioData.includes(',')) {\n            console.error('無効なBase64フォーマット:', sound.name);\n            return sound;\n          }\n          \n          const base64Data = sound.audioData.split(',')[1];\n          if (!base64Data || base64Data.length === 0) {\n            console.error('Base64データが空です:', sound.name);\n            return sound;\n          }\n          \n          const byteCharacters = atob(base64Data);\n          const byteNumbers = new Array(byteCharacters.length);\n          for (let i = 0; i < byteCharacters.length; i++) {\n            byteNumbers[i] = byteCharacters.charCodeAt(i);\n          }\n          const byteArray = new Uint8Array(byteNumbers);\n          \n          // Blobサイズの検証\n          if (byteArray.length === 0) {\n            console.error('Blobデータが空です:', sound.name);\n            return sound;\n          }\n          \n          const blob = new Blob([byteArray], { type: 'audio/wav' });\n          \n          // Blobの有効性を確認\n          if (blob.size === 0) {\n            console.error('作成されたBlobのサイズが0です:', sound.name);\n            return sound;\n          }\n          \n          return { ...sound, audioBlob: blob };\n        } catch (error) {\n          console.error('音声データの復元に失敗:', sound.name, error);\n          return sound;\n        }\n      }\n      return sound;\n    });\n    \n    // 有効な音素材のみをフィルタリング\n    const validSounds = soundsWithBlob.filter(sound => {\n      if (!sound.audioBlob) {\n        console.warn('audioBlobが存在しない音素材をスキップ:', sound.name);\n        return false;\n      }\n      if (!(sound.audioBlob instanceof Blob)) {\n        console.warn('無効なBlob形式の音素材をスキップ:', sound.name);\n        return false;\n      }\n      if (sound.audioBlob.size === 0) {\n        console.warn('サイズが0のBlob音素材をスキップ:', sound.name);\n        return false;\n      }\n      return true;\n    });\n    \n    setSounds(validSounds);\n    \n    // 無効な音素材があった場合はLocalStorageを更新\n    if (validSounds.length !== soundsWithBlob.length) {\n      const validSoundsForStorage = validSounds.map(sound => ({\n        ...sound,\n        audioBlob: undefined // Blobは保存しない\n      }));\n      localStorage.setItem('soundRecordings', JSON.stringify(validSoundsForStorage));\n    }\n    \n    return () => {\n      if (ctx && ctx.state !== 'closed') {\n        ctx.close().catch(error => {\n          console.warn('初期AudioContext のクローズに失敗:', error);\n        });\n      }\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (dragOverTimeoutRef.current) {\n        clearTimeout(dragOverTimeoutRef.current);\n      }\n      // 再生中の音声をすべて停止・クリーンアップ\n      // useEffect内でplayingAudiosの最新値を取得\n      setPlayingAudios(currentPlayingAudios => {\n        currentPlayingAudios.forEach(({ audio, timeoutId, audioUrl }) => {\n          if (timeoutId) {\n            clearTimeout(timeoutId);\n          }\n          if (audio) {\n            audio.pause();\n            audio.src = '';\n          }\n          if (audioUrl) {\n            URL.revokeObjectURL(audioUrl);\n          }\n        });\n        return new Map(); // 空のMapを返す\n      });\n      // グローバル変数をクリーンアップ\n      if (window.currentDraggedSoundBlob) {\n        window.currentDraggedSoundBlob = null;\n      }\n      if (window.currentDraggedSound) {\n        window.currentDraggedSound = null;\n      }\n    };\n  }, []);\n\n  // 音声ファイルの継続時間を取得してピクセル幅に変換\n  const getAudioDuration = useCallback((audioBlob, currentBpm = bpm) => {\n    return new Promise(async (resolve) => {\n      if (!audioBlob || !(audioBlob instanceof Blob)) {\n        resolve(400);\n        return;\n      }\n\n\n      // AudioContextを使用した方法を優先\n      if (audioContext) {\n        try {\n          const arrayBuffer = await audioBlob.arrayBuffer();\n          const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n          const durationInSeconds = audioBuffer.duration;\n          \n          \n          if (isFinite(durationInSeconds) && durationInSeconds > 0) {\n            let pixelsPerSecond;\n            if (isTimeMode) {\n              // 秒数モード：直接1秒 = PIXELS_PER_SECONDピクセル\n              pixelsPerSecond = PIXELS_PER_SECOND;\n            } else {\n              // 拍子モード：BPMベース\n              pixelsPerSecond = (currentBpm / 60) * 100;\n            }\n            const widthInPixels = durationInSeconds * pixelsPerSecond;\n            resolve(widthInPixels);\n            return;\n          }\n        } catch (error) {\n          console.error('AudioContext方式でエラー:', error);\n        }\n      }\n      resolve(400);\n    });\n  }, [audioContext, bpm, isTimeMode]);\n\n  // 時間モードとBPMモードを切り替える関数\n  const toggleTimeMode = useCallback(async () => {\n    const newTimeMode = !isTimeMode;\n    setIsTimeMode(newTimeMode);\n    \n    // 既存のクリップのdurationを新しいモードで再計算\n    const updatedTracks = await Promise.all(\n      tracks.map(async (track) => {\n        const updatedClips = await Promise.all(\n          track.clips.map(async (clip) => {\n            if (clip.soundData && clip.soundData.audioBlob) {\n              try {\n                const arrayBuffer = await clip.soundData.audioBlob.arrayBuffer();\n                const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n                const durationInSeconds = audioBuffer.duration;\n                \n                let pixelsPerSecond;\n                if (newTimeMode) {\n                  pixelsPerSecond = PIXELS_PER_SECOND;\n                } else {\n                  pixelsPerSecond = (bpm / 60) * 100;\n                }\n                const newDuration = durationInSeconds * pixelsPerSecond;\n                \n                return { ...clip, duration: newDuration };\n              } catch (error) {\n                console.warn('クリップのduration再計算に失敗:', error);\n                return clip;\n              }\n            }\n            return clip;\n          })\n        );\n        return { ...track, clips: updatedClips };\n      })\n    );\n    \n    setTracks(updatedTracks);\n  }, [isTimeMode, tracks, audioContext, bpm]);\n\n  // 秒数モードでの1拍あたりの秒数を変更する関数\n  const handleSecondsPerBeatChange = useCallback((newSecondsPerBeat) => {\n    setSecondsPerBeat(newSecondsPerBeat);\n  }, []);\n\n  // スナップ処理（拍子モード vs 秒数モード）\n  const getSnapPosition = useCallback((position) => {\n    if (isTimeMode) {\n      // 秒数モード：1拍（秒数）単位でスナップ\n      const beatWidthInPixels = secondsPerBeat * PIXELS_PER_SECOND;\n      const subBeatWidth = beatWidthInPixels / 2; // 半拍でスナップ\n      return Math.round(position / subBeatWidth) * subBeatWidth;\n    } else {\n      // 拍子モード：8分音符単位でスナップ\n      return Math.round(position / SUB_BEAT_WIDTH) * SUB_BEAT_WIDTH;\n    }\n  }, [isTimeMode, secondsPerBeat]);\n\n  // プレイヘッドのアニメーション更新\n  const updatePlayhead = useCallback(() => {\n    const animate = () => {\n      if (isPlaying && startPlayTime) {\n        const elapsed = (Date.now() - startPlayTime) / 1000; // 経過時間（秒）\n        \n        let pixelsPerSecond;\n        if (isTimeMode) {\n          // 秒数モード：直接1秒 = PIXELS_PER_SECONDピクセル\n          pixelsPerSecond = PIXELS_PER_SECOND;\n        } else {\n          // 拍子モード：BPMに基づいたピクセル/秒\n          pixelsPerSecond = (bpm / 60) * 100;\n        }\n        \n        const newCurrentTime = elapsed * pixelsPerSecond;\n        \n        // 有効な数値かチェック\n        if (isFinite(newCurrentTime) && newCurrentTime >= 0) {\n          setCurrentTime(newCurrentTime);\n        } else {\n          console.warn('無効なcurrentTime:', newCurrentTime, 'elapsed:', elapsed, 'pixelsPerSecond:', pixelsPerSecond);\n        }\n        \n        // 次のフレームを要求\n        animationFrameRef.current = requestAnimationFrame(animate);\n      }\n    };\n    \n    if (isPlaying && startPlayTime) {\n      animate();\n    }\n  }, [isPlaying, startPlayTime, bpm, isTimeMode]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (!startPlayTime) {\n        // 再生開始時にstartPlayTimeを設定\n        let pixelsPerSecond;\n        if (isTimeMode) {\n          pixelsPerSecond = PIXELS_PER_SECOND;\n        } else {\n          pixelsPerSecond = (bpm / 60) * 100;\n        }\n        \n        if (isFinite(pixelsPerSecond) && pixelsPerSecond > 0) {\n          const timeInSeconds = currentTime / pixelsPerSecond;\n          if (isFinite(timeInSeconds) && timeInSeconds >= 0) {\n            setStartPlayTime(Date.now() - (timeInSeconds * 1000));\n          } else {\n            setStartPlayTime(Date.now());\n          }\n        } else {\n          setStartPlayTime(Date.now());\n        }\n      }\n    } else {\n      // 再生停止時にアニメーションをクリア\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n        animationFrameRef.current = null;\n      }\n      setStartPlayTime(null);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPlaying, bpm, currentTime, isTimeMode]);\n\n  // startPlayTimeが設定されたときにアニメーションを開始\n  useEffect(() => {\n    if (isPlaying && startPlayTime) {\n      updatePlayhead();\n    }\n  }, [isPlaying, startPlayTime, updatePlayhead]);\n\n  // BPM変更時のハンドラー\n  const handleBpmChange = useCallback(async (newBpm) => {\n    setBpm(newBpm);\n    \n    // 既存のクリップのdurationを新しいBPMで再計算\n    const updatedTracks = await Promise.all(\n      tracks.map(async (track) => {\n        const updatedClips = await Promise.all(\n          track.clips.map(async (clip) => {\n            if (clip.soundData && clip.soundData.audioBlob) {\n              try {\n                const newDuration = await getAudioDuration(clip.soundData.audioBlob, newBpm);\n                return { ...clip, duration: newDuration };\n              } catch (error) {\n                console.warn('クリップのduration更新に失敗:', error);\n                return clip;\n              }\n            }\n            return clip;\n          })\n        );\n        return { ...track, clips: updatedClips };\n      })\n    );\n    \n    setTracks(updatedTracks);\n  }, [tracks, getAudioDuration]);\n\n  // プロジェクト保存機能\n  const saveProject = () => {\n    try {\n      const projectData = {\n        version: '1.0',\n        bpm: bpm,\n        tracks: tracks,\n        sounds: sounds.map(sound => ({\n          ...sound,\n          audioBlob: null, // Blobは別途保存\n          audioData: sound.audioData // base64データを保持\n        })),\n        timestamp: Date.now(),\n        trackNameCounter: trackNameCounterRef.current,\n        trackIdCounter: trackIdCounterRef.current\n      };\n\n      const projectJson = JSON.stringify(projectData, null, 2);\n      const blob = new Blob([projectJson], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      \n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `music-project-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      \n    } catch (error) {\n      console.error('プロジェクト保存エラー:', error);\n      setError('プロジェクトの保存に失敗しました。');\n    }\n  };\n\n  // プロジェクト読み込み機能\n  const loadProject = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const projectData = JSON.parse(e.target.result);\n        \n        // バージョンチェック\n        if (!projectData.version) {\n          throw new Error('不正なプロジェクトファイルです');\n        }\n\n        // 音声データ復元用のヘルパー関数\n        const restoreAudioBlob = (soundData) => {\n          if (soundData && soundData.audioData) {\n            try {\n              const byteCharacters = atob(soundData.audioData.split(',')[1]);\n              const byteNumbers = new Array(byteCharacters.length);\n              for (let i = 0; i < byteCharacters.length; i++) {\n                byteNumbers[i] = byteCharacters.charCodeAt(i);\n              }\n              const byteArray = new Uint8Array(byteNumbers);\n              const blob = new Blob([byteArray], { type: 'audio/wav' });\n              return { ...soundData, audioBlob: blob };\n            } catch (error) {\n              console.error('音声データの復元に失敗:', soundData.name || 'unknown', error);\n              return soundData;\n            }\n          }\n          return soundData;\n        };\n\n        // BPMを復元\n        setBpm(projectData.bpm || 120);\n        \n        // トラックを復元（クリップ内の音声データも復元）\n        if (projectData.tracks) {\n          const restoredTracks = projectData.tracks.map(track => ({\n            ...track,\n            clips: track.clips\n              .map(clip => ({\n                ...clip,\n                soundData: restoreAudioBlob(clip.soundData)\n              }))\n              .filter(clip => {\n                // 無効なクリップを除外\n                if (!clip.soundData || !clip.soundData.name) {\n                  console.warn('無効なクリップを除外:', clip);\n                  return false;\n                }\n                return true;\n              })\n          }));\n          setTracks(restoredTracks);\n        }\n        \n        // カウンターを復元\n        if (projectData.trackNameCounter) {\n          trackNameCounterRef.current = projectData.trackNameCounter;\n        }\n        if (projectData.trackIdCounter) {\n          trackIdCounterRef.current = projectData.trackIdCounter;\n        }\n        \n        // 音素材を復元（既存の音素材に追加）\n        if (projectData.sounds) {\n          const restoredSounds = projectData.sounds.map(sound => restoreAudioBlob(sound));\n          \n          // 既存の音素材と読み込んだ音素材を結合\n          setSounds(prevSounds => {\n            const maxId = prevSounds.length > 0 ? Math.max(...prevSounds.map(s => s.id)) : 0;\n            const existingNames = new Set(prevSounds.map(s => s.name));\n            \n            const newSounds = restoredSounds.map((sound, index) => {\n              let newName = sound.name;\n              let counter = 1;\n              \n              // 名前の重複をチェックして、重複する場合は番号を付ける\n              while (existingNames.has(newName)) {\n                newName = `${sound.name} (${counter})`;\n                counter++;\n              }\n              existingNames.add(newName);\n              \n              return {\n                ...sound,\n                id: maxId + index + 1, // 新しいIDを割り当て\n                name: newName // 重複しない名前を設定\n              };\n            });\n            \n            return [...prevSounds, ...newSounds];\n          });\n        }\n        \n        setError(null);\n        \n        // 読み込み後に自動保存データも更新\n        setTimeout(() => {\n          const autoSaveData = {\n            version: '1.0',\n            bpm: projectData.bpm || 120,\n            tracks: projectData.tracks || [],\n            timestamp: Date.now(),\n            trackNameCounter: projectData.trackNameCounter || 1,\n            trackIdCounter: projectData.trackIdCounter || 1\n          };\n          localStorage.setItem('dawProjectAutoSave', JSON.stringify(autoSaveData));\n        }, 100);\n      } catch (error) {\n        console.error('プロジェクト読み込みエラー:', error);\n        setError('プロジェクトファイルの読み込みに失敗しました。ファイルが正しいか確認してください。');\n      }\n    };\n    \n    reader.readAsText(file);\n    // ファイル選択をリセット\n    event.target.value = '';\n  };\n\n  // 音源出力機能\n  const exportAudio = async () => {\n    if (!audioContext) {\n      setError('AudioContextが初期化されていません。');\n      return;\n    }\n\n    setIsExporting(true);\n    try {\n      // 全トラックの全クリップの最大終了時間を計算\n      let maxDuration = 0;\n      tracks.forEach(track => {\n        track.clips.forEach(clip => {\n          const pixelsPerSecond = (bpm / 60) * 100;\n          const clipStartTimeInSeconds = clip.startTime / pixelsPerSecond;\n          const clipDurationInSeconds = clip.duration / pixelsPerSecond;\n          const clipEndTime = clipStartTimeInSeconds + clipDurationInSeconds;\n          maxDuration = Math.max(maxDuration, clipEndTime);\n        });\n      });\n\n      if (maxDuration === 0) {\n        setError('出力する音声がありません。音素材を配置してください。');\n        setIsExporting(false);\n        return;\n      }\n\n      // 出力用AudioContextを作成（44.1kHz）\n      const exportContext = new AudioContext({ sampleRate: 44100 });\n      const bufferLength = Math.ceil(maxDuration * exportContext.sampleRate);\n      const outputBuffer = exportContext.createBuffer(2, bufferLength, exportContext.sampleRate);\n      \n      const leftChannel = outputBuffer.getChannelData(0);\n      const rightChannel = outputBuffer.getChannelData(1);\n\n      // 各トラックの各クリップを処理\n      for (const track of tracks) {\n        for (const clip of track.clips) {\n          if (clip.soundData && clip.soundData.audioBlob) {\n            try {\n              const arrayBuffer = await clip.soundData.audioBlob.arrayBuffer();\n              const audioBuffer = await exportContext.decodeAudioData(arrayBuffer);\n              \n              const pixelsPerSecond = (bpm / 60) * 100;\n              const startTimeInSamples = Math.floor((clip.startTime / pixelsPerSecond) * exportContext.sampleRate);\n              \n              // 音声をミックス\n              for (let channel = 0; channel < Math.min(audioBuffer.numberOfChannels, 2); channel++) {\n                const sourceData = audioBuffer.getChannelData(channel);\n                const targetData = channel === 0 ? leftChannel : rightChannel;\n                \n                for (let i = 0; i < sourceData.length && (startTimeInSamples + i) < targetData.length; i++) {\n                  targetData[startTimeInSamples + i] += sourceData[i];\n                }\n              }\n              \n              // モノラル音源の場合は両チャンネルにコピー\n              if (audioBuffer.numberOfChannels === 1) {\n                const sourceData = audioBuffer.getChannelData(0);\n                for (let i = 0; i < sourceData.length && (startTimeInSamples + i) < rightChannel.length; i++) {\n                  rightChannel[startTimeInSamples + i] += sourceData[i];\n                }\n              }\n            } catch (error) {\n              console.error('クリップの処理エラー:', error);\n            }\n          }\n        }\n      }\n\n      // WAVファイルとして出力\n      const wavBlob = audioBufferToWav(outputBuffer);\n      const url = URL.createObjectURL(wavBlob);\n      \n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `exported-music-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.wav`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      \n      if (exportContext && exportContext.state !== 'closed') {\n        await exportContext.close().catch(error => {\n          console.warn('Export AudioContext のクローズに失敗:', error);\n        });\n      }\n    } catch (error) {\n      console.error('音源出力エラー:', error);\n      setError('音源の出力に失敗しました。');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  // AudioBufferをWAVファイルに変換\n  const audioBufferToWav = (buffer) => {\n    const length = buffer.length;\n    const numberOfChannels = buffer.numberOfChannels;\n    const sampleRate = buffer.sampleRate;\n    const bytesPerSample = 2;\n    const blockAlign = numberOfChannels * bytesPerSample;\n    const byteRate = sampleRate * blockAlign;\n    const dataSize = length * blockAlign;\n    const bufferSize = 44 + dataSize;\n    \n    const arrayBuffer = new ArrayBuffer(bufferSize);\n    const view = new DataView(arrayBuffer);\n    \n    // WAVファイルヘッダー\n    const writeString = (offset, string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    \n    writeString(0, 'RIFF');\n    view.setUint32(4, bufferSize - 8, true);\n    writeString(8, 'WAVE');\n    writeString(12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, numberOfChannels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, byteRate, true);\n    view.setUint16(32, blockAlign, true);\n    view.setUint16(34, bytesPerSample * 8, true);\n    writeString(36, 'data');\n    view.setUint32(40, dataSize, true);\n    \n    // 音声データ\n    let offset = 44;\n    for (let i = 0; i < length; i++) {\n      for (let channel = 0; channel < numberOfChannels; channel++) {\n        const sample = buffer.getChannelData(channel)[i];\n        const intSample = Math.max(-1, Math.min(1, sample)) * 0x7FFF;\n        view.setInt16(offset, intSample, true);\n        offset += 2;\n      }\n    }\n    \n    return new Blob([arrayBuffer], { type: 'audio/wav' });\n  };\n\n  const addTrack = () => {\n    // より確実にユニークなIDを生成\n    trackIdCounterRef.current += 1;\n    const uniqueId = Date.now() + trackIdCounterRef.current;\n    \n    // トラック名の番号を増加（削除されても番号は戻らない）\n    trackNameCounterRef.current += 1;\n    const trackName = `トラック ${trackNameCounterRef.current}`;\n    \n    const newTrack = {\n      id: uniqueId,\n      name: trackName,\n      clips: []\n    };\n    setTracks(prevTracks => [...prevTracks, newTrack]);\n  };\n\n  const removeTrack = (trackId) => {\n    setTracks(prevTracks => {\n      if (prevTracks.length > 1) {\n        return prevTracks.filter(track => track.id !== trackId);\n      }\n      return prevTracks;\n    });\n  };\n\n  const handleDrop = async (e, trackId, timePosition) => {\n    e.preventDefault();\n    setDragPreview(null);\n    \n    \n    try {\n      \n      // 既存のクリップの移動かどうかチェック\n      if (draggedClip) {\n        // ドラッグオフセットを考慮した新しい開始位置を計算\n        const adjustedPosition = timePosition - dragOffset;\n        // 拍または秒に合わせて位置を調整\n        const snappedPosition = Math.max(0, getSnapPosition(adjustedPosition));\n        \n        \n        // 既存クリップの移動\n        const updatedClip = {\n          ...draggedClip,\n          startTime: snappedPosition,\n          trackId: trackId\n        };\n\n        setTracks(prevTracks => prevTracks.map(track => {\n          if (track.id === draggedClip.originalTrackId && track.id === trackId) {\n            // 同じトラック内での移動\n            return {\n              ...track,\n              clips: track.clips.map(clip => \n                clip.id === draggedClip.id ? updatedClip : clip\n              )\n            };\n          } else if (track.id === draggedClip.originalTrackId) {\n            // 元のトラックからクリップを削除\n            return {\n              ...track,\n              clips: track.clips.filter(clip => clip.id !== draggedClip.id)\n            };\n          } else if (track.id === trackId) {\n            // 新しいトラックにクリップを追加\n            return {\n              ...track,\n              clips: [...track.clips, updatedClip]\n            };\n          }\n          return track;\n        }));\n        setDraggedClip(null);\n        setDragOffset(0);\n        return;\n      }\n      \n      // 新しい音素材の配置\n      let soundData;\n      try {\n        // dataTransferからデータを取得\n        const jsonData = e.dataTransfer ? e.dataTransfer.getData('application/json') : '';\n        if (jsonData) {\n          soundData = JSON.parse(jsonData);\n        } else {\n          // モバイルの場合はグローバル変数から取得\n          soundData = window.currentDraggedSound;\n        }\n      } catch (error) {\n        console.error('ドラッグデータの取得に失敗:', error);\n        soundData = window.currentDraggedSound; // フォールバック\n      }\n      \n      if (!soundData) {\n        console.error('音素材データが見つかりません');\n        setError('音素材データが見つかりません。再度お試しください。');\n        return;\n      }\n\n      // soundDataの必要なプロパティをチェック\n      if (!soundData.name) {\n        console.error('音素材の名前が見つかりません:', soundData);\n        setError('音素材の名前が不正です。再度お試しください。');\n        return;\n      }\n      \n      // グローバル変数からaudioBlobを復元\n      if (window.currentDraggedSoundBlob) {\n        soundData.audioBlob = window.currentDraggedSoundBlob;\n        window.currentDraggedSoundBlob = null; // クリーンアップ\n      }\n      \n      // グローバル変数をクリア\n      window.currentDraggedSound = null;\n      \n      \n      // 音声の実際の継続時間を取得（現在のBPMに基づいて）\n      let duration = 400; // デフォルト値（1小節）\n      if (soundData.audioBlob) {\n        try {\n          duration = await getAudioDuration(soundData.audioBlob, bpm);\n        } catch (error) {\n          console.warn('音声継続時間の取得に失敗しました:', error);\n        }\n      }\n\n      // durationが有効な値かチェック\n      if (!isFinite(duration) || duration <= 0) {\n        console.warn('無効なduration:', duration, 'デフォルト値を使用');\n        duration = 400; // 1小節分\n      }\n\n      // 新しい音素材の場合は通常のスナップ処理\n      const snappedPosition = getSnapPosition(timePosition);\n\n      const newClip = {\n        id: Date.now() + Math.random(), // より確実にユニークなIDを生成\n        soundData: soundData,\n        startTime: snappedPosition,\n        duration: duration,\n        trackId: trackId\n      };\n\n\n      // 関数型更新を使用して最新の状態を確実に取得\n      setTracks(prevTracks => {\n        const updatedTracks = prevTracks.map(track => \n          track.id === trackId \n            ? { ...track, clips: [...track.clips, newClip] }\n            : track\n        );\n        return updatedTracks;\n      });\n    } catch (error) {\n      console.error('ドロップエラー:', error);\n      setError('音素材の配置に失敗しました。再度お試しください。');\n    }\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n    \n    // ドラッグされているのが既存クリップか新しい音素材かで処理を分ける\n    if (draggedClip) {\n      e.dataTransfer.dropEffect = 'move';\n    } else {\n      e.dataTransfer.dropEffect = 'copy';\n    }\n    \n    // スロットリング - 16ms（60FPS）間隔で実行を制限\n    if (dragOverTimeoutRef.current) {\n      return;\n    }\n    \n    // 必要な情報を事前に抽出\n    const clientX = e.clientX;\n    const currentTarget = e.currentTarget;\n    \n    dragOverTimeoutRef.current = setTimeout(() => {\n      dragOverTimeoutRef.current = null;\n      updateDragPreview(clientX, currentTarget);\n    }, 16);\n  };\n  \n  const updateDragPreview = (clientX, trackElement) => {\n    // null チェックを追加\n    if (!trackElement || !timelineRef.current) {\n      return;\n    }\n\n    // 初回ドラッグプレビュー表示時に強制クリーンアップタイマーを設定\n    if (!window.dragCleanupTimer) {\n      window.dragCleanupTimer = setTimeout(() => {\n        cleanupDragState();\n      }, 10000); // 10秒後に強制クリーンアップ\n    }\n    \n    try {\n      // ドラッグプレビューの更新\n      const rect = trackElement.getBoundingClientRect();\n      const timePosition = clientX - rect.left;\n      \n      let snappedPosition;\n      \n      if (draggedClip) {\n        // 既存クリップの場合：ドラッグオフセットを考慮\n        const adjustedPosition = timePosition - dragOffset;\n        snappedPosition = Math.max(0, getSnapPosition(adjustedPosition));\n      } else {\n        // 新しい音素材の場合：通常の処理\n        snappedPosition = getSnapPosition(timePosition);\n      }\n      \n      const trackRect = trackElement.getBoundingClientRect();\n      const tracksAreaRect = timelineRef.current.getBoundingClientRect();\n      \n      if (tracksAreaRect && trackElement.dataset && trackElement.dataset.trackId) {\n        const relativeTop = trackRect.top - tracksAreaRect.top;\n        const trackId = parseInt(trackElement.dataset.trackId);\n        \n        // trackIdが有効な数値かチェック\n        if (isNaN(trackId)) {\n          return;\n        }\n        \n        // プレビュー幅を決定\n        let previewWidth = 400; // デフォルト値（1小節）\n        \n        if (draggedClip) {\n          // 既存クリップの場合\n          previewWidth = isFinite(draggedClip.duration) && draggedClip.duration > 0 \n            ? draggedClip.duration \n            : 400;\n        } else {\n          // 新しい音素材の場合、事前に計算された長さを使用\n          previewWidth = draggedSoundDuration;\n        }\n        \n        setDragPreview({\n          left: snappedPosition,\n          top: relativeTop + 10,\n          width: previewWidth,\n          trackId: trackId\n        });\n      }\n    } catch (error) {\n      console.warn('ドラッグプレビュー更新エラー:', error);\n      // エラーが発生した場合はプレビューをクリア\n      setDragPreview(null);\n    }\n  };\n\n  const removeClip = (trackId, clipId) => {\n    setTracks(prevTracks => prevTracks.map(track => \n      track.id === trackId \n        ? { ...track, clips: track.clips.filter(clip => clip.id !== clipId) }\n        : track\n    ));\n  };\n\n  // クリップのドラッグ開始\n  const handleClipDragStart = (clip, originalTrackId, mouseX, clipElement) => {\n    \n    // クリップ内でのマウス位置のオフセットを計算\n    const clipRect = clipElement.getBoundingClientRect();\n    const offsetInClip = mouseX - clipRect.left;\n    \n    \n    setDraggedClip({ ...clip, originalTrackId });\n    setDragOffset(offsetInClip);\n  };\n\n  // ドラッグ状態の完全なクリーンアップ\n  const cleanupDragState = useCallback(() => {\n    \n    // ドラッグオーバーのタイムアウトをクリア\n    if (dragOverTimeoutRef.current) {\n      clearTimeout(dragOverTimeoutRef.current);\n      dragOverTimeoutRef.current = null;\n    }\n    \n    // 強制クリーンアップタイマーをクリア\n    if (window.dragCleanupTimer) {\n      clearTimeout(window.dragCleanupTimer);\n      window.dragCleanupTimer = null;\n    }\n    \n    // すべてのドラッグ関連の状態をリセット\n    setDraggedClip(null);\n    setDragPreview(null);\n    setDraggedSoundDuration(400);\n    setDragOffset(0);\n    \n    // DOM要素のクリーンアップ\n    document.querySelectorAll('.track').forEach(track => {\n      track.classList.remove('drag-over');\n    });\n    \n    // モバイル用のドラッグプレビューを削除\n    const mobileDragPreview = document.querySelector('.mobile-drag-preview');\n    if (mobileDragPreview) {\n      mobileDragPreview.remove();\n    }\n    \n    // グローバル変数のクリーンアップ\n    if (window.currentDraggedSoundBlob) {\n      window.currentDraggedSoundBlob = null;\n    }\n    if (window.currentDraggedSound) {\n      window.currentDraggedSound = null;\n    }\n    \n    // ボディクラスのクリーンアップ\n    document.body.classList.remove('dragging');\n  }, []);\n\n  // コンポーネントマウント時にグローバルコールバックを設定\n  useEffect(() => {\n    window.cleanupDragStateCallback = cleanupDragState;\n    \n    // グローバルなドラッグ終了イベントリスナーを追加\n    const handleGlobalDragEnd = () => {\n      cleanupDragState();\n    };\n\n    const handleGlobalDragLeave = (e) => {\n      // ドキュメント外にドラッグが出た場合\n      if (!e.relatedTarget || e.relatedTarget.nodeName === 'HTML') {\n        cleanupDragState();\n      }\n    };\n\n    // ドキュメントレベルでイベントリスナーを設定\n    document.addEventListener('dragend', handleGlobalDragEnd);\n    document.addEventListener('dragleave', handleGlobalDragLeave);\n    \n    // クリーンアップ関数\n    return () => {\n      if (window.cleanupDragStateCallback === cleanupDragState) {\n        window.cleanupDragStateCallback = null;\n      }\n      document.removeEventListener('dragend', handleGlobalDragEnd);\n      document.removeEventListener('dragleave', handleGlobalDragLeave);\n    };\n  }, [cleanupDragState]);\n\n  // ドラッグ終了時のクリーンアップ\n  const handleDragEnd = (e) => {\n    // ドロップが正常に処理されなかった場合、元の状態を保持\n    if (draggedClip && e && e.dataTransfer && e.dataTransfer.dropEffect === 'none') {\n    }\n    \n    // 完全なクリーンアップ\n    cleanupDragState();\n  };\n\n  const play = async () => {\n    try {\n      // AudioContextが中断されている場合は再開\n      if (audioContext && audioContext.state === 'suspended') {\n        await audioContext.resume();\n      }\n      \n      setIsPlaying(true);\n      \n      // 現在の時間位置に基づいて、再生すべきクリップを見つける\n      let pixelsPerSecond;\n      if (isTimeMode) {\n        pixelsPerSecond = PIXELS_PER_SECOND;\n      } else {\n        pixelsPerSecond = (bpm / 60) * 100;\n      }\n      \n      const currentTimeInSeconds = currentTime / pixelsPerSecond;\n      \n      // 各トラックのクリップを再生\n      const newPlayingAudios = new Map();\n      \n      tracks.forEach(track => {\n        track.clips.forEach(clip => {\n          // clip.durationが有効な値かチェック\n          if (!isFinite(clip.duration) || clip.duration <= 0) {\n            console.warn('無効なclip.duration:', clip.duration, 'クリップをスキップします');\n            return;\n          }\n          \n          const clipStartTimeInSeconds = clip.startTime / pixelsPerSecond;\n          const clipEndTimeInSeconds = clipStartTimeInSeconds + (clip.duration / pixelsPerSecond);\n          \n          // 計算結果が有効かチェック\n          if (!isFinite(clipStartTimeInSeconds) || !isFinite(clipEndTimeInSeconds)) {\n            console.warn('無効な時間計算:', { clipStartTimeInSeconds, clipEndTimeInSeconds });\n            return;\n          }\n          \n          // 現在の時間位置がクリップの範囲内または今後再生される場合\n          if (clipEndTimeInSeconds > currentTimeInSeconds) {\n            const delay = Math.max(0, clipStartTimeInSeconds - currentTimeInSeconds);\n            if (isFinite(delay) && delay >= 0) {\n              scheduleClipPlayback(clip, delay * 1000, newPlayingAudios);\n            }\n          }\n        });\n      });\n      \n      setPlayingAudios(newPlayingAudios);\n    } catch (error) {\n      console.error('再生エラー:', error);\n      setError('音声の再生に失敗しました。ブラウザで音声が有効になっているか確認してください。');\n    }\n  };\n\n  const scheduleClipPlayback = (clip, delayMs, playingAudiosMap) => {\n    \n    if (clip.soundData && clip.soundData.audioBlob && clip.soundData.audioBlob instanceof Blob) {\n      try {\n        const audio = new Audio();\n        const audioUrl = URL.createObjectURL(clip.soundData.audioBlob);\n        audio.src = audioUrl;\n        \n        const timeoutId = setTimeout(() => {\n          audio.play().catch(error => {\n            console.error('音声再生エラー:', error);\n            URL.revokeObjectURL(audioUrl); // メモリリークを防ぐ\n          });\n        }, delayMs);\n        \n        // 音声終了時にURLを解放\n        audio.addEventListener('ended', () => {\n          URL.revokeObjectURL(audioUrl);\n        });\n        \n        playingAudiosMap.set(clip.id, { audio, timeoutId, audioUrl });\n      } catch (error) {\n        console.error('createObjectURL エラー:', error, 'audioBlob:', clip.soundData.audioBlob);\n      }\n    } else {\n      console.warn('audioBlobが無効です。クリップ情報:', {\n        clipId: clip.id,\n        soundDataName: clip.soundData?.name,\n        hasAudioData: !!clip.soundData?.audioData,\n        hasAudioBlob: !!clip.soundData?.audioBlob,\n        audioBlobType: typeof clip.soundData?.audioBlob,\n        isInstanceOfBlob: clip.soundData?.audioBlob instanceof Blob\n      });\n      \n      // AudioBlobが無効な場合、audioDataから復元を試行\n      if (clip.soundData && clip.soundData.audioData && !clip.soundData.audioBlob) {\n        try {\n          const byteCharacters = atob(clip.soundData.audioData.split(',')[1]);\n          const byteNumbers = new Array(byteCharacters.length);\n          for (let i = 0; i < byteCharacters.length; i++) {\n            byteNumbers[i] = byteCharacters.charCodeAt(i);\n          }\n          const byteArray = new Uint8Array(byteNumbers);\n          const blob = new Blob([byteArray], { type: 'audio/wav' });\n          \n          // クリップのsoundDataを更新\n          clip.soundData.audioBlob = blob;\n          \n          // 再帰的に再試行\n          scheduleClipPlayback(clip, delayMs, playingAudiosMap);\n          return;\n        } catch (restoreError) {\n          console.error('audioDataからのBlob復元に失敗:', restoreError);\n        }\n      }\n    }\n  };\n\n  const pause = () => {\n    setIsPlaying(false);\n    \n    // 再生中の音声を一時停止\n    playingAudios.forEach(({ audio, timeoutId, audioUrl }) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      if (!audio.paused) {\n        audio.pause();\n      }\n      // URLを解放\n      if (audioUrl) {\n        URL.revokeObjectURL(audioUrl);\n      }\n    });\n  };\n\n  const stop = () => {\n    setIsPlaying(false);\n    setCurrentTime(0);\n    \n    // 再生中の音声を停止\n    playingAudios.forEach(({ audio, timeoutId, audioUrl }) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      audio.pause();\n      audio.currentTime = 0;\n      // URLを解放\n      if (audioUrl) {\n        URL.revokeObjectURL(audioUrl);\n      }\n    });\n    \n    setPlayingAudios(new Map());\n  };\n\n  // タイムラインデータの自動保存機能\n  useEffect(() => {\n    const autoSaveProject = () => {\n      try {\n        const projectData = {\n          version: '1.0',\n          bpm: bpm,\n          tracks: tracks,\n          timestamp: Date.now(),\n          trackNameCounter: trackNameCounterRef.current,\n          trackIdCounter: trackIdCounterRef.current,\n          isTimeMode: isTimeMode,\n          secondsPerBeat: secondsPerBeat\n        };\n\n        localStorage.setItem('dawProjectAutoSave', JSON.stringify(projectData));\n\n      } catch (error) {\n        console.error('プロジェクトの自動保存に失敗:', error);\n      }\n    };\n\n    // 初期化後の自動保存（tracksやbpmが変更された時）\n    if (tracks.length > 0) {\n      autoSaveProject();\n    }\n  }, [tracks, bpm, isTimeMode, secondsPerBeat]);\n\n  // 音素材の更新監視（他のページで音が追加された場合の対応）\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (!document.hidden) {\n        // ページが表示されたときに音素材を再読み込み\n        const savedSounds = JSON.parse(localStorage.getItem('soundRecordings') || '[]');\n        \n        // 音声データ復元処理（既存のロジックを再利用）\n        const soundsWithBlob = savedSounds.map(sound => {\n          if (sound.audioData) {\n            try {\n              const base64Data = sound.audioData.split(',')[1];\n              if (!base64Data || base64Data.length === 0) {\n                return sound;\n              }\n              \n              const byteCharacters = atob(base64Data);\n              const byteNumbers = new Array(byteCharacters.length);\n              for (let i = 0; i < byteCharacters.length; i++) {\n                byteNumbers[i] = byteCharacters.charCodeAt(i);\n              }\n              const byteArray = new Uint8Array(byteNumbers);\n              const blob = new Blob([byteArray], { type: 'audio/wav' });\n              \n              return { ...sound, audioBlob: blob };\n            } catch (error) {\n              console.error('音声データの復元に失敗:', sound.name, error);\n              return sound;\n            }\n          }\n          return sound;\n        });\n        \n        const validSounds = soundsWithBlob.filter(sound => \n          sound.audioBlob && sound.audioBlob instanceof Blob && sound.audioBlob.size > 0\n        );\n        \n        setSounds(validSounds);\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, []);\n\n  // 自動保存データをクリアする機能\n  const clearAutoSave = () => {\n    try {\n      localStorage.removeItem('dawProjectAutoSave');\n      \n      // 初期状態にリセット\n      setTracks([{ \n        id: Date.now(), \n        name: 'トラック 1', \n        clips: [] \n      }]);\n      setBpm(120);\n      trackNameCounterRef.current = 1;\n      trackIdCounterRef.current = 1;\n      \n      setError(null);\n      alert('✅ プロジェクトをリセットしました');\n    } catch (error) {\n      console.error('自動保存データのクリアに失敗:', error);\n      setError('プロジェクトのリセットに失敗しました');\n    }\n  };\n\n  // 無効なクリップを除外する関数\n  const cleanupInvalidClips = () => {\n    setTracks(prevTracks => {\n      const cleanedTracks = prevTracks.map(track => ({\n        ...track,\n        clips: track.clips.filter(clip => {\n          if (!clip.soundData || !clip.soundData.name) {\n            console.warn('無効なクリップを除外:', clip);\n            return false;\n          }\n          return true;\n        })\n      }));\n      \n      const removedCount = prevTracks.reduce((total, track) => total + track.clips.length, 0) - \n                          cleanedTracks.reduce((total, track) => total + track.clips.length, 0);\n      \n      if (removedCount > 0) {\n      }\n      \n      return cleanedTracks;\n    });\n  };\n\n  // 初期化時に無効なクリップをクリーンアップ\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      cleanupInvalidClips();\n    }, 1000); // 1秒後に実行\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  // コンポーネントアンマウント時の包括的クリーンアップ\n  useEffect(() => {\n    return () => {\n      // ドラッグ状態のクリーンアップ\n      cleanupDragState();\n      \n      // 再生中の音声をすべて停止\n      setPlayingAudios(currentPlayingAudios => {\n        currentPlayingAudios.forEach(({ audio, timeoutId, audioUrl }) => {\n          if (timeoutId) {\n            clearTimeout(timeoutId);\n          }\n          if (audio) {\n            audio.pause();\n            audio.src = '';\n          }\n          if (audioUrl) {\n            URL.revokeObjectURL(audioUrl);\n          }\n        });\n        return new Map();\n      });\n      \n      // AudioContextをクリーンアップ\n      if (audioContext && audioContext.state !== 'closed') {\n        audioContext.close().catch(error => {\n          console.warn('AudioContext のクローズに失敗:', error);\n        });\n      }\n      \n      // アニメーションフレームをクリア\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      \n      // タイムアウトをクリア\n      if (dragOverTimeoutRef.current) {\n        clearTimeout(dragOverTimeoutRef.current);\n      }\n    };\n  }, [cleanupDragState, audioContext]);\n\n  return (\n    <div className=\"daw-page\">\n      <h2>🎹 音楽づくりページ</h2>\n      <p>音素材をドラッグ&ドロップして音楽を作りましょう！</p>\n\n      {error && (\n        <div className=\"error-message\">\n          <span>⚠️ {error}</span>\n          <button onClick={() => setError(null)}>×</button>\n        </div>\n      )}\n\n      <div className=\"daw-controls card\">\n        <div className=\"transport-controls\">\n          <button \n            className={`transport-btn play-btn ${isPlaying ? 'playing' : ''}`}\n            onClick={isPlaying ? pause : play}\n          >\n            {isPlaying ? '⏸️' : '▶️'}\n          </button>\n          <button className=\"transport-btn stop-btn\" onClick={stop}>\n            ⏹️\n          </button>\n        </div>\n\n        <div className=\"bpm-control\">\n          <label htmlFor=\"bpm\">🎵 BPM:</label>\n          <input\n            id=\"bpm\"\n            type=\"number\"\n            value={bpm}\n            onChange={(e) => handleBpmChange(parseInt(e.target.value))}\n            min=\"60\"\n            max=\"200\"\n            className=\"bpm-input\"\n            disabled={isTimeMode}\n          />\n        </div>\n\n        <div className=\"time-mode-control\">\n          <button \n            className={`time-mode-toggle ${isTimeMode ? 'active' : ''}`}\n            onClick={toggleTimeMode}\n            title={isTimeMode ? '拍子モードに切り替え' : '秒数モードに切り替え'}\n          >\n            ⏰ {isTimeMode ? '秒数モード' : '拍子モード'}\n          </button>\n          \n          {isTimeMode && (\n            <div className=\"seconds-per-beat-control\">\n              <label htmlFor=\"secondsPerBeat\">1拍:</label>\n              <input\n                id=\"secondsPerBeat\"\n                type=\"number\"\n                value={secondsPerBeat}\n                onChange={(e) => handleSecondsPerBeatChange(parseFloat(e.target.value))}\n                min=\"0.1\"\n                max=\"5.0\"\n                step=\"0.1\"\n                className=\"seconds-input\"\n              />\n              <span>秒</span>\n            </div>\n          )}\n        </div>\n\n        <div className=\"track-controls\">\n          <button className=\"button-primary\" onClick={addTrack}>\n            ➕ トラック追加\n          </button>\n          <button \n            className=\"button-secondary\" \n            onClick={() => setShowSoundPanel(!showSoundPanel)}\n          >\n            {showSoundPanel ? '🎵 音素材を隠す' : '🎵 音素材を表示'}\n          </button>\n        </div>\n\n        <div className=\"project-controls\">\n          <button className=\"button-secondary\" onClick={saveProject}>\n            💾 プロジェクト保存\n          </button>\n          <label className=\"button-secondary file-input-label\">\n            📁 プロジェクト読み込み\n            <input\n              type=\"file\"\n              accept=\".json\"\n              onChange={loadProject}\n              style={{ display: 'none' }}\n            />\n          </label>\n          <button \n            className=\"button-warning\" \n            onClick={() => {\n              if (window.confirm('🗑️ プロジェクトをリセットしますか？\\n\\n現在の作業内容がすべて削除されます。')) {\n                clearAutoSave();\n              }\n            }}\n            title=\"プロジェクトをリセット（自動保存データもクリア）\"\n          >\n            🗑️ リセット\n          </button>\n          <button \n            className=\"button-primary\" \n            onClick={exportAudio}\n            disabled={isExporting}\n          >\n            {isExporting ? '🔄 出力中...' : '🎧 音源出力'}\n          </button>\n        </div>\n      </div>\n\n      <div className=\"daw-main-area\">\n        <div className={`sound-panel ${!showSoundPanel ? 'panel-hidden' : ''}`}>\n          <div className=\"sound-panel-header\">\n            <h3>🎵 音素材</h3>\n            <button \n              className=\"sound-panel-close\"\n              onClick={() => setShowSoundPanel(false)}\n              title=\"音素材パネルを閉じる\"\n            >\n              ✕\n            </button>\n          </div>\n          <div className=\"sound-list\">\n            {sounds.length > 0 ? (\n              sounds.map(sound => (\n                <SoundItem \n                  key={sound.id} \n                  sound={sound} \n                  onDragStart={async (sound) => {\n                    // ドラッグ開始時に音声の長さを計算\n                    if (sound.audioBlob) {\n                      try {\n                        const duration = await getAudioDuration(sound.audioBlob, bpm);\n                        setDraggedSoundDuration(duration);\n                      } catch (error) {\n                        console.warn('ドラッグ時の音声長さ計算に失敗:', error);\n                        setDraggedSoundDuration(400);\n                      }\n                    } else {\n                      setDraggedSoundDuration(400);\n                    }\n                  }}\n                />\n              ))\n            ) : (\n              <div className=\"no-sounds\">\n                <p>音素材がありません</p>\n                <p>「音あつめ」ページで音を録音してください</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className={`daw-workspace ${!showSoundPanel ? 'panel-hidden' : ''}`}>\n          <div className=\"track-headers\">\n            <div className=\"timeline-header-spacer\">\n              タイムライン\n            </div>\n            {tracks.map((track, index) => (\n              <TrackHeader \n                key={track.id} \n                track={track} \n                trackIndex={index}\n                onRemove={removeTrack}\n                trackHeight={trackHeight}\n              />\n            ))}\n          </div>\n\n          <div className=\"timeline-container\">\n            <Timeline bpm={bpm} isTimeMode={isTimeMode} secondsPerBeat={secondsPerBeat} />\n            <div \n              className=\"tracks-area\" \n              ref={timelineRef} \n              style={{ \n                minWidth: isTimeMode \n                  ? TIME_MODE_TOTAL_SECONDS * PIXELS_PER_SECOND \n                  : TOTAL_MEASURES * MEASURE_WIDTH \n              }}\n            >\n              <Playhead currentTime={currentTime} />\n              {dragPreview && (\n                <div \n                  className=\"drag-preview\"\n                  style={{\n                    left: dragPreview.left,\n                    top: dragPreview.top,\n                    width: dragPreview.width\n                  }}\n                />\n              )}\n              {tracks.map((track) => (\n                <Track\n                  key={track.id}\n                  track={track}\n                  onDrop={handleDrop}\n                  onDragOver={handleDragOver}\n                  onRemoveClip={removeClip}\n                  onClipDragStart={handleClipDragStart}\n                  onDragEnd={handleDragEnd}\n                  trackHeight={trackHeight}\n                  updateDragPreview={updateDragPreview}\n                  isTimeMode={isTimeMode}\n                  secondsPerBeat={secondsPerBeat}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"instructions card\">\n        <h3>📖 使い方</h3>\n        <ul>\n          <li><strong>🖥️ PC:</strong> 左側の音素材パネルから音素材をトラックにドラッグ&ドロップして配置</li>\n          <li><strong>📱 スマホ/タブレット:</strong> 音素材を長押ししてからトラックまでドラッグして配置</li>\n          <li>配置済みの音素材もドラッグして別の場所に移動できます</li>\n          <li>ドラッグ中は配置予定位置に青い影が表示されます</li>\n          <li>音素材は8分音符（裏拍含む）に合わせて自動的に配置されます</li>\n          <li>音素材パネルの▶️ボタンで個別に音を確認できます</li>\n          <li>▶️ボタンで再生、⏸️ボタンで一時停止、⏹️ボタンで停止</li>\n          <li>BPMを変更して音楽の速さを調整</li>\n          <li>トラックを追加して複数の音を重ねることができます</li>\n          <li><strong>💾 プロジェクト保存:</strong> 編集中のデータをJSONファイルとして保存</li>\n          <li><strong>📁 プロジェクト読み込み:</strong> 保存したプロジェクトファイルを読み込んで編集を再開</li>\n          <li><strong>🎧 音源出力:</strong> 完成した楽曲をWAVファイルとして出力</li>\n          <li><strong>🗑️ リセット:</strong> 現在のプロジェクトをリセットして新しく始める</li>\n        </ul>\n        <div className=\"auto-save-info\">\n          <h4>💾 自動保存機能</h4>\n          <ul>\n            <li><strong>自動保存:</strong> トラックやBPMの変更は自動的に保存されます</li>\n            <li><strong>他ページとの連携:</strong> 「音あつめ」ページで録音した音は自動的に反映されます</li>\n            <li><strong>復元機能:</strong> ページをリロードしても作業内容が自動的に復元されます</li>\n            <li><strong>安心して移動:</strong> 他のページに移動しても作業内容は保持されます</li>\n          </ul>\n        </div>\n        <div className=\"mobile-tips\">\n          <h4>📱 スマートフォン利用のコツ</h4>\n          <ul>\n            <li>音素材を軽く長押しするとドラッグモードになります</li>\n            <li>ドラッグ中は画面がスクロールしないよう制御されます</li>\n            <li>青くハイライトされたトラックで指を離すと音素材が配置されます</li>\n            <li>横画面表示にするとより使いやすくなります</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SoundItem = ({ sound, onDragStart }) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const [touchStart, setTouchStart] = useState(null);\n  const [touchMove, setTouchMove] = useState(null);\n\n  const handleDragStart = (e) => {\n    // audioBlob以外のデータをJSON文字列として設定\n    const soundDataForTransfer = {\n      ...sound,\n      audioBlob: null // Blobは直接シリアライズできないため一時的にnullに\n    };\n    \n    e.dataTransfer.setData('application/json', JSON.stringify(soundDataForTransfer));\n    e.dataTransfer.effectAllowed = 'copy';\n    \n    // 実際のaudioBlobは別途グローバル変数で保持\n    window.currentDraggedSoundBlob = sound.audioBlob;\n    \n    // 親コンポーネントのonDragStart関数を呼び出し（音声の長さを計算）\n    if (onDragStart) {\n      onDragStart(sound);\n    }\n  };\n\n  // タッチイベント対応\n  const handleTouchStart = (e) => {\n    const touch = e.touches[0];\n    setTouchStart({ x: touch.clientX, y: touch.clientY });\n    setIsDragging(false);\n    \n    // 長押し判定用のタイマーは設定せず、移動検知でのみドラッグを開始\n  };\n\n  const handleTouchMove = (e) => {\n    if (!touchStart) return;\n    \n    const touch = e.touches[0];\n    const currentPos = { x: touch.clientX, y: touch.clientY };\n    setTouchMove(currentPos);\n    \n    // ドラッグ開始の判定（15px以上移動）- 閾値を上げてより意図的な移動のみドラッグ扱い\n    const deltaX = Math.abs(currentPos.x - touchStart.x);\n    const deltaY = Math.abs(currentPos.y - touchStart.y);\n    \n    if (!isDragging && (deltaX > 15 || deltaY > 15)) {\n      setIsDragging(true);\n      // スクロールを一時的に無効化（移動が確定してから）\n      document.body.classList.add('dragging');\n      \n      // 親コンポーネントのonDragStart関数を呼び出し\n      if (onDragStart) {\n        onDragStart(sound);\n      }\n      // グローバル変数に設定\n      window.currentDraggedSoundBlob = sound.audioBlob;\n      window.currentDraggedSound = sound;\n    }\n    \n    if (isDragging) {\n      // passiveイベントではpreventDefaultが使えないので、代わりにtouchActionでスクロールを制御\n      \n      // ドラッグプレビューの位置を更新\n      const dragPreview = document.querySelector('.mobile-drag-preview');\n      if (dragPreview) {\n        dragPreview.style.left = `${currentPos.x - 50}px`;\n        dragPreview.style.top = `${currentPos.y - 20}px`;\n      }\n      \n      // ドロップターゲットのハイライト\n      const elementBelow = document.elementFromPoint(currentPos.x, currentPos.y);\n      const trackElement = elementBelow?.closest('.track');\n      \n      // 既存のハイライトを削除\n      document.querySelectorAll('.track').forEach(track => {\n        track.classList.remove('drag-over');\n      });\n      \n      // 新しいハイライトを追加\n      if (trackElement) {\n        trackElement.classList.add('drag-over');\n      }\n    }\n  };\n\n  const handleTouchEnd = (e) => {\n    if (isDragging && touchMove) {\n      // ドロップ処理\n      const elementBelow = document.elementFromPoint(touchMove.x, touchMove.y);\n      const trackElement = elementBelow?.closest('.track');\n      \n      if (trackElement) {\n        const trackId = parseInt(trackElement.dataset.trackId);\n        const rect = trackElement.getBoundingClientRect();\n        const timePosition = touchMove.x - rect.left;\n        \n        // ドロップイベントを発火\n        const dropEvent = new CustomEvent('mobileDrop', {\n          detail: {\n            trackId,\n            timePosition,\n            sound: sound\n          }\n        });\n        trackElement.dispatchEvent(dropEvent);\n      }\n    }\n    \n    // クリーンアップ\n    setTouchStart(null);\n    setTouchMove(null);\n    setIsDragging(false);\n    \n    // SoundItem 内での直接クリーンアップ\n    document.body.classList.remove('dragging');\n    \n    // ハイライトを削除\n    document.querySelectorAll('.track').forEach(track => {\n      track.classList.remove('drag-over');\n    });\n    \n    // モバイル用のドラッグプレビューを削除\n    const mobileDragPreview = document.querySelector('.mobile-drag-preview');\n    if (mobileDragPreview) {\n      mobileDragPreview.remove();\n    }\n    \n    // グローバル変数をクリア\n    if (window.currentDraggedSoundBlob) {\n      window.currentDraggedSoundBlob = null;\n    }\n    if (window.currentDraggedSound) {\n      window.currentDraggedSound = null;\n    }\n  };\n\n  const playSound = () => {\n    if (sound.audioBlob && !isPlaying && !isDragging) {\n      // Blobの有効性をチェック\n      if (!(sound.audioBlob instanceof Blob) || sound.audioBlob.size === 0) {\n        console.error('無効なaudioBlob:', {\n          name: sound.name,\n          isBlob: sound.audioBlob instanceof Blob,\n          size: sound.audioBlob?.size\n        });\n        return;\n      }\n      \n      const audio = new Audio();\n      let audioUrl;\n      \n      try {\n        audioUrl = URL.createObjectURL(sound.audioBlob);\n        audio.src = audioUrl;\n        \n        audio.play()\n          .then(() => {\n            setIsPlaying(true);\n            \n            const handleEnded = () => {\n              setIsPlaying(false);\n              if (audioUrl) {\n                URL.revokeObjectURL(audioUrl); // URLをクリーンアップ\n              }\n              audio.removeEventListener('ended', handleEnded);\n            };\n            \n            audio.addEventListener('ended', handleEnded);\n            \n            // 音声の読み込みエラーもハンドリング\n            audio.addEventListener('error', (error) => {\n              console.error('音声読み込みエラー:', error);\n              setIsPlaying(false);\n              if (audioUrl) {\n                URL.revokeObjectURL(audioUrl);\n              }\n            });\n          })\n          .catch(error => {\n            console.error('音声再生エラー:', error);\n            if (audioUrl) {\n              URL.revokeObjectURL(audioUrl); // エラー時もクリーンアップ\n            }\n            setIsPlaying(false);\n          });\n      } catch (error) {\n        console.error('createObjectURLエラー:', error);\n        setIsPlaying(false);\n      }\n    } else {\n      console.error('再生条件不満足:', {\n        hasAudioBlob: !!sound.audioBlob,\n        isPlaying,\n        isDragging\n      });\n    }\n  };\n\n  // ドラッグプレビューを作成\n  const createDragPreview = useCallback(() => {\n    if (isDragging && touchMove) {\n      let dragPreview = document.querySelector('.mobile-drag-preview');\n      if (!dragPreview) {\n        dragPreview = document.createElement('div');\n        dragPreview.className = 'mobile-drag-preview';\n        dragPreview.textContent = sound.name;\n        dragPreview.style.cssText = `\n          position: fixed;\n          background: rgba(0, 123, 255, 0.8);\n          color: white;\n          padding: 5px 10px;\n          border-radius: 4px;\n          font-size: 12px;\n          pointer-events: none;\n          z-index: 1000;\n          left: ${touchMove.x - 50}px;\n          top: ${touchMove.y - 20}px;\n        `;\n        document.body.appendChild(dragPreview);\n      }\n    }\n  }, [isDragging, touchMove, sound.name]);\n\n  // ドラッグプレビューの更新\n  React.useEffect(() => {\n    if (isDragging) {\n      createDragPreview();\n    }\n  }, [isDragging, touchMove, createDragPreview]);\n\n  return (\n    <div\n      className={`sound-item ${isDragging ? 'dragging' : ''}`}\n      draggable=\"true\"\n      onDragStart={handleDragStart}\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n    >\n      <div className=\"sound-info\">\n        <h4>{sound.name}</h4>\n        <div className=\"sound-tags\">\n          {sound.tags.map((tag, index) => (\n            <span key={index} className=\"sound-tag\">{tag}</span>\n          ))}\n        </div>\n      </div>\n      <div className=\"sound-actions\">\n        <button \n          className=\"play-sound-btn\"\n          onClick={playSound}\n          disabled={isPlaying}\n        >\n          {isPlaying ? '⏸️' : '▶️'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst TrackHeader = ({ track, onRemove, trackHeight, trackIndex }) => {\n  // トラック名を表示番号と元の名前で構成\n  const displayName = `トラック ${trackIndex + 1}`;\n  \n  return (\n    <div className=\"track-header\" style={{ height: trackHeight }}>\n      <div className=\"track-info\">\n        <h4>{displayName}</h4>\n        <div className=\"track-actions\">\n          <button \n            className=\"remove-track-btn\"\n            onClick={() => onRemove(track.id)}\n            title={`${displayName}を削除`}\n            aria-label={`${displayName}を削除`}\n          >\n            🗑️\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Timeline = ({ bpm, isTimeMode, secondsPerBeat }) => {\n  if (isTimeMode) {\n    // 秒数モード: 秒単位で表示\n    const totalSeconds = TIME_MODE_TOTAL_SECONDS;\n    const secondWidth = PIXELS_PER_SECOND;\n    \n    return (\n      <div className=\"timeline\" style={{ minWidth: totalSeconds * secondWidth }}>\n        {Array.from({ length: totalSeconds / 5 }, (_, intervalIndex) => (\n          <div key={intervalIndex} className=\"time-interval\">\n            <div className=\"time-number\">{intervalIndex * 5}秒</div>\n            <div className=\"time-marks\">\n              {Array.from({ length: 5 }, (_, secondIndex) => (\n                <div \n                  key={secondIndex} \n                  className=\"time-mark\"\n                  style={{ width: secondWidth }}\n                >\n                  <div className=\"time-main\">\n                    {intervalIndex * 5 + secondIndex}\n                  </div>\n                  <div className=\"time-sub\">\n                    <div className=\"sub-time-marker\">・</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    // 拍子モード: 従来の小節・拍表示\n    const measures = TOTAL_MEASURES; // 16小節表示\n    const beatsPerMeasure = BEATS_PER_MEASURE; // 4/4拍子\n\n    return (\n      <div className=\"timeline\" style={{ minWidth: TOTAL_MEASURES * MEASURE_WIDTH }}>\n        {Array.from({ length: measures }, (_, measureIndex) => (\n          <div key={measureIndex} className=\"measure\">\n            <div className=\"measure-number\">{measureIndex + 1}</div>\n            <div className=\"beats\">\n              {Array.from({ length: beatsPerMeasure }, (_, beatIndex) => (\n                <div \n                  key={beatIndex} \n                  className=\"beat\"\n                  style={{ width: BEAT_WIDTH }}\n                >\n                  <div className=\"beat-main\">\n                    {beatIndex + 1}\n                  </div>\n                  <div className=\"beat-sub\">\n                    <div className=\"sub-beat-marker\">・</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n};\n\nconst Track = ({ track, onDrop, onDragOver, onRemoveClip, onClipDragStart, onDragEnd, trackHeight, updateDragPreview, isTimeMode, secondsPerBeat }) => {\n  const handleDrop = (e) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const timePosition = e.clientX - rect.left;\n    onDrop(e, track.id, timePosition);\n  };\n\n  // モバイルドロップイベントの処理\n  const handleMobileDrop = useCallback((e) => {\n    const { trackId, timePosition, sound } = e.detail;\n    \n    // 模擬的なドロップイベントを作成\n    const mockDropEvent = {\n      preventDefault: () => {},\n      dataTransfer: {\n        getData: (type) => {\n          if (type === 'application/json') {\n            return JSON.stringify(sound);\n          }\n          return '';\n        }\n      }\n    };\n    \n    onDrop(mockDropEvent, trackId, timePosition);\n  }, [onDrop]);\n\n  // モバイルクリップ移動イベントの処理\n  const handleMobileClipMove = useCallback((e) => {\n    const { clip, newTrackId, timePosition } = e.detail;\n    \n    // 模擬的なドロップイベントを作成\n    const mockDropEvent = {\n      preventDefault: () => {},\n      dataTransfer: {\n        getData: (type) => {\n          if (type === 'text/plain') {\n            return `existing-clip-${clip.id}`;\n          }\n          return '';\n        }\n      }\n    };\n    \n    onDrop(mockDropEvent, newTrackId, timePosition);\n  }, [onDrop]);\n\n  const handleUpdateDragPreview = useCallback((e) => {\n    const { clientX, trackElement } = e.detail;\n    // 親コンポーネントのupdateDragPreview関数を呼び出し\n    if (typeof updateDragPreview === 'function') {\n      updateDragPreview(clientX, trackElement);\n    }\n  }, [updateDragPreview]);\n\n  React.useEffect(() => {\n    const trackElement = document.querySelector(`[data-track-id=\"${track.id}\"]`);\n    if (trackElement) {\n      trackElement.addEventListener('mobileDrop', handleMobileDrop);\n      trackElement.addEventListener('mobileClipMove', handleMobileClipMove);\n      trackElement.addEventListener('updateDragPreview', handleUpdateDragPreview);\n      return () => {\n        trackElement.removeEventListener('mobileDrop', handleMobileDrop);\n        trackElement.removeEventListener('mobileClipMove', handleMobileClipMove);\n        trackElement.removeEventListener('updateDragPreview', handleUpdateDragPreview);\n      };\n    }\n  }, [track.id, handleMobileDrop, handleMobileClipMove, handleUpdateDragPreview]);\n\n  return (\n    <div \n      className=\"track\"\n      style={{ height: trackHeight }}\n      data-track-id={track.id}\n      onDrop={handleDrop}\n      onDragOver={onDragOver}\n    >\n      <div className=\"track-grid\">\n        {isTimeMode ? (\n          // 秒数モード: 秒単位でグリッド線を表示\n          <>\n            {/* 1秒ごとの主要な境界線 */}\n            {Array.from({ length: TIME_MODE_TOTAL_SECONDS }, (_, index) => (\n              <div \n                key={`time-main-${index}`} \n                className={`beat-line beat-line-main ${index === 0 ? 'first-beat' : ''} ${index % 5 === 0 ? 'measure-start' : ''}`} \n                style={{ left: index * PIXELS_PER_SECOND }} \n              />\n            ))}\n            {/* 0.5秒ごとの副次的な境界線 */}\n            {Array.from({ length: TIME_MODE_TOTAL_SECONDS * 2 }, (_, index) => {\n              if (index % 2 === 1) { // 奇数のインデックス（0.5秒、1.5秒など）\n                return (\n                  <div \n                    key={`time-sub-${index}`} \n                    className=\"beat-line beat-line-sub\" \n                    style={{ left: (index * PIXELS_PER_SECOND) / 2 }} \n                  />\n                );\n              }\n              return null;\n            })}\n          </>\n        ) : (\n          // 拍子モード: 従来の拍・小節グリッド\n          <>\n            {/* 表拍（主要な拍）の境界線を表示 */}\n            {Array.from({ length: TOTAL_BEATS }, (_, index) => {\n              const isFirstBeat = index === 0;\n              const isMeasureStart = index % BEATS_PER_MEASURE === 0;\n              const className = `beat-line beat-line-main ${isFirstBeat ? 'first-beat' : ''} ${isMeasureStart ? 'measure-start' : ''}`;\n              return (\n                <div key={`main-${index}`} className={className} style={{ left: index * BEAT_WIDTH }} />\n              );\n            })}\n            {/* 裏拍（8分音符）の境界線を表示 */}\n            {Array.from({ length: TOTAL_BEATS }, (_, index) => (\n              <div key={`sub-${index}`} className=\"beat-line beat-line-sub\" style={{ left: index * BEAT_WIDTH + SUB_BEAT_WIDTH }} />\n            ))}\n          </>\n        )}\n      </div>\n      \n      {track.clips.map(clip => (\n        <AudioClip\n          key={clip.id}\n          clip={clip}\n          trackId={track.id}\n          onRemove={() => onRemoveClip(track.id, clip.id)}\n          onDragStart={onClipDragStart}\n          onDragEnd={onDragEnd}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst AudioClip = ({ clip, trackId, onRemove, onDragStart, onDragEnd }) => {\n  const [waveformData, setWaveformData] = React.useState([]);\n  const [isDragging, setIsDragging] = React.useState(false);\n  const [touchStart, setTouchStart] = React.useState(null);\n  const [touchMove, setTouchMove] = React.useState(null);\n\n  React.useEffect(() => {\n    // clip.soundData が存在する場合のみ波形データを生成\n    if (clip && clip.soundData) {\n      // 簡単な波形データ生成（実際の実装では音声解析が必要）\n      const generateWaveform = () => {\n        const points = 20; // 波形のポイント数\n        const data = [];\n        for (let i = 0; i < points; i++) {\n          data.push(Math.random() * 0.8 + 0.2); // 0.2-1.0の間のランダム値\n        }\n        setWaveformData(data);\n      };\n\n      generateWaveform();\n    }\n  }, [clip, clip?.soundData]);\n\n  // clip.soundData の安全性をチェック（Hooksの後で）\n  if (!clip || !clip.soundData) {\n    console.warn('無効なクリップデータ:', clip);\n    return null; // 無効なクリップは表示しない\n  }\n\n  const handleDragStart = (e) => {\n    e.stopPropagation(); // イベントバブリングを防ぐ\n    \n    // ドラッグデータに既存クリップの情報を設定\n    e.dataTransfer.setData('text/plain', `existing-clip-${clip.id}`);\n    e.dataTransfer.effectAllowed = 'move';\n    \n    // onDragStartコールバックを呼び出し（マウス位置とクリップ要素を渡す）\n    onDragStart(clip, trackId, e.clientX, e.currentTarget);\n  };\n\n  const handleDragEnd = (e) => {\n    // ドラッグ終了時にクリーンアップを呼び出し\n    if (onDragEnd) {\n      onDragEnd(e);\n    }\n  };\n\n  // タッチイベント対応（クリップの移動）\n  const handleTouchStart = (e) => {\n    e.stopPropagation();\n    const touch = e.touches[0];\n    setTouchStart({ x: touch.clientX, y: touch.clientY });\n    setIsDragging(false);\n    \n    // ドラッグモードは移動が確定してから有効化\n  };\n\n  const handleTouchMove = (e) => {\n    if (!touchStart) return;\n    \n    const touch = e.touches[0];\n    const currentPos = { x: touch.clientX, y: touch.clientY };\n    setTouchMove(currentPos);\n    \n    // ドラッグ開始の判定（10px以上移動）\n    const deltaX = Math.abs(currentPos.x - touchStart.x);\n    const deltaY = Math.abs(currentPos.y - touchStart.y);\n    \n    if (!isDragging && (deltaX > 10 || deltaY > 10)) {\n      setIsDragging(true);\n      // スクロールを一時的に無効化（移動が確定してから）\n      document.body.classList.add('dragging');\n      onDragStart(clip, trackId, touchStart.x, e.currentTarget);\n    }\n    \n    if (isDragging) {\n      // passiveイベントではpreventDefaultが使えないので、touchActionで制御\n      \n      // ドロップターゲットのハイライト\n      const elementBelow = document.elementFromPoint(currentPos.x, currentPos.y);\n      const trackElement = elementBelow?.closest('.track');\n      \n      // 既存のハイライトを削除\n      document.querySelectorAll('.track').forEach(track => {\n        track.classList.remove('drag-over');\n      });\n      \n      // 新しいハイライトを追加（自分のトラック以外も含む）\n      if (trackElement) {\n        trackElement.classList.add('drag-over');\n        \n        // ドラッグプレビューも更新（onDragStart時と同様のロジック）\n        if (onDragStart) {\n          // 親コンポーネントのupdateDragPreview関数を呼び出すためのカスタムイベント\n          const dragPreviewEvent = new CustomEvent('updateDragPreview', {\n            detail: {\n              clientX: currentPos.x,\n              trackElement: trackElement\n            }\n          });\n          trackElement.dispatchEvent(dragPreviewEvent);\n        }\n      }\n    }\n  };\n\n  const handleTouchEnd = (e) => {\n    if (isDragging && touchMove) {\n      // ドロップ処理\n      const elementBelow = document.elementFromPoint(touchMove.x, touchMove.y);\n      const trackElement = elementBelow?.closest('.track');\n      \n      if (trackElement) {\n        const newTrackId = parseInt(trackElement.dataset.trackId);\n        const rect = trackElement.getBoundingClientRect();\n        const timePosition = touchMove.x - rect.left;\n        \n        // 既存クリップの移動イベントを発火\n        const moveEvent = new CustomEvent('mobileClipMove', {\n          detail: {\n            clip,\n            originalTrackId: trackId,\n            newTrackId,\n            timePosition\n          }\n        });\n        trackElement.dispatchEvent(moveEvent);\n      }\n    }\n    \n    // クリーンアップ\n    setTouchStart(null);\n    setTouchMove(null);\n    setIsDragging(false);\n    document.body.classList.remove('dragging');\n    \n    // ハイライトを削除\n    document.querySelectorAll('.track').forEach(track => {\n      track.classList.remove('drag-over');\n    });\n    \n    // ドラッグプレビューをクリア（親コンポーネントの状態もリセット）\n    if (onDragEnd) {\n      onDragEnd(null); // nullを渡してガード条件を満たす\n    }\n  };\n\n  return (\n    <div \n      className={`audio-clip ${isDragging ? 'dragging' : ''}`}\n      draggable=\"true\"\n      onDragStart={handleDragStart}\n      onDragEnd={handleDragEnd}\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n      style={{\n        left: clip.startTime,\n        width: isFinite(clip.duration) && clip.duration > 0 ? clip.duration : 400 // デフォルト1小節\n      }}\n    >\n      <div className=\"clip-header\">\n        <span className=\"clip-name\">{clip.soundData?.name || '不明な音素材'}</span>\n        <button \n          className=\"remove-clip-btn\"\n          onClick={onRemove}\n          title=\"クリップを削除\"\n        >\n          ×\n        </button>\n      </div>\n      <div className=\"clip-waveform\">\n        {waveformData.length > 0 ? (\n          <svg className=\"waveform-svg\" width=\"100%\" height=\"30\">\n            {waveformData.map((height, index) => (\n              <rect\n                key={index}\n                x={`${(index / waveformData.length) * 100}%`}\n                y={`${(1 - height) * 15}`}\n                width={`${80 / waveformData.length}%`}\n                height={`${height * 30}`}\n                fill=\"rgba(255, 255, 255, 0.8)\"\n              />\n            ))}\n          </svg>\n        ) : (\n          <div className=\"waveform-placeholder\">🔊</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst Playhead = ({ currentTime }) => {\n  // currentTimeが有効な数値かチェック\n  const safeCurrentTime = isFinite(currentTime) && currentTime >= 0 ? currentTime : 0;\n  \n  return (\n    <div \n      className=\"playhead\"\n      style={{ left: safeCurrentTime }}\n    />\n  );\n};\n\nexport default DAWPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}