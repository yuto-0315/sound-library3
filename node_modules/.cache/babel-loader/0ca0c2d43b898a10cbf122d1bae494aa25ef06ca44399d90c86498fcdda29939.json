{"ast":null,"code":"var _jsxFileName = \"/Users/nakataniyuutomo/Desktop/Programing/\\u30BB\\u3099\\u30DF\\u958B\\u767A/sound-library2/src/pages/DAWPage.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './DAWPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DAWPage = () => {\n  _s();\n  // ユニークID生成用のカウンター\n  const trackIdCounterRef = useRef(1);\n  // トラック名の番号管理用カウンター\n  const trackNameCounterRef = useRef(1);\n  const [tracks, setTracks] = useState(() => [{\n    id: Date.now(),\n    name: 'トラック 1',\n    clips: []\n  }]);\n  const [bpm, setBpm] = useState(120);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [audioContext, setAudioContext] = useState(null);\n  const [trackHeight] = useState(80);\n  const [playingAudios, setPlayingAudios] = useState(new Map());\n  const [startPlayTime, setStartPlayTime] = useState(null);\n  const [error, setError] = useState(null);\n  const [sounds, setSounds] = useState([]);\n  const [showSoundPanel, setShowSoundPanel] = useState(true);\n  const [draggedClip, setDraggedClip] = useState(null);\n  const [dragPreview, setDragPreview] = useState(null);\n  const [draggedSoundDuration, setDraggedSoundDuration] = useState(400); // ドラッグ中の音素材の長さ\n  const [isExporting, setIsExporting] = useState(false); // 音源出力中フラグ\n  const timelineRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  useEffect(() => {\n    // Web Audio API の初期化\n    const ctx = new (window.AudioContext || window.webkitAudioContext)();\n    setAudioContext(ctx);\n\n    // LocalStorageから音素材を読み込み\n    const savedSounds = JSON.parse(localStorage.getItem('soundRecordings') || '[]');\n    console.log('LocalStorageから読み込んだ音素材数:', savedSounds.length);\n\n    // audioDataからBlobを復元\n    const soundsWithBlob = savedSounds.map(sound => {\n      if (sound.audioData) {\n        try {\n          console.log('音声データ復元中:', sound.name, 'データサイズ:', sound.audioData.length);\n          const byteCharacters = atob(sound.audioData.split(',')[1]);\n          const byteNumbers = new Array(byteCharacters.length);\n          for (let i = 0; i < byteCharacters.length; i++) {\n            byteNumbers[i] = byteCharacters.charCodeAt(i);\n          }\n          const byteArray = new Uint8Array(byteNumbers);\n          const blob = new Blob([byteArray], {\n            type: 'audio/wav'\n          });\n          console.log('Blob復元成功:', sound.name, 'サイズ:', blob.size, 'タイプ:', blob.type);\n          return {\n            ...sound,\n            audioBlob: blob\n          };\n        } catch (error) {\n          console.error('音声データの復元に失敗:', sound.name, error);\n          return sound;\n        }\n      }\n      return sound;\n    });\n    setSounds(soundsWithBlob);\n    return () => {\n      if (ctx) {\n        ctx.close();\n      }\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      // グローバル変数をクリーンアップ\n      if (window.currentDraggedSoundBlob) {\n        window.currentDraggedSoundBlob = null;\n      }\n    };\n  }, []);\n\n  // 音声ファイルの継続時間を取得してピクセル幅に変換\n  const getAudioDuration = (audioBlob, currentBpm = bpm) => {\n    return new Promise(async resolve => {\n      if (!audioBlob || !(audioBlob instanceof Blob)) {\n        console.log('無効なaudioBlob - デフォルト値を使用');\n        resolve(400);\n        return;\n      }\n      console.log('audioBlob詳細:', {\n        size: audioBlob.size,\n        type: audioBlob.type,\n        bpm: currentBpm\n      });\n\n      // AudioContextを使用した方法を試す\n      if (audioContext) {\n        try {\n          console.log('AudioContext方式で音声長さを取得中...');\n          const arrayBuffer = await audioBlob.arrayBuffer();\n          const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n          const durationInSeconds = audioBuffer.duration;\n          console.log('AudioContext方式で取得した長さ:', durationInSeconds, '秒');\n          if (isFinite(durationInSeconds) && durationInSeconds > 0) {\n            const pixelsPerSecond = currentBpm / 60 * 100;\n            const widthInPixels = durationInSeconds * pixelsPerSecond;\n            console.log('AudioContext計算結果 - BPM:', currentBpm, '拍/秒:', currentBpm / 60, 'ピクセル/秒:', pixelsPerSecond, '最終幅:', widthInPixels, 'px');\n            resolve(widthInPixels);\n            return;\n          }\n        } catch (error) {\n          console.log('AudioContext方式でエラー、HTML Audio方式にフォールバック:', error);\n        }\n      }\n\n      // HTML Audio方式（フォールバック）\n      const audio = new Audio();\n      const handleLoadedMetadata = () => {\n        const durationInSeconds = audio.duration;\n        console.log('HTML Audio方式で取得した長さ:', durationInSeconds, '秒');\n        console.log('音声ファイルの詳細情報:', {\n          duration: durationInSeconds,\n          readyState: audio.readyState,\n          networkState: audio.networkState,\n          currentTime: audio.currentTime,\n          paused: audio.paused,\n          ended: audio.ended\n        });\n\n        // URLをクリーンアップ\n        URL.revokeObjectURL(audio.src);\n\n        // 有効な数値かチェック（NaN、Infinity、負の値を除外）\n        if (isFinite(durationInSeconds) && durationInSeconds > 0) {\n          // BPMに基づいてピクセル幅を計算\n          // 1拍 = 100px, 1小節 = 4拍 = 400px\n          // 1秒あたりの拍数 = BPM / 60\n          // 1秒あたりのピクセル数 = (BPM / 60) * 100\n          const pixelsPerSecond = currentBpm / 60 * 100;\n          const widthInPixels = durationInSeconds * pixelsPerSecond;\n          console.log('HTML Audio計算結果 - BPM:', currentBpm, '拍/秒:', currentBpm / 60, 'ピクセル/秒:', pixelsPerSecond, '最終幅:', widthInPixels, 'px');\n          resolve(widthInPixels);\n        } else {\n          // デフォルト値（1小節 = 400px）\n          console.log('無効な音声長さのためデフォルト値を使用:', durationInSeconds);\n          resolve(400);\n        }\n      };\n      const handleError = event => {\n        console.log('音声ファイルの読み込みエラー - デフォルト値を使用', event);\n        console.log('エラー詳細:', {\n          error: audio.error,\n          networkState: audio.networkState,\n          readyState: audio.readyState\n        });\n        URL.revokeObjectURL(audio.src);\n        resolve(400);\n      };\n      const handleCanPlayThrough = () => {\n        console.log('canplaythrough イベント発生 - duration:', audio.duration);\n      };\n\n      // タイムアウト処理を追加（10秒でタイムアウト）\n      const timeoutId = setTimeout(() => {\n        console.log('音声ファイルの読み込みタイムアウト - デフォルト値を使用');\n        console.log('タイムアウト時の状態:', {\n          duration: audio.duration,\n          readyState: audio.readyState,\n          networkState: audio.networkState\n        });\n        audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\n        audio.removeEventListener('error', handleError);\n        audio.removeEventListener('canplaythrough', handleCanPlayThrough);\n        URL.revokeObjectURL(audio.src);\n        resolve(400);\n      }, 10000);\n      audio.addEventListener('loadedmetadata', () => {\n        console.log('loadedmetadata イベント発生');\n        clearTimeout(timeoutId);\n        handleLoadedMetadata();\n      });\n      audio.addEventListener('error', event => {\n        console.log('error イベント発生');\n        clearTimeout(timeoutId);\n        handleError(event);\n      });\n      audio.addEventListener('canplaythrough', handleCanPlayThrough);\n      try {\n        const objectUrl = URL.createObjectURL(audioBlob);\n        console.log('ObjectURL作成成功:', objectUrl);\n        audio.src = objectUrl;\n\n        // 手動でloadを呼び出し\n        audio.load();\n      } catch (error) {\n        console.error('createObjectURL エラー:', error);\n        clearTimeout(timeoutId);\n        resolve(400);\n      }\n    });\n  };\n\n  // プレイヘッドのアニメーション更新\n  const updatePlayhead = useCallback(() => {\n    const animate = () => {\n      if (isPlaying && startPlayTime) {\n        const elapsed = (Date.now() - startPlayTime) / 1000; // 経過時間（秒）\n        const pixelsPerSecond = bpm / 60 * 100; // BPMに基づいたピクセル/秒\n        const newCurrentTime = elapsed * pixelsPerSecond;\n\n        // 有効な数値かチェック\n        if (isFinite(newCurrentTime) && newCurrentTime >= 0) {\n          setCurrentTime(newCurrentTime);\n        } else {\n          console.warn('無効なcurrentTime:', newCurrentTime, 'elapsed:', elapsed, 'pixelsPerSecond:', pixelsPerSecond);\n        }\n\n        // 次のフレームを要求\n        animationFrameRef.current = requestAnimationFrame(animate);\n      }\n    };\n    if (isPlaying && startPlayTime) {\n      animate();\n    }\n  }, [isPlaying, startPlayTime, bpm]);\n  useEffect(() => {\n    if (isPlaying) {\n      if (!startPlayTime) {\n        // 再生開始時にstartPlayTimeを設定\n        const pixelsPerSecond = bpm / 60 * 100;\n        if (isFinite(pixelsPerSecond) && pixelsPerSecond > 0) {\n          const timeInSeconds = currentTime / pixelsPerSecond;\n          if (isFinite(timeInSeconds) && timeInSeconds >= 0) {\n            setStartPlayTime(Date.now() - timeInSeconds * 1000);\n          } else {\n            setStartPlayTime(Date.now());\n          }\n        } else {\n          setStartPlayTime(Date.now());\n        }\n      }\n    } else {\n      // 再生停止時にアニメーションをクリア\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n        animationFrameRef.current = null;\n      }\n      setStartPlayTime(null);\n    }\n  }, [isPlaying, bpm, currentTime]);\n\n  // startPlayTimeが設定されたときにアニメーションを開始\n  useEffect(() => {\n    if (isPlaying && startPlayTime) {\n      updatePlayhead();\n    }\n  }, [isPlaying, startPlayTime, updatePlayhead]);\n\n  // BPM変更時のハンドラー\n  const handleBpmChange = async newBpm => {\n    setBpm(newBpm);\n\n    // 既存のクリップのdurationを新しいBPMで再計算\n    const updatedTracks = await Promise.all(tracks.map(async track => {\n      const updatedClips = await Promise.all(track.clips.map(async clip => {\n        if (clip.soundData && clip.soundData.audioBlob) {\n          try {\n            const newDuration = await getAudioDuration(clip.soundData.audioBlob, newBpm);\n            return {\n              ...clip,\n              duration: newDuration\n            };\n          } catch (error) {\n            console.warn('クリップのduration更新に失敗:', error);\n            return clip;\n          }\n        }\n        return clip;\n      }));\n      return {\n        ...track,\n        clips: updatedClips\n      };\n    }));\n    setTracks(updatedTracks);\n  };\n\n  // プロジェクト保存機能\n  const saveProject = () => {\n    try {\n      const projectData = {\n        version: '1.0',\n        bpm: bpm,\n        tracks: tracks,\n        sounds: sounds.map(sound => ({\n          ...sound,\n          audioBlob: null,\n          // Blobは別途保存\n          audioData: sound.audioData // base64データを保持\n        })),\n        timestamp: Date.now(),\n        trackNameCounter: trackNameCounterRef.current,\n        trackIdCounter: trackIdCounterRef.current\n      };\n      const projectJson = JSON.stringify(projectData, null, 2);\n      const blob = new Blob([projectJson], {\n        type: 'application/json'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `music-project-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      console.log('プロジェクトを保存しました');\n    } catch (error) {\n      console.error('プロジェクト保存エラー:', error);\n      setError('プロジェクトの保存に失敗しました。');\n    }\n  };\n\n  // プロジェクト読み込み機能\n  const loadProject = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const projectData = JSON.parse(e.target.result);\n\n        // バージョンチェック\n        if (!projectData.version) {\n          throw new Error('不正なプロジェクトファイルです');\n        }\n\n        // 音声データ復元用のヘルパー関数\n        const restoreAudioBlob = soundData => {\n          if (soundData && soundData.audioData) {\n            try {\n              const byteCharacters = atob(soundData.audioData.split(',')[1]);\n              const byteNumbers = new Array(byteCharacters.length);\n              for (let i = 0; i < byteCharacters.length; i++) {\n                byteNumbers[i] = byteCharacters.charCodeAt(i);\n              }\n              const byteArray = new Uint8Array(byteNumbers);\n              const blob = new Blob([byteArray], {\n                type: 'audio/wav'\n              });\n              return {\n                ...soundData,\n                audioBlob: blob\n              };\n            } catch (error) {\n              console.error('音声データの復元に失敗:', soundData.name || 'unknown', error);\n              return soundData;\n            }\n          }\n          return soundData;\n        };\n\n        // BPMを復元\n        setBpm(projectData.bpm || 120);\n\n        // トラックを復元（クリップ内の音声データも復元）\n        if (projectData.tracks) {\n          const restoredTracks = projectData.tracks.map(track => ({\n            ...track,\n            clips: track.clips.map(clip => ({\n              ...clip,\n              soundData: restoreAudioBlob(clip.soundData)\n            }))\n          }));\n          setTracks(restoredTracks);\n          console.log('トラックデータを復元しました:', restoredTracks.length, 'トラック');\n        }\n\n        // カウンターを復元\n        if (projectData.trackNameCounter) {\n          trackNameCounterRef.current = projectData.trackNameCounter;\n        }\n        if (projectData.trackIdCounter) {\n          trackIdCounterRef.current = projectData.trackIdCounter;\n        }\n\n        // 音素材を復元\n        if (projectData.sounds) {\n          const restoredSounds = projectData.sounds.map(sound => restoreAudioBlob(sound));\n          setSounds(restoredSounds);\n          console.log('音素材を復元しました:', restoredSounds.length, '個');\n        }\n        console.log('プロジェクトを読み込みました');\n        setError(null);\n      } catch (error) {\n        console.error('プロジェクト読み込みエラー:', error);\n        setError('プロジェクトファイルの読み込みに失敗しました。ファイルが正しいか確認してください。');\n      }\n    };\n    reader.readAsText(file);\n    // ファイル選択をリセット\n    event.target.value = '';\n  };\n\n  // 音源出力機能\n  const exportAudio = async () => {\n    if (!audioContext) {\n      setError('AudioContextが初期化されていません。');\n      return;\n    }\n    setIsExporting(true);\n    try {\n      // 全トラックの全クリップの最大終了時間を計算\n      let maxDuration = 0;\n      tracks.forEach(track => {\n        track.clips.forEach(clip => {\n          const pixelsPerSecond = bpm / 60 * 100;\n          const clipStartTimeInSeconds = clip.startTime / pixelsPerSecond;\n          const clipDurationInSeconds = clip.duration / pixelsPerSecond;\n          const clipEndTime = clipStartTimeInSeconds + clipDurationInSeconds;\n          maxDuration = Math.max(maxDuration, clipEndTime);\n        });\n      });\n      if (maxDuration === 0) {\n        setError('出力する音声がありません。音素材を配置してください。');\n        setIsExporting(false);\n        return;\n      }\n\n      // 出力用AudioContextを作成（44.1kHz）\n      const exportContext = new AudioContext({\n        sampleRate: 44100\n      });\n      const bufferLength = Math.ceil(maxDuration * exportContext.sampleRate);\n      const outputBuffer = exportContext.createBuffer(2, bufferLength, exportContext.sampleRate);\n      const leftChannel = outputBuffer.getChannelData(0);\n      const rightChannel = outputBuffer.getChannelData(1);\n\n      // 各トラックの各クリップを処理\n      for (const track of tracks) {\n        for (const clip of track.clips) {\n          if (clip.soundData && clip.soundData.audioBlob) {\n            try {\n              const arrayBuffer = await clip.soundData.audioBlob.arrayBuffer();\n              const audioBuffer = await exportContext.decodeAudioData(arrayBuffer);\n              const pixelsPerSecond = bpm / 60 * 100;\n              const startTimeInSamples = Math.floor(clip.startTime / pixelsPerSecond * exportContext.sampleRate);\n\n              // 音声をミックス\n              for (let channel = 0; channel < Math.min(audioBuffer.numberOfChannels, 2); channel++) {\n                const sourceData = audioBuffer.getChannelData(channel);\n                const targetData = channel === 0 ? leftChannel : rightChannel;\n                for (let i = 0; i < sourceData.length && startTimeInSamples + i < targetData.length; i++) {\n                  targetData[startTimeInSamples + i] += sourceData[i];\n                }\n              }\n\n              // モノラル音源の場合は両チャンネルにコピー\n              if (audioBuffer.numberOfChannels === 1) {\n                const sourceData = audioBuffer.getChannelData(0);\n                for (let i = 0; i < sourceData.length && startTimeInSamples + i < rightChannel.length; i++) {\n                  rightChannel[startTimeInSamples + i] += sourceData[i];\n                }\n              }\n            } catch (error) {\n              console.error('クリップの処理エラー:', error);\n            }\n          }\n        }\n      }\n\n      // WAVファイルとして出力\n      const wavBlob = audioBufferToWav(outputBuffer);\n      const url = URL.createObjectURL(wavBlob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `exported-music-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.wav`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      console.log('音源を出力しました');\n      await exportContext.close();\n    } catch (error) {\n      console.error('音源出力エラー:', error);\n      setError('音源の出力に失敗しました。');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  // AudioBufferをWAVファイルに変換\n  const audioBufferToWav = buffer => {\n    const length = buffer.length;\n    const numberOfChannels = buffer.numberOfChannels;\n    const sampleRate = buffer.sampleRate;\n    const bytesPerSample = 2;\n    const blockAlign = numberOfChannels * bytesPerSample;\n    const byteRate = sampleRate * blockAlign;\n    const dataSize = length * blockAlign;\n    const bufferSize = 44 + dataSize;\n    const arrayBuffer = new ArrayBuffer(bufferSize);\n    const view = new DataView(arrayBuffer);\n\n    // WAVファイルヘッダー\n    const writeString = (offset, string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    writeString(0, 'RIFF');\n    view.setUint32(4, bufferSize - 8, true);\n    writeString(8, 'WAVE');\n    writeString(12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, numberOfChannels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, byteRate, true);\n    view.setUint16(32, blockAlign, true);\n    view.setUint16(34, bytesPerSample * 8, true);\n    writeString(36, 'data');\n    view.setUint32(40, dataSize, true);\n\n    // 音声データ\n    let offset = 44;\n    for (let i = 0; i < length; i++) {\n      for (let channel = 0; channel < numberOfChannels; channel++) {\n        const sample = buffer.getChannelData(channel)[i];\n        const intSample = Math.max(-1, Math.min(1, sample)) * 0x7FFF;\n        view.setInt16(offset, intSample, true);\n        offset += 2;\n      }\n    }\n    return new Blob([arrayBuffer], {\n      type: 'audio/wav'\n    });\n  };\n  const addTrack = () => {\n    // より確実にユニークなIDを生成\n    trackIdCounterRef.current += 1;\n    const uniqueId = Date.now() + trackIdCounterRef.current;\n\n    // トラック名の番号を増加（削除されても番号は戻らない）\n    trackNameCounterRef.current += 1;\n    const trackName = `トラック ${trackNameCounterRef.current}`;\n    const newTrack = {\n      id: uniqueId,\n      name: trackName,\n      clips: []\n    };\n    setTracks([...tracks, newTrack]);\n  };\n  const removeTrack = trackId => {\n    if (tracks.length > 1) {\n      setTracks(tracks.filter(track => track.id !== trackId));\n    }\n  };\n  const handleDrop = async (e, trackId, timePosition) => {\n    e.preventDefault();\n    setDragPreview(null);\n    console.log('ドロップ処理開始:', {\n      trackId,\n      timePosition,\n      draggedClip\n    });\n    try {\n      // 8分音符に合わせて位置を調整（50px単位）\n      const subBeatWidth = 50; // 8分音符の幅（px）\n      const snappedPosition = Math.round(timePosition / subBeatWidth) * subBeatWidth;\n\n      // 既存のクリップの移動かどうかチェック\n      if (draggedClip) {\n        console.log('既存クリップの移動:', draggedClip.id, '元トラック:', draggedClip.originalTrackId, '新トラック:', trackId);\n\n        // 既存クリップの移動\n        const updatedClip = {\n          ...draggedClip,\n          startTime: snappedPosition,\n          trackId: trackId\n        };\n        setTracks(tracks.map(track => {\n          if (track.id === draggedClip.originalTrackId && track.id === trackId) {\n            // 同じトラック内での移動\n            console.log('同じトラック内での移動');\n            return {\n              ...track,\n              clips: track.clips.map(clip => clip.id === draggedClip.id ? updatedClip : clip)\n            };\n          } else if (track.id === draggedClip.originalTrackId) {\n            // 元のトラックからクリップを削除\n            console.log('元のトラックからクリップを削除');\n            return {\n              ...track,\n              clips: track.clips.filter(clip => clip.id !== draggedClip.id)\n            };\n          } else if (track.id === trackId) {\n            // 新しいトラックにクリップを追加\n            console.log('新しいトラックにクリップを追加');\n            return {\n              ...track,\n              clips: [...track.clips, updatedClip]\n            };\n          }\n          return track;\n        }));\n        setDraggedClip(null);\n        return;\n      }\n\n      // 新しい音素材の配置\n      const soundData = JSON.parse(e.dataTransfer.getData('application/json'));\n\n      // グローバル変数からaudioBlobを復元\n      if (window.currentDraggedSoundBlob) {\n        soundData.audioBlob = window.currentDraggedSoundBlob;\n        window.currentDraggedSoundBlob = null; // クリーンアップ\n      }\n      console.log('新しい音素材のドロップ:', {\n        soundData,\n        hasAudioBlob: !!soundData.audioBlob\n      });\n\n      // 音声の実際の継続時間を取得（現在のBPMに基づいて）\n      let duration = 400; // デフォルト値（1小節）\n      if (soundData.audioBlob) {\n        try {\n          duration = await getAudioDuration(soundData.audioBlob, bpm);\n          console.log('取得したduration:', duration, 'pixels (BPM:', bpm, ')');\n        } catch (error) {\n          console.warn('音声継続時間の取得に失敗しました:', error);\n        }\n      }\n\n      // durationが有効な値かチェック\n      if (!isFinite(duration) || duration <= 0) {\n        console.warn('無効なduration:', duration, 'デフォルト値を使用');\n        duration = 400; // 1小節分\n      }\n      const newClip = {\n        id: Date.now(),\n        soundData: soundData,\n        startTime: snappedPosition,\n        duration: duration,\n        trackId: trackId\n      };\n      console.log('作成されたクリップ:', newClip);\n      setTracks(tracks.map(track => track.id === trackId ? {\n        ...track,\n        clips: [...track.clips, newClip]\n      } : track));\n    } catch (error) {\n      console.error('ドロップエラー:', error);\n      setError('音素材の配置に失敗しました。再度お試しください。');\n    }\n  };\n  const handleDragOver = e => {\n    var _timelineRef$current;\n    e.preventDefault();\n\n    // ドラッグされているのが既存クリップか新しい音素材かで処理を分ける\n    if (draggedClip) {\n      e.dataTransfer.dropEffect = 'move';\n    } else {\n      e.dataTransfer.dropEffect = 'copy';\n    }\n\n    // ドラッグプレビューの更新\n    const rect = e.currentTarget.getBoundingClientRect();\n    const timePosition = e.clientX - rect.left;\n    const beatWidth = 100;\n    const snappedPosition = Math.round(timePosition / beatWidth) * beatWidth;\n    const trackElement = e.currentTarget;\n    const trackRect = trackElement.getBoundingClientRect();\n    const tracksAreaRect = (_timelineRef$current = timelineRef.current) === null || _timelineRef$current === void 0 ? void 0 : _timelineRef$current.getBoundingClientRect();\n    if (tracksAreaRect) {\n      const relativeTop = trackRect.top - tracksAreaRect.top;\n      const trackId = parseInt(trackElement.dataset.trackId);\n\n      // プレビュー幅を決定\n      let previewWidth = 400; // デフォルト値（1小節）\n\n      if (draggedClip) {\n        // 既存クリップの場合\n        previewWidth = isFinite(draggedClip.duration) && draggedClip.duration > 0 ? draggedClip.duration : 400;\n      } else {\n        // 新しい音素材の場合、事前に計算された長さを使用\n        previewWidth = draggedSoundDuration;\n      }\n      setDragPreview({\n        left: snappedPosition,\n        top: relativeTop + 10,\n        width: previewWidth,\n        trackId: trackId\n      });\n    }\n  };\n  const removeClip = (trackId, clipId) => {\n    setTracks(tracks.map(track => track.id === trackId ? {\n      ...track,\n      clips: track.clips.filter(clip => clip.id !== clipId)\n    } : track));\n  };\n\n  // クリップのドラッグ開始\n  const handleClipDragStart = (clip, originalTrackId) => {\n    console.log('クリップドラッグ開始:', clip.id, 'トラック:', originalTrackId);\n    setDraggedClip({\n      ...clip,\n      originalTrackId\n    });\n  };\n\n  // ドラッグ終了時のクリーンアップ\n  const handleDragEnd = e => {\n    // ドロップが正常に処理されなかった場合、元の状態を保持\n    if (draggedClip && e.dataTransfer.dropEffect === 'none') {\n      console.log('ドラッグがキャンセルされました。元の位置を保持します。');\n    }\n    setDraggedClip(null);\n    setDragPreview(null);\n    setDraggedSoundDuration(400); // リセット\n  };\n  const play = async () => {\n    try {\n      // AudioContextが中断されている場合は再開\n      if (audioContext && audioContext.state === 'suspended') {\n        await audioContext.resume();\n      }\n      setIsPlaying(true);\n\n      // 現在の時間位置に基づいて、再生すべきクリップを見つける\n      const pixelsPerSecond = bpm / 60 * 100;\n      const currentTimeInSeconds = currentTime / pixelsPerSecond;\n\n      // 各トラックのクリップを再生\n      const newPlayingAudios = new Map();\n      tracks.forEach(track => {\n        track.clips.forEach(clip => {\n          // clip.durationが有効な値かチェック\n          if (!isFinite(clip.duration) || clip.duration <= 0) {\n            console.warn('無効なclip.duration:', clip.duration, 'クリップをスキップします');\n            return;\n          }\n          const clipStartTimeInSeconds = clip.startTime / pixelsPerSecond;\n          const clipEndTimeInSeconds = clipStartTimeInSeconds + clip.duration / pixelsPerSecond;\n\n          // 計算結果が有効かチェック\n          if (!isFinite(clipStartTimeInSeconds) || !isFinite(clipEndTimeInSeconds)) {\n            console.warn('無効な時間計算:', {\n              clipStartTimeInSeconds,\n              clipEndTimeInSeconds\n            });\n            return;\n          }\n\n          // 現在の時間位置がクリップの範囲内または今後再生される場合\n          if (clipEndTimeInSeconds > currentTimeInSeconds) {\n            const delay = Math.max(0, clipStartTimeInSeconds - currentTimeInSeconds);\n            if (isFinite(delay) && delay >= 0) {\n              scheduleClipPlayback(clip, delay * 1000, newPlayingAudios);\n            }\n          }\n        });\n      });\n      setPlayingAudios(newPlayingAudios);\n    } catch (error) {\n      console.error('再生エラー:', error);\n      setError('音声の再生に失敗しました。ブラウザで音声が有効になっているか確認してください。');\n    }\n  };\n  const scheduleClipPlayback = (clip, delayMs, playingAudiosMap) => {\n    var _clip$soundData;\n    console.log('scheduleClipPlayback:', {\n      clip,\n      hasAudioBlob: !!((_clip$soundData = clip.soundData) !== null && _clip$soundData !== void 0 && _clip$soundData.audioBlob)\n    });\n    if (clip.soundData && clip.soundData.audioBlob && clip.soundData.audioBlob instanceof Blob) {\n      try {\n        const audio = new Audio();\n        const audioUrl = URL.createObjectURL(clip.soundData.audioBlob);\n        audio.src = audioUrl;\n        const timeoutId = setTimeout(() => {\n          audio.play().catch(error => {\n            console.error('音声再生エラー:', error);\n            URL.revokeObjectURL(audioUrl); // メモリリークを防ぐ\n          });\n        }, delayMs);\n\n        // 音声終了時にURLを解放\n        audio.addEventListener('ended', () => {\n          URL.revokeObjectURL(audioUrl);\n        });\n        playingAudiosMap.set(clip.id, {\n          audio,\n          timeoutId,\n          audioUrl\n        });\n      } catch (error) {\n        console.error('createObjectURL エラー:', error, 'audioBlob:', clip.soundData.audioBlob);\n      }\n    } else {\n      var _clip$soundData2, _clip$soundData3, _clip$soundData4, _clip$soundData5, _clip$soundData6;\n      console.warn('audioBlobが無効です。クリップ情報:', {\n        clipId: clip.id,\n        soundDataName: (_clip$soundData2 = clip.soundData) === null || _clip$soundData2 === void 0 ? void 0 : _clip$soundData2.name,\n        hasAudioData: !!((_clip$soundData3 = clip.soundData) !== null && _clip$soundData3 !== void 0 && _clip$soundData3.audioData),\n        hasAudioBlob: !!((_clip$soundData4 = clip.soundData) !== null && _clip$soundData4 !== void 0 && _clip$soundData4.audioBlob),\n        audioBlobType: typeof ((_clip$soundData5 = clip.soundData) === null || _clip$soundData5 === void 0 ? void 0 : _clip$soundData5.audioBlob),\n        isInstanceOfBlob: ((_clip$soundData6 = clip.soundData) === null || _clip$soundData6 === void 0 ? void 0 : _clip$soundData6.audioBlob) instanceof Blob\n      });\n\n      // AudioBlobが無効な場合、audioDataから復元を試行\n      if (clip.soundData && clip.soundData.audioData && !clip.soundData.audioBlob) {\n        console.log('audioDataからBlobを再作成中...');\n        try {\n          const byteCharacters = atob(clip.soundData.audioData.split(',')[1]);\n          const byteNumbers = new Array(byteCharacters.length);\n          for (let i = 0; i < byteCharacters.length; i++) {\n            byteNumbers[i] = byteCharacters.charCodeAt(i);\n          }\n          const byteArray = new Uint8Array(byteNumbers);\n          const blob = new Blob([byteArray], {\n            type: 'audio/wav'\n          });\n\n          // クリップのsoundDataを更新\n          clip.soundData.audioBlob = blob;\n\n          // 再帰的に再試行\n          scheduleClipPlayback(clip, delayMs, playingAudiosMap);\n          return;\n        } catch (restoreError) {\n          console.error('audioDataからのBlob復元に失敗:', restoreError);\n        }\n      }\n    }\n  };\n  const pause = () => {\n    setIsPlaying(false);\n\n    // 再生中の音声を一時停止\n    playingAudios.forEach(({\n      audio,\n      timeoutId,\n      audioUrl\n    }) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      if (!audio.paused) {\n        audio.pause();\n      }\n      // URLを解放\n      if (audioUrl) {\n        URL.revokeObjectURL(audioUrl);\n      }\n    });\n  };\n  const stop = () => {\n    setIsPlaying(false);\n    setCurrentTime(0);\n\n    // 再生中の音声を停止\n    playingAudios.forEach(({\n      audio,\n      timeoutId,\n      audioUrl\n    }) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      audio.pause();\n      audio.currentTime = 0;\n      // URLを解放\n      if (audioUrl) {\n        URL.revokeObjectURL(audioUrl);\n      }\n    });\n    setPlayingAudios(new Map());\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"daw-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83C\\uDFB9 \\u97F3\\u697D\\u3065\\u304F\\u308A\\u30DA\\u30FC\\u30B8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 896,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u97F3\\u7D20\\u6750\\u3092\\u30C9\\u30E9\\u30C3\\u30B0&\\u30C9\\u30ED\\u30C3\\u30D7\\u3057\\u3066\\u97F3\\u697D\\u3092\\u4F5C\\u308A\\u307E\\u3057\\u3087\\u3046\\uFF01\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 897,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u26A0\\uFE0F \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 901,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setError(null),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 902,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 900,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"daw-controls card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transport-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `transport-btn play-btn ${isPlaying ? 'playing' : ''}`,\n          onClick: isPlaying ? pause : play,\n          children: isPlaying ? '⏸️' : '▶️'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"transport-btn stop-btn\",\n          onClick: stop,\n          children: \"\\u23F9\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 914,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 907,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bpm-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"bpm\",\n          children: \"\\uD83C\\uDFB5 BPM:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 920,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"bpm\",\n          type: \"number\",\n          value: bpm,\n          onChange: e => handleBpmChange(parseInt(e.target.value)),\n          min: \"60\",\n          max: \"200\",\n          className: \"bpm-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 921,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 919,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"track-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button-primary\",\n          onClick: addTrack,\n          children: \"\\u2795 \\u30C8\\u30E9\\u30C3\\u30AF\\u8FFD\\u52A0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 933,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button-secondary\",\n          onClick: () => setShowSoundPanel(!showSoundPanel),\n          children: showSoundPanel ? '🎵 音素材を隠す' : '🎵 音素材を表示'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 936,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 932,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button-secondary\",\n          onClick: saveProject,\n          children: \"\\uD83D\\uDCBE \\u30D7\\u30ED\\u30B8\\u30A7\\u30AF\\u30C8\\u4FDD\\u5B58\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 945,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"button-secondary file-input-label\",\n          children: [\"\\uD83D\\uDCC1 \\u30D7\\u30ED\\u30B8\\u30A7\\u30AF\\u30C8\\u8AAD\\u307F\\u8FBC\\u307F\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".json\",\n            onChange: loadProject,\n            style: {\n              display: 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 950,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 948,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button-primary\",\n          onClick: exportAudio,\n          disabled: isExporting,\n          children: isExporting ? '🔄 出力中...' : '🎧 音源出力'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 957,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 944,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 906,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"daw-main-area\",\n      children: [showSoundPanel && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sound-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83C\\uDFB5 \\u97F3\\u7D20\\u6750\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 970,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sound-list\",\n          children: sounds.length > 0 ? sounds.map(sound => /*#__PURE__*/_jsxDEV(SoundItem, {\n            sound: sound,\n            onDragStart: async sound => {\n              // ドラッグ開始時に音声の長さを計算\n              if (sound.audioBlob) {\n                try {\n                  const duration = await getAudioDuration(sound.audioBlob, bpm);\n                  setDraggedSoundDuration(duration);\n                } catch (error) {\n                  console.warn('ドラッグ時の音声長さ計算に失敗:', error);\n                  setDraggedSoundDuration(400);\n                }\n              } else {\n                setDraggedSoundDuration(400);\n              }\n            }\n          }, sound.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 974,\n            columnNumber: 19\n          }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-sounds\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\u97F3\\u7D20\\u6750\\u304C\\u3042\\u308A\\u307E\\u305B\\u3093\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 995,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\u300C\\u97F3\\u3092\\u96C6\\u3081\\u308B\\u300D\\u30DA\\u30FC\\u30B8\\u3067\\u97F3\\u3092\\u9332\\u97F3\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 996,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 994,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 971,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 969,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"daw-workspace\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track-headers\",\n          children: tracks.map(track => /*#__PURE__*/_jsxDEV(TrackHeader, {\n            track: track,\n            onRemove: removeTrack,\n            trackHeight: trackHeight\n          }, track.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1006,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1004,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timeline-container\",\n          children: [/*#__PURE__*/_jsxDEV(Timeline, {\n            bpm: bpm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1016,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tracks-area\",\n            ref: timelineRef,\n            children: [/*#__PURE__*/_jsxDEV(Playhead, {\n              currentTime: currentTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1018,\n              columnNumber: 15\n            }, this), dragPreview && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"drag-preview\",\n              style: {\n                left: dragPreview.left,\n                top: dragPreview.top,\n                width: dragPreview.width\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1020,\n              columnNumber: 17\n            }, this), tracks.map(track => /*#__PURE__*/_jsxDEV(Track, {\n              track: track,\n              onDrop: handleDrop,\n              onDragOver: handleDragOver,\n              onRemoveClip: removeClip,\n              onClipDragStart: handleClipDragStart,\n              onDragEnd: handleDragEnd,\n              trackHeight: trackHeight,\n              bpm: bpm\n            }, track.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1030,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1017,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1015,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1003,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 967,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"instructions card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDCD6 \\u4F7F\\u3044\\u65B9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1048,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u5DE6\\u5074\\u306E\\u97F3\\u7D20\\u6750\\u30D1\\u30CD\\u30EB\\u304B\\u3089\\u97F3\\u7D20\\u6750\\u3092\\u30C8\\u30E9\\u30C3\\u30AF\\u306B\\u30C9\\u30E9\\u30C3\\u30B0&\\u30C9\\u30ED\\u30C3\\u30D7\\u3057\\u3066\\u914D\\u7F6E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1050,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u914D\\u7F6E\\u6E08\\u307F\\u306E\\u97F3\\u7D20\\u6750\\u3082\\u30C9\\u30E9\\u30C3\\u30B0\\u3057\\u3066\\u5225\\u306E\\u5834\\u6240\\u306B\\u79FB\\u52D5\\u3067\\u304D\\u307E\\u3059\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1051,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u30C9\\u30E9\\u30C3\\u30B0\\u4E2D\\u306F\\u914D\\u7F6E\\u4E88\\u5B9A\\u4F4D\\u7F6E\\u306B\\u9752\\u3044\\u5F71\\u304C\\u8868\\u793A\\u3055\\u308C\\u307E\\u3059\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1052,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u97F3\\u7D20\\u6750\\u306F\\u62CD\\u306B\\u5408\\u308F\\u305B\\u3066\\u81EA\\u52D5\\u7684\\u306B\\u914D\\u7F6E\\u3055\\u308C\\u307E\\u3059\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1053,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u97F3\\u7D20\\u6750\\u30D1\\u30CD\\u30EB\\u306E\\u25B6\\uFE0F\\u30DC\\u30BF\\u30F3\\u3067\\u500B\\u5225\\u306B\\u97F3\\u3092\\u78BA\\u8A8D\\u3067\\u304D\\u307E\\u3059\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1054,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u25B6\\uFE0F\\u30DC\\u30BF\\u30F3\\u3067\\u518D\\u751F\\u3001\\u23F8\\uFE0F\\u30DC\\u30BF\\u30F3\\u3067\\u4E00\\u6642\\u505C\\u6B62\\u3001\\u23F9\\uFE0F\\u30DC\\u30BF\\u30F3\\u3067\\u505C\\u6B62\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1055,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"BPM\\u3092\\u5909\\u66F4\\u3057\\u3066\\u97F3\\u697D\\u306E\\u901F\\u3055\\u3092\\u8ABF\\u6574\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1056,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u30C8\\u30E9\\u30C3\\u30AF\\u3092\\u8FFD\\u52A0\\u3057\\u3066\\u8907\\u6570\\u306E\\u97F3\\u3092\\u91CD\\u306D\\u308B\\u3053\\u3068\\u304C\\u3067\\u304D\\u307E\\u3059\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1057,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uD83D\\uDCBE \\u30D7\\u30ED\\u30B8\\u30A7\\u30AF\\u30C8\\u4FDD\\u5B58:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1058,\n            columnNumber: 15\n          }, this), \" \\u7DE8\\u96C6\\u4E2D\\u306E\\u30C7\\u30FC\\u30BF\\u3092JSON\\u30D5\\u30A1\\u30A4\\u30EB\\u3068\\u3057\\u3066\\u4FDD\\u5B58\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1058,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uD83D\\uDCC1 \\u30D7\\u30ED\\u30B8\\u30A7\\u30AF\\u30C8\\u8AAD\\u307F\\u8FBC\\u307F:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1059,\n            columnNumber: 15\n          }, this), \" \\u4FDD\\u5B58\\u3057\\u305F\\u30D7\\u30ED\\u30B8\\u30A7\\u30AF\\u30C8\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u8AAD\\u307F\\u8FBC\\u3093\\u3067\\u7DE8\\u96C6\\u3092\\u518D\\u958B\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1059,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uD83C\\uDFA7 \\u97F3\\u6E90\\u51FA\\u529B:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1060,\n            columnNumber: 15\n          }, this), \" \\u5B8C\\u6210\\u3057\\u305F\\u697D\\u66F2\\u3092WAV\\u30D5\\u30A1\\u30A4\\u30EB\\u3068\\u3057\\u3066\\u51FA\\u529B\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1060,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1049,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1047,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 895,\n    columnNumber: 5\n  }, this);\n};\n_s(DAWPage, \"OrYZoJM/LQ4sBcXYdttHFm1c2/Q=\");\n_c = DAWPage;\nconst SoundItem = ({\n  sound,\n  onDragStart\n}) => {\n  _s2();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const handleDragStart = e => {\n    // audioBlob以外のデータをJSON文字列として設定\n    const soundDataForTransfer = {\n      ...sound,\n      audioBlob: null // Blobは直接シリアライズできないため一時的にnullに\n    };\n    e.dataTransfer.setData('application/json', JSON.stringify(soundDataForTransfer));\n    e.dataTransfer.effectAllowed = 'copy';\n\n    // 実際のaudioBlobは別途グローバル変数で保持\n    window.currentDraggedSoundBlob = sound.audioBlob;\n\n    // 親コンポーネントのonDragStart関数を呼び出し（音声の長さを計算）\n    if (onDragStart) {\n      onDragStart(sound);\n    }\n  };\n  const playSound = () => {\n    if (sound.audioBlob && !isPlaying) {\n      const audio = new Audio();\n      audio.src = URL.createObjectURL(sound.audioBlob);\n      audio.play().then(() => {\n        setIsPlaying(true);\n        audio.addEventListener('ended', () => {\n          setIsPlaying(false);\n        });\n      }).catch(error => {\n        console.error('音声再生エラー:', error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sound-item\",\n    draggable: \"true\",\n    onDragStart: handleDragStart,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sound-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: sound.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sound-tags\",\n        children: sound.tags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"sound-tag\",\n          children: tag\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1116,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sound-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"play-sound-btn\",\n        onClick: playSound,\n        disabled: isPlaying,\n        children: isPlaying ? '⏸️' : '▶️'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1107,\n    columnNumber: 5\n  }, this);\n};\n_s2(SoundItem, \"dxr5RgzQJlMZkbQdHY9iHZ+FF0w=\");\n_c2 = SoundItem;\nconst TrackHeader = ({\n  track,\n  onRemove,\n  trackHeight\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"track-header\",\n    style: {\n      height: trackHeight\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"track-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: track.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"track-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"remove-track-btn\",\n          onClick: () => onRemove(track.id),\n          title: \"\\u30C8\\u30E9\\u30C3\\u30AF\\u3092\\u524A\\u9664\",\n          children: \"\\uD83D\\uDDD1\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1139,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1136,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1135,\n    columnNumber: 5\n  }, this);\n};\n_c3 = TrackHeader;\nconst Timeline = ({\n  bpm\n}) => {\n  const measures = 16; // 16小節表示\n  const beatsPerMeasure = 4; // 4/4拍子\n  const beatWidth = 100; // 1拍の幅\n  const subBeatWidth = beatWidth / 2; // 8分音符（裏拍）の幅\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timeline\",\n    children: Array.from({\n      length: measures\n    }, (_, measureIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"measure\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"measure-number\",\n        children: measureIndex + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1162,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"beats\",\n        children: Array.from({\n          length: beatsPerMeasure\n        }, (_, beatIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"beat\",\n          style: {\n            width: beatWidth\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"beat-main\",\n            children: beatIndex + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1170,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"beat-sub\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sub-beat-marker\",\n              children: \"\\u30FB\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1174,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1173,\n            columnNumber: 17\n          }, this)]\n        }, beatIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1165,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1163,\n        columnNumber: 11\n      }, this)]\n    }, measureIndex, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1161,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1159,\n    columnNumber: 5\n  }, this);\n};\n_c4 = Timeline;\nconst Track = ({\n  track,\n  onDrop,\n  onDragOver,\n  onRemoveClip,\n  onClipDragStart,\n  onDragEnd,\n  trackHeight,\n  bpm\n}) => {\n  const handleDrop = e => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const timePosition = e.clientX - rect.left;\n    onDrop(e, track.id, timePosition);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"track\",\n    style: {\n      height: trackHeight\n    },\n    \"data-track-id\": track.id,\n    onDrop: handleDrop,\n    onDragOver: onDragOver,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"track-grid\",\n      children: [Array.from({\n        length: 64\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"beat-line beat-line-main\",\n        style: {\n          left: index * 100\n        }\n      }, `main-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1203,\n        columnNumber: 11\n      }, this)), Array.from({\n        length: 64\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"beat-line beat-line-sub\",\n        style: {\n          left: index * 100 + 50\n        }\n      }, `sub-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1207,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1200,\n      columnNumber: 7\n    }, this), track.clips.map(clip => /*#__PURE__*/_jsxDEV(AudioClip, {\n      clip: clip,\n      trackId: track.id,\n      onRemove: () => onRemoveClip(track.id, clip.id),\n      onDragStart: onClipDragStart,\n      onDragEnd: onDragEnd\n    }, clip.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1212,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1193,\n    columnNumber: 5\n  }, this);\n};\n_c5 = Track;\nconst AudioClip = ({\n  clip,\n  trackId,\n  onRemove,\n  onDragStart,\n  onDragEnd\n}) => {\n  _s3();\n  const [waveformData, setWaveformData] = React.useState([]);\n  React.useEffect(() => {\n    // 簡単な波形データ生成（実際の実装では音声解析が必要）\n    const generateWaveform = () => {\n      const points = 20; // 波形のポイント数\n      const data = [];\n      for (let i = 0; i < points; i++) {\n        data.push(Math.random() * 0.8 + 0.2); // 0.2-1.0の間のランダム値\n      }\n      setWaveformData(data);\n    };\n    generateWaveform();\n  }, [clip.soundData]);\n  const handleDragStart = e => {\n    e.stopPropagation(); // イベントバブリングを防ぐ\n\n    // ドラッグデータに既存クリップの情報を設定\n    e.dataTransfer.setData('text/plain', `existing-clip-${clip.id}`);\n    e.dataTransfer.effectAllowed = 'move';\n\n    // onDragStartコールバックを呼び出し\n    onDragStart(clip, trackId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-clip\",\n    draggable: \"true\",\n    onDragStart: handleDragStart,\n    onDragEnd: onDragEnd,\n    style: {\n      left: clip.startTime,\n      width: isFinite(clip.duration) && clip.duration > 0 ? clip.duration : 400 // デフォルト1小節\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clip-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"clip-name\",\n        children: clip.soundData.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"remove-clip-btn\",\n        onClick: onRemove,\n        title: \"\\u30AF\\u30EA\\u30C3\\u30D7\\u3092\\u524A\\u9664\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clip-waveform\",\n      children: waveformData.length > 0 ? /*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"waveform-svg\",\n        width: \"100%\",\n        height: \"30\",\n        children: waveformData.map((height, index) => /*#__PURE__*/_jsxDEV(\"rect\", {\n          x: `${index / waveformData.length * 100}%`,\n          y: `${(1 - height) * 15}`,\n          width: `${80 / waveformData.length}%`,\n          height: `${height * 30}`,\n          fill: \"rgba(255, 255, 255, 0.8)\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1278,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1276,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"waveform-placeholder\",\n        children: \"\\uD83D\\uDD0A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1289,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1274,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1254,\n    columnNumber: 5\n  }, this);\n};\n_s3(AudioClip, \"VRSTty1v2EawVvG4In91JJSTL8A=\");\n_c6 = AudioClip;\nconst Playhead = ({\n  currentTime\n}) => {\n  // currentTimeが有効な数値かチェック\n  const safeCurrentTime = isFinite(currentTime) && currentTime >= 0 ? currentTime : 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playhead\",\n    style: {\n      left: safeCurrentTime\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1301,\n    columnNumber: 5\n  }, this);\n};\n_c7 = Playhead;\nexport default DAWPage;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"DAWPage\");\n$RefreshReg$(_c2, \"SoundItem\");\n$RefreshReg$(_c3, \"TrackHeader\");\n$RefreshReg$(_c4, \"Timeline\");\n$RefreshReg$(_c5, \"Track\");\n$RefreshReg$(_c6, \"AudioClip\");\n$RefreshReg$(_c7, \"Playhead\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","jsxDEV","_jsxDEV","DAWPage","_s","trackIdCounterRef","trackNameCounterRef","tracks","setTracks","id","Date","now","name","clips","bpm","setBpm","isPlaying","setIsPlaying","currentTime","setCurrentTime","audioContext","setAudioContext","trackHeight","playingAudios","setPlayingAudios","Map","startPlayTime","setStartPlayTime","error","setError","sounds","setSounds","showSoundPanel","setShowSoundPanel","draggedClip","setDraggedClip","dragPreview","setDragPreview","draggedSoundDuration","setDraggedSoundDuration","isExporting","setIsExporting","timelineRef","animationFrameRef","ctx","window","AudioContext","webkitAudioContext","savedSounds","JSON","parse","localStorage","getItem","console","log","length","soundsWithBlob","map","sound","audioData","byteCharacters","atob","split","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","blob","Blob","type","size","audioBlob","close","current","cancelAnimationFrame","currentDraggedSoundBlob","getAudioDuration","currentBpm","Promise","resolve","arrayBuffer","audioBuffer","decodeAudioData","durationInSeconds","duration","isFinite","pixelsPerSecond","widthInPixels","audio","Audio","handleLoadedMetadata","readyState","networkState","paused","ended","URL","revokeObjectURL","src","handleError","event","handleCanPlayThrough","timeoutId","setTimeout","removeEventListener","addEventListener","clearTimeout","objectUrl","createObjectURL","load","updatePlayhead","animate","elapsed","newCurrentTime","warn","requestAnimationFrame","timeInSeconds","handleBpmChange","newBpm","updatedTracks","all","track","updatedClips","clip","soundData","newDuration","saveProject","projectData","version","timestamp","trackNameCounter","trackIdCounter","projectJson","stringify","url","link","document","createElement","href","download","toISOString","slice","replace","body","appendChild","click","removeChild","loadProject","file","target","files","reader","FileReader","onload","e","result","Error","restoreAudioBlob","restoredTracks","restoredSounds","readAsText","value","exportAudio","maxDuration","forEach","clipStartTimeInSeconds","startTime","clipDurationInSeconds","clipEndTime","Math","max","exportContext","sampleRate","bufferLength","ceil","outputBuffer","createBuffer","leftChannel","getChannelData","rightChannel","startTimeInSamples","floor","channel","min","numberOfChannels","sourceData","targetData","wavBlob","audioBufferToWav","buffer","bytesPerSample","blockAlign","byteRate","dataSize","bufferSize","ArrayBuffer","view","DataView","writeString","offset","string","setUint8","setUint32","setUint16","sample","intSample","setInt16","addTrack","uniqueId","trackName","newTrack","removeTrack","trackId","filter","handleDrop","timePosition","preventDefault","subBeatWidth","snappedPosition","round","originalTrackId","updatedClip","dataTransfer","getData","hasAudioBlob","newClip","handleDragOver","_timelineRef$current","dropEffect","rect","currentTarget","getBoundingClientRect","clientX","left","beatWidth","trackElement","trackRect","tracksAreaRect","relativeTop","top","parseInt","dataset","previewWidth","width","removeClip","clipId","handleClipDragStart","handleDragEnd","play","state","resume","currentTimeInSeconds","newPlayingAudios","clipEndTimeInSeconds","delay","scheduleClipPlayback","delayMs","playingAudiosMap","_clip$soundData","audioUrl","catch","set","_clip$soundData2","_clip$soundData3","_clip$soundData4","_clip$soundData5","_clip$soundData6","soundDataName","hasAudioData","audioBlobType","isInstanceOfBlob","restoreError","pause","stop","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","htmlFor","onChange","accept","style","display","disabled","SoundItem","onDragStart","TrackHeader","onRemove","Timeline","ref","Playhead","Track","onDrop","onDragOver","onRemoveClip","onClipDragStart","onDragEnd","_c","_s2","handleDragStart","soundDataForTransfer","setData","effectAllowed","playSound","then","draggable","tags","tag","index","_c2","height","title","_c3","measures","beatsPerMeasure","from","_","measureIndex","beatIndex","_c4","AudioClip","_c5","_s3","waveformData","setWaveformData","generateWaveform","points","data","push","random","stopPropagation","x","y","fill","_c6","safeCurrentTime","_c7","$RefreshReg$"],"sources":["/Users/nakataniyuutomo/Desktop/Programing/ゼミ開発/sound-library2/src/pages/DAWPage.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './DAWPage.css';\n\nconst DAWPage = () => {\n  // ユニークID生成用のカウンター\n  const trackIdCounterRef = useRef(1);\n  // トラック名の番号管理用カウンター\n  const trackNameCounterRef = useRef(1);\n  \n  const [tracks, setTracks] = useState(() => [{ \n    id: Date.now(), \n    name: 'トラック 1', \n    clips: [] \n  }]);\n  const [bpm, setBpm] = useState(120);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [audioContext, setAudioContext] = useState(null);\n  const [trackHeight] = useState(80);\n  const [playingAudios, setPlayingAudios] = useState(new Map());\n  const [startPlayTime, setStartPlayTime] = useState(null);\n  const [error, setError] = useState(null);\n  const [sounds, setSounds] = useState([]);\n  const [showSoundPanel, setShowSoundPanel] = useState(true);\n  const [draggedClip, setDraggedClip] = useState(null);\n  const [dragPreview, setDragPreview] = useState(null);\n  const [draggedSoundDuration, setDraggedSoundDuration] = useState(400); // ドラッグ中の音素材の長さ\n  const [isExporting, setIsExporting] = useState(false); // 音源出力中フラグ\n  const timelineRef = useRef(null);\n  const animationFrameRef = useRef(null);\n\n  useEffect(() => {\n    // Web Audio API の初期化\n    const ctx = new (window.AudioContext || window.webkitAudioContext)();\n    setAudioContext(ctx);\n    \n    // LocalStorageから音素材を読み込み\n    const savedSounds = JSON.parse(localStorage.getItem('soundRecordings') || '[]');\n    console.log('LocalStorageから読み込んだ音素材数:', savedSounds.length);\n    \n    // audioDataからBlobを復元\n    const soundsWithBlob = savedSounds.map(sound => {\n      if (sound.audioData) {\n        try {\n          console.log('音声データ復元中:', sound.name, 'データサイズ:', sound.audioData.length);\n          const byteCharacters = atob(sound.audioData.split(',')[1]);\n          const byteNumbers = new Array(byteCharacters.length);\n          for (let i = 0; i < byteCharacters.length; i++) {\n            byteNumbers[i] = byteCharacters.charCodeAt(i);\n          }\n          const byteArray = new Uint8Array(byteNumbers);\n          const blob = new Blob([byteArray], { type: 'audio/wav' });\n          console.log('Blob復元成功:', sound.name, 'サイズ:', blob.size, 'タイプ:', blob.type);\n          return { ...sound, audioBlob: blob };\n        } catch (error) {\n          console.error('音声データの復元に失敗:', sound.name, error);\n          return sound;\n        }\n      }\n      return sound;\n    });\n    \n    setSounds(soundsWithBlob);\n    \n    return () => {\n      if (ctx) {\n        ctx.close();\n      }\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      // グローバル変数をクリーンアップ\n      if (window.currentDraggedSoundBlob) {\n        window.currentDraggedSoundBlob = null;\n      }\n    };\n  }, []);\n\n  // 音声ファイルの継続時間を取得してピクセル幅に変換\n  const getAudioDuration = (audioBlob, currentBpm = bpm) => {\n    return new Promise(async (resolve) => {\n      if (!audioBlob || !(audioBlob instanceof Blob)) {\n        console.log('無効なaudioBlob - デフォルト値を使用');\n        resolve(400);\n        return;\n      }\n\n      console.log('audioBlob詳細:', {\n        size: audioBlob.size,\n        type: audioBlob.type,\n        bpm: currentBpm\n      });\n\n      // AudioContextを使用した方法を試す\n      if (audioContext) {\n        try {\n          console.log('AudioContext方式で音声長さを取得中...');\n          const arrayBuffer = await audioBlob.arrayBuffer();\n          const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n          const durationInSeconds = audioBuffer.duration;\n          \n          console.log('AudioContext方式で取得した長さ:', durationInSeconds, '秒');\n          \n          if (isFinite(durationInSeconds) && durationInSeconds > 0) {\n            const pixelsPerSecond = (currentBpm / 60) * 100;\n            const widthInPixels = durationInSeconds * pixelsPerSecond;\n            console.log('AudioContext計算結果 - BPM:', currentBpm, '拍/秒:', currentBpm/60, 'ピクセル/秒:', pixelsPerSecond, '最終幅:', widthInPixels, 'px');\n            resolve(widthInPixels);\n            return;\n          }\n        } catch (error) {\n          console.log('AudioContext方式でエラー、HTML Audio方式にフォールバック:', error);\n        }\n      }\n\n      // HTML Audio方式（フォールバック）\n      const audio = new Audio();\n      \n      const handleLoadedMetadata = () => {\n        const durationInSeconds = audio.duration;\n        console.log('HTML Audio方式で取得した長さ:', durationInSeconds, '秒');\n        console.log('音声ファイルの詳細情報:', {\n          duration: durationInSeconds,\n          readyState: audio.readyState,\n          networkState: audio.networkState,\n          currentTime: audio.currentTime,\n          paused: audio.paused,\n          ended: audio.ended\n        });\n        \n        // URLをクリーンアップ\n        URL.revokeObjectURL(audio.src);\n        \n        // 有効な数値かチェック（NaN、Infinity、負の値を除外）\n        if (isFinite(durationInSeconds) && durationInSeconds > 0) {\n          // BPMに基づいてピクセル幅を計算\n          // 1拍 = 100px, 1小節 = 4拍 = 400px\n          // 1秒あたりの拍数 = BPM / 60\n          // 1秒あたりのピクセル数 = (BPM / 60) * 100\n          const pixelsPerSecond = (currentBpm / 60) * 100;\n          const widthInPixels = durationInSeconds * pixelsPerSecond;\n          console.log('HTML Audio計算結果 - BPM:', currentBpm, '拍/秒:', currentBpm/60, 'ピクセル/秒:', pixelsPerSecond, '最終幅:', widthInPixels, 'px');\n          resolve(widthInPixels);\n        } else {\n          // デフォルト値（1小節 = 400px）\n          console.log('無効な音声長さのためデフォルト値を使用:', durationInSeconds);\n          resolve(400);\n        }\n      };\n      \n      const handleError = (event) => {\n        console.log('音声ファイルの読み込みエラー - デフォルト値を使用', event);\n        console.log('エラー詳細:', {\n          error: audio.error,\n          networkState: audio.networkState,\n          readyState: audio.readyState\n        });\n        URL.revokeObjectURL(audio.src);\n        resolve(400);\n      };\n      \n      const handleCanPlayThrough = () => {\n        console.log('canplaythrough イベント発生 - duration:', audio.duration);\n      };\n      \n      // タイムアウト処理を追加（10秒でタイムアウト）\n      const timeoutId = setTimeout(() => {\n        console.log('音声ファイルの読み込みタイムアウト - デフォルト値を使用');\n        console.log('タイムアウト時の状態:', {\n          duration: audio.duration,\n          readyState: audio.readyState,\n          networkState: audio.networkState\n        });\n        audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\n        audio.removeEventListener('error', handleError);\n        audio.removeEventListener('canplaythrough', handleCanPlayThrough);\n        URL.revokeObjectURL(audio.src);\n        resolve(400);\n      }, 10000);\n      \n      audio.addEventListener('loadedmetadata', () => {\n        console.log('loadedmetadata イベント発生');\n        clearTimeout(timeoutId);\n        handleLoadedMetadata();\n      });\n      audio.addEventListener('error', (event) => {\n        console.log('error イベント発生');\n        clearTimeout(timeoutId);\n        handleError(event);\n      });\n      audio.addEventListener('canplaythrough', handleCanPlayThrough);\n      \n      try {\n        const objectUrl = URL.createObjectURL(audioBlob);\n        console.log('ObjectURL作成成功:', objectUrl);\n        audio.src = objectUrl;\n        \n        // 手動でloadを呼び出し\n        audio.load();\n      } catch (error) {\n        console.error('createObjectURL エラー:', error);\n        clearTimeout(timeoutId);\n        resolve(400);\n      }\n    });\n  };\n\n  // プレイヘッドのアニメーション更新\n  const updatePlayhead = useCallback(() => {\n    const animate = () => {\n      if (isPlaying && startPlayTime) {\n        const elapsed = (Date.now() - startPlayTime) / 1000; // 経過時間（秒）\n        const pixelsPerSecond = (bpm / 60) * 100; // BPMに基づいたピクセル/秒\n        const newCurrentTime = elapsed * pixelsPerSecond;\n        \n        // 有効な数値かチェック\n        if (isFinite(newCurrentTime) && newCurrentTime >= 0) {\n          setCurrentTime(newCurrentTime);\n        } else {\n          console.warn('無効なcurrentTime:', newCurrentTime, 'elapsed:', elapsed, 'pixelsPerSecond:', pixelsPerSecond);\n        }\n        \n        // 次のフレームを要求\n        animationFrameRef.current = requestAnimationFrame(animate);\n      }\n    };\n    \n    if (isPlaying && startPlayTime) {\n      animate();\n    }\n  }, [isPlaying, startPlayTime, bpm]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (!startPlayTime) {\n        // 再生開始時にstartPlayTimeを設定\n        const pixelsPerSecond = (bpm / 60) * 100;\n        if (isFinite(pixelsPerSecond) && pixelsPerSecond > 0) {\n          const timeInSeconds = currentTime / pixelsPerSecond;\n          if (isFinite(timeInSeconds) && timeInSeconds >= 0) {\n            setStartPlayTime(Date.now() - (timeInSeconds * 1000));\n          } else {\n            setStartPlayTime(Date.now());\n          }\n        } else {\n          setStartPlayTime(Date.now());\n        }\n      }\n    } else {\n      // 再生停止時にアニメーションをクリア\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n        animationFrameRef.current = null;\n      }\n      setStartPlayTime(null);\n    }\n  }, [isPlaying, bpm, currentTime]);\n\n  // startPlayTimeが設定されたときにアニメーションを開始\n  useEffect(() => {\n    if (isPlaying && startPlayTime) {\n      updatePlayhead();\n    }\n  }, [isPlaying, startPlayTime, updatePlayhead]);\n\n  // BPM変更時のハンドラー\n  const handleBpmChange = async (newBpm) => {\n    setBpm(newBpm);\n    \n    // 既存のクリップのdurationを新しいBPMで再計算\n    const updatedTracks = await Promise.all(\n      tracks.map(async (track) => {\n        const updatedClips = await Promise.all(\n          track.clips.map(async (clip) => {\n            if (clip.soundData && clip.soundData.audioBlob) {\n              try {\n                const newDuration = await getAudioDuration(clip.soundData.audioBlob, newBpm);\n                return { ...clip, duration: newDuration };\n              } catch (error) {\n                console.warn('クリップのduration更新に失敗:', error);\n                return clip;\n              }\n            }\n            return clip;\n          })\n        );\n        return { ...track, clips: updatedClips };\n      })\n    );\n    \n    setTracks(updatedTracks);\n  };\n\n  // プロジェクト保存機能\n  const saveProject = () => {\n    try {\n      const projectData = {\n        version: '1.0',\n        bpm: bpm,\n        tracks: tracks,\n        sounds: sounds.map(sound => ({\n          ...sound,\n          audioBlob: null, // Blobは別途保存\n          audioData: sound.audioData // base64データを保持\n        })),\n        timestamp: Date.now(),\n        trackNameCounter: trackNameCounterRef.current,\n        trackIdCounter: trackIdCounterRef.current\n      };\n\n      const projectJson = JSON.stringify(projectData, null, 2);\n      const blob = new Blob([projectJson], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      \n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `music-project-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      \n      console.log('プロジェクトを保存しました');\n    } catch (error) {\n      console.error('プロジェクト保存エラー:', error);\n      setError('プロジェクトの保存に失敗しました。');\n    }\n  };\n\n  // プロジェクト読み込み機能\n  const loadProject = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const projectData = JSON.parse(e.target.result);\n        \n        // バージョンチェック\n        if (!projectData.version) {\n          throw new Error('不正なプロジェクトファイルです');\n        }\n\n        // 音声データ復元用のヘルパー関数\n        const restoreAudioBlob = (soundData) => {\n          if (soundData && soundData.audioData) {\n            try {\n              const byteCharacters = atob(soundData.audioData.split(',')[1]);\n              const byteNumbers = new Array(byteCharacters.length);\n              for (let i = 0; i < byteCharacters.length; i++) {\n                byteNumbers[i] = byteCharacters.charCodeAt(i);\n              }\n              const byteArray = new Uint8Array(byteNumbers);\n              const blob = new Blob([byteArray], { type: 'audio/wav' });\n              return { ...soundData, audioBlob: blob };\n            } catch (error) {\n              console.error('音声データの復元に失敗:', soundData.name || 'unknown', error);\n              return soundData;\n            }\n          }\n          return soundData;\n        };\n\n        // BPMを復元\n        setBpm(projectData.bpm || 120);\n        \n        // トラックを復元（クリップ内の音声データも復元）\n        if (projectData.tracks) {\n          const restoredTracks = projectData.tracks.map(track => ({\n            ...track,\n            clips: track.clips.map(clip => ({\n              ...clip,\n              soundData: restoreAudioBlob(clip.soundData)\n            }))\n          }));\n          setTracks(restoredTracks);\n          console.log('トラックデータを復元しました:', restoredTracks.length, 'トラック');\n        }\n        \n        // カウンターを復元\n        if (projectData.trackNameCounter) {\n          trackNameCounterRef.current = projectData.trackNameCounter;\n        }\n        if (projectData.trackIdCounter) {\n          trackIdCounterRef.current = projectData.trackIdCounter;\n        }\n        \n        // 音素材を復元\n        if (projectData.sounds) {\n          const restoredSounds = projectData.sounds.map(sound => restoreAudioBlob(sound));\n          setSounds(restoredSounds);\n          console.log('音素材を復元しました:', restoredSounds.length, '個');\n        }\n        \n        console.log('プロジェクトを読み込みました');\n        setError(null);\n      } catch (error) {\n        console.error('プロジェクト読み込みエラー:', error);\n        setError('プロジェクトファイルの読み込みに失敗しました。ファイルが正しいか確認してください。');\n      }\n    };\n    \n    reader.readAsText(file);\n    // ファイル選択をリセット\n    event.target.value = '';\n  };\n\n  // 音源出力機能\n  const exportAudio = async () => {\n    if (!audioContext) {\n      setError('AudioContextが初期化されていません。');\n      return;\n    }\n\n    setIsExporting(true);\n    try {\n      // 全トラックの全クリップの最大終了時間を計算\n      let maxDuration = 0;\n      tracks.forEach(track => {\n        track.clips.forEach(clip => {\n          const pixelsPerSecond = (bpm / 60) * 100;\n          const clipStartTimeInSeconds = clip.startTime / pixelsPerSecond;\n          const clipDurationInSeconds = clip.duration / pixelsPerSecond;\n          const clipEndTime = clipStartTimeInSeconds + clipDurationInSeconds;\n          maxDuration = Math.max(maxDuration, clipEndTime);\n        });\n      });\n\n      if (maxDuration === 0) {\n        setError('出力する音声がありません。音素材を配置してください。');\n        setIsExporting(false);\n        return;\n      }\n\n      // 出力用AudioContextを作成（44.1kHz）\n      const exportContext = new AudioContext({ sampleRate: 44100 });\n      const bufferLength = Math.ceil(maxDuration * exportContext.sampleRate);\n      const outputBuffer = exportContext.createBuffer(2, bufferLength, exportContext.sampleRate);\n      \n      const leftChannel = outputBuffer.getChannelData(0);\n      const rightChannel = outputBuffer.getChannelData(1);\n\n      // 各トラックの各クリップを処理\n      for (const track of tracks) {\n        for (const clip of track.clips) {\n          if (clip.soundData && clip.soundData.audioBlob) {\n            try {\n              const arrayBuffer = await clip.soundData.audioBlob.arrayBuffer();\n              const audioBuffer = await exportContext.decodeAudioData(arrayBuffer);\n              \n              const pixelsPerSecond = (bpm / 60) * 100;\n              const startTimeInSamples = Math.floor((clip.startTime / pixelsPerSecond) * exportContext.sampleRate);\n              \n              // 音声をミックス\n              for (let channel = 0; channel < Math.min(audioBuffer.numberOfChannels, 2); channel++) {\n                const sourceData = audioBuffer.getChannelData(channel);\n                const targetData = channel === 0 ? leftChannel : rightChannel;\n                \n                for (let i = 0; i < sourceData.length && (startTimeInSamples + i) < targetData.length; i++) {\n                  targetData[startTimeInSamples + i] += sourceData[i];\n                }\n              }\n              \n              // モノラル音源の場合は両チャンネルにコピー\n              if (audioBuffer.numberOfChannels === 1) {\n                const sourceData = audioBuffer.getChannelData(0);\n                for (let i = 0; i < sourceData.length && (startTimeInSamples + i) < rightChannel.length; i++) {\n                  rightChannel[startTimeInSamples + i] += sourceData[i];\n                }\n              }\n            } catch (error) {\n              console.error('クリップの処理エラー:', error);\n            }\n          }\n        }\n      }\n\n      // WAVファイルとして出力\n      const wavBlob = audioBufferToWav(outputBuffer);\n      const url = URL.createObjectURL(wavBlob);\n      \n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `exported-music-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.wav`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      \n      console.log('音源を出力しました');\n      await exportContext.close();\n    } catch (error) {\n      console.error('音源出力エラー:', error);\n      setError('音源の出力に失敗しました。');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  // AudioBufferをWAVファイルに変換\n  const audioBufferToWav = (buffer) => {\n    const length = buffer.length;\n    const numberOfChannels = buffer.numberOfChannels;\n    const sampleRate = buffer.sampleRate;\n    const bytesPerSample = 2;\n    const blockAlign = numberOfChannels * bytesPerSample;\n    const byteRate = sampleRate * blockAlign;\n    const dataSize = length * blockAlign;\n    const bufferSize = 44 + dataSize;\n    \n    const arrayBuffer = new ArrayBuffer(bufferSize);\n    const view = new DataView(arrayBuffer);\n    \n    // WAVファイルヘッダー\n    const writeString = (offset, string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    \n    writeString(0, 'RIFF');\n    view.setUint32(4, bufferSize - 8, true);\n    writeString(8, 'WAVE');\n    writeString(12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, numberOfChannels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, byteRate, true);\n    view.setUint16(32, blockAlign, true);\n    view.setUint16(34, bytesPerSample * 8, true);\n    writeString(36, 'data');\n    view.setUint32(40, dataSize, true);\n    \n    // 音声データ\n    let offset = 44;\n    for (let i = 0; i < length; i++) {\n      for (let channel = 0; channel < numberOfChannels; channel++) {\n        const sample = buffer.getChannelData(channel)[i];\n        const intSample = Math.max(-1, Math.min(1, sample)) * 0x7FFF;\n        view.setInt16(offset, intSample, true);\n        offset += 2;\n      }\n    }\n    \n    return new Blob([arrayBuffer], { type: 'audio/wav' });\n  };\n\n  const addTrack = () => {\n    // より確実にユニークなIDを生成\n    trackIdCounterRef.current += 1;\n    const uniqueId = Date.now() + trackIdCounterRef.current;\n    \n    // トラック名の番号を増加（削除されても番号は戻らない）\n    trackNameCounterRef.current += 1;\n    const trackName = `トラック ${trackNameCounterRef.current}`;\n    \n    const newTrack = {\n      id: uniqueId,\n      name: trackName,\n      clips: []\n    };\n    setTracks([...tracks, newTrack]);\n  };\n\n  const removeTrack = (trackId) => {\n    if (tracks.length > 1) {\n      setTracks(tracks.filter(track => track.id !== trackId));\n    }\n  };\n\n  const handleDrop = async (e, trackId, timePosition) => {\n    e.preventDefault();\n    setDragPreview(null);\n    \n    console.log('ドロップ処理開始:', { trackId, timePosition, draggedClip });\n    \n    try {\n      // 8分音符に合わせて位置を調整（50px単位）\n      const subBeatWidth = 50; // 8分音符の幅（px）\n      const snappedPosition = Math.round(timePosition / subBeatWidth) * subBeatWidth;\n      \n      // 既存のクリップの移動かどうかチェック\n      if (draggedClip) {\n        console.log('既存クリップの移動:', draggedClip.id, '元トラック:', draggedClip.originalTrackId, '新トラック:', trackId);\n        \n        // 既存クリップの移動\n        const updatedClip = {\n          ...draggedClip,\n          startTime: snappedPosition,\n          trackId: trackId\n        };\n\n        setTracks(tracks.map(track => {\n          if (track.id === draggedClip.originalTrackId && track.id === trackId) {\n            // 同じトラック内での移動\n            console.log('同じトラック内での移動');\n            return {\n              ...track,\n              clips: track.clips.map(clip => \n                clip.id === draggedClip.id ? updatedClip : clip\n              )\n            };\n          } else if (track.id === draggedClip.originalTrackId) {\n            // 元のトラックからクリップを削除\n            console.log('元のトラックからクリップを削除');\n            return {\n              ...track,\n              clips: track.clips.filter(clip => clip.id !== draggedClip.id)\n            };\n          } else if (track.id === trackId) {\n            // 新しいトラックにクリップを追加\n            console.log('新しいトラックにクリップを追加');\n            return {\n              ...track,\n              clips: [...track.clips, updatedClip]\n            };\n          }\n          return track;\n        }));\n        setDraggedClip(null);\n        return;\n      }\n      \n      // 新しい音素材の配置\n      const soundData = JSON.parse(e.dataTransfer.getData('application/json'));\n      \n      // グローバル変数からaudioBlobを復元\n      if (window.currentDraggedSoundBlob) {\n        soundData.audioBlob = window.currentDraggedSoundBlob;\n        window.currentDraggedSoundBlob = null; // クリーンアップ\n      }\n      \n      console.log('新しい音素材のドロップ:', { soundData, hasAudioBlob: !!soundData.audioBlob });\n      \n      // 音声の実際の継続時間を取得（現在のBPMに基づいて）\n      let duration = 400; // デフォルト値（1小節）\n      if (soundData.audioBlob) {\n        try {\n          duration = await getAudioDuration(soundData.audioBlob, bpm);\n          console.log('取得したduration:', duration, 'pixels (BPM:', bpm, ')');\n        } catch (error) {\n          console.warn('音声継続時間の取得に失敗しました:', error);\n        }\n      }\n\n      // durationが有効な値かチェック\n      if (!isFinite(duration) || duration <= 0) {\n        console.warn('無効なduration:', duration, 'デフォルト値を使用');\n        duration = 400; // 1小節分\n      }\n\n      const newClip = {\n        id: Date.now(),\n        soundData: soundData,\n        startTime: snappedPosition,\n        duration: duration,\n        trackId: trackId\n      };\n\n      console.log('作成されたクリップ:', newClip);\n\n      setTracks(tracks.map(track => \n        track.id === trackId \n          ? { ...track, clips: [...track.clips, newClip] }\n          : track\n      ));\n    } catch (error) {\n      console.error('ドロップエラー:', error);\n      setError('音素材の配置に失敗しました。再度お試しください。');\n    }\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n    \n    // ドラッグされているのが既存クリップか新しい音素材かで処理を分ける\n    if (draggedClip) {\n      e.dataTransfer.dropEffect = 'move';\n    } else {\n      e.dataTransfer.dropEffect = 'copy';\n    }\n    \n    // ドラッグプレビューの更新\n    const rect = e.currentTarget.getBoundingClientRect();\n    const timePosition = e.clientX - rect.left;\n    const beatWidth = 100;\n    const snappedPosition = Math.round(timePosition / beatWidth) * beatWidth;\n    \n    const trackElement = e.currentTarget;\n    const trackRect = trackElement.getBoundingClientRect();\n    const tracksAreaRect = timelineRef.current?.getBoundingClientRect();\n    \n    if (tracksAreaRect) {\n      const relativeTop = trackRect.top - tracksAreaRect.top;\n      const trackId = parseInt(trackElement.dataset.trackId);\n      \n      // プレビュー幅を決定\n      let previewWidth = 400; // デフォルト値（1小節）\n      \n      if (draggedClip) {\n        // 既存クリップの場合\n        previewWidth = isFinite(draggedClip.duration) && draggedClip.duration > 0 \n          ? draggedClip.duration \n          : 400;\n      } else {\n        // 新しい音素材の場合、事前に計算された長さを使用\n        previewWidth = draggedSoundDuration;\n      }\n      \n      setDragPreview({\n        left: snappedPosition,\n        top: relativeTop + 10,\n        width: previewWidth,\n        trackId: trackId\n      });\n    }\n  };\n\n  const removeClip = (trackId, clipId) => {\n    setTracks(tracks.map(track => \n      track.id === trackId \n        ? { ...track, clips: track.clips.filter(clip => clip.id !== clipId) }\n        : track\n    ));\n  };\n\n  // クリップのドラッグ開始\n  const handleClipDragStart = (clip, originalTrackId) => {\n    console.log('クリップドラッグ開始:', clip.id, 'トラック:', originalTrackId);\n    setDraggedClip({ ...clip, originalTrackId });\n  };\n\n  // ドラッグ終了時のクリーンアップ\n  const handleDragEnd = (e) => {\n    // ドロップが正常に処理されなかった場合、元の状態を保持\n    if (draggedClip && e.dataTransfer.dropEffect === 'none') {\n      console.log('ドラッグがキャンセルされました。元の位置を保持します。');\n    }\n    setDraggedClip(null);\n    setDragPreview(null);\n    setDraggedSoundDuration(400); // リセット\n  };\n\n  const play = async () => {\n    try {\n      // AudioContextが中断されている場合は再開\n      if (audioContext && audioContext.state === 'suspended') {\n        await audioContext.resume();\n      }\n      \n      setIsPlaying(true);\n      \n      // 現在の時間位置に基づいて、再生すべきクリップを見つける\n      const pixelsPerSecond = (bpm / 60) * 100;\n      const currentTimeInSeconds = currentTime / pixelsPerSecond;\n      \n      // 各トラックのクリップを再生\n      const newPlayingAudios = new Map();\n      \n      tracks.forEach(track => {\n        track.clips.forEach(clip => {\n          // clip.durationが有効な値かチェック\n          if (!isFinite(clip.duration) || clip.duration <= 0) {\n            console.warn('無効なclip.duration:', clip.duration, 'クリップをスキップします');\n            return;\n          }\n          \n          const clipStartTimeInSeconds = clip.startTime / pixelsPerSecond;\n          const clipEndTimeInSeconds = clipStartTimeInSeconds + (clip.duration / pixelsPerSecond);\n          \n          // 計算結果が有効かチェック\n          if (!isFinite(clipStartTimeInSeconds) || !isFinite(clipEndTimeInSeconds)) {\n            console.warn('無効な時間計算:', { clipStartTimeInSeconds, clipEndTimeInSeconds });\n            return;\n          }\n          \n          // 現在の時間位置がクリップの範囲内または今後再生される場合\n          if (clipEndTimeInSeconds > currentTimeInSeconds) {\n            const delay = Math.max(0, clipStartTimeInSeconds - currentTimeInSeconds);\n            if (isFinite(delay) && delay >= 0) {\n              scheduleClipPlayback(clip, delay * 1000, newPlayingAudios);\n            }\n          }\n        });\n      });\n      \n      setPlayingAudios(newPlayingAudios);\n    } catch (error) {\n      console.error('再生エラー:', error);\n      setError('音声の再生に失敗しました。ブラウザで音声が有効になっているか確認してください。');\n    }\n  };\n\n  const scheduleClipPlayback = (clip, delayMs, playingAudiosMap) => {\n    console.log('scheduleClipPlayback:', { clip, hasAudioBlob: !!clip.soundData?.audioBlob });\n    \n    if (clip.soundData && clip.soundData.audioBlob && clip.soundData.audioBlob instanceof Blob) {\n      try {\n        const audio = new Audio();\n        const audioUrl = URL.createObjectURL(clip.soundData.audioBlob);\n        audio.src = audioUrl;\n        \n        const timeoutId = setTimeout(() => {\n          audio.play().catch(error => {\n            console.error('音声再生エラー:', error);\n            URL.revokeObjectURL(audioUrl); // メモリリークを防ぐ\n          });\n        }, delayMs);\n        \n        // 音声終了時にURLを解放\n        audio.addEventListener('ended', () => {\n          URL.revokeObjectURL(audioUrl);\n        });\n        \n        playingAudiosMap.set(clip.id, { audio, timeoutId, audioUrl });\n      } catch (error) {\n        console.error('createObjectURL エラー:', error, 'audioBlob:', clip.soundData.audioBlob);\n      }\n    } else {\n      console.warn('audioBlobが無効です。クリップ情報:', {\n        clipId: clip.id,\n        soundDataName: clip.soundData?.name,\n        hasAudioData: !!clip.soundData?.audioData,\n        hasAudioBlob: !!clip.soundData?.audioBlob,\n        audioBlobType: typeof clip.soundData?.audioBlob,\n        isInstanceOfBlob: clip.soundData?.audioBlob instanceof Blob\n      });\n      \n      // AudioBlobが無効な場合、audioDataから復元を試行\n      if (clip.soundData && clip.soundData.audioData && !clip.soundData.audioBlob) {\n        console.log('audioDataからBlobを再作成中...');\n        try {\n          const byteCharacters = atob(clip.soundData.audioData.split(',')[1]);\n          const byteNumbers = new Array(byteCharacters.length);\n          for (let i = 0; i < byteCharacters.length; i++) {\n            byteNumbers[i] = byteCharacters.charCodeAt(i);\n          }\n          const byteArray = new Uint8Array(byteNumbers);\n          const blob = new Blob([byteArray], { type: 'audio/wav' });\n          \n          // クリップのsoundDataを更新\n          clip.soundData.audioBlob = blob;\n          \n          // 再帰的に再試行\n          scheduleClipPlayback(clip, delayMs, playingAudiosMap);\n          return;\n        } catch (restoreError) {\n          console.error('audioDataからのBlob復元に失敗:', restoreError);\n        }\n      }\n    }\n  };\n\n  const pause = () => {\n    setIsPlaying(false);\n    \n    // 再生中の音声を一時停止\n    playingAudios.forEach(({ audio, timeoutId, audioUrl }) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      if (!audio.paused) {\n        audio.pause();\n      }\n      // URLを解放\n      if (audioUrl) {\n        URL.revokeObjectURL(audioUrl);\n      }\n    });\n  };\n\n  const stop = () => {\n    setIsPlaying(false);\n    setCurrentTime(0);\n    \n    // 再生中の音声を停止\n    playingAudios.forEach(({ audio, timeoutId, audioUrl }) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      audio.pause();\n      audio.currentTime = 0;\n      // URLを解放\n      if (audioUrl) {\n        URL.revokeObjectURL(audioUrl);\n      }\n    });\n    \n    setPlayingAudios(new Map());\n  };\n\n  return (\n    <div className=\"daw-page\">\n      <h2>🎹 音楽づくりページ</h2>\n      <p>音素材をドラッグ&ドロップして音楽を作りましょう！</p>\n\n      {error && (\n        <div className=\"error-message\">\n          <span>⚠️ {error}</span>\n          <button onClick={() => setError(null)}>×</button>\n        </div>\n      )}\n\n      <div className=\"daw-controls card\">\n        <div className=\"transport-controls\">\n          <button \n            className={`transport-btn play-btn ${isPlaying ? 'playing' : ''}`}\n            onClick={isPlaying ? pause : play}\n          >\n            {isPlaying ? '⏸️' : '▶️'}\n          </button>\n          <button className=\"transport-btn stop-btn\" onClick={stop}>\n            ⏹️\n          </button>\n        </div>\n\n        <div className=\"bpm-control\">\n          <label htmlFor=\"bpm\">🎵 BPM:</label>\n          <input\n            id=\"bpm\"\n            type=\"number\"\n            value={bpm}\n            onChange={(e) => handleBpmChange(parseInt(e.target.value))}\n            min=\"60\"\n            max=\"200\"\n            className=\"bpm-input\"\n          />\n        </div>\n\n        <div className=\"track-controls\">\n          <button className=\"button-primary\" onClick={addTrack}>\n            ➕ トラック追加\n          </button>\n          <button \n            className=\"button-secondary\" \n            onClick={() => setShowSoundPanel(!showSoundPanel)}\n          >\n            {showSoundPanel ? '🎵 音素材を隠す' : '🎵 音素材を表示'}\n          </button>\n        </div>\n\n        <div className=\"project-controls\">\n          <button className=\"button-secondary\" onClick={saveProject}>\n            💾 プロジェクト保存\n          </button>\n          <label className=\"button-secondary file-input-label\">\n            📁 プロジェクト読み込み\n            <input\n              type=\"file\"\n              accept=\".json\"\n              onChange={loadProject}\n              style={{ display: 'none' }}\n            />\n          </label>\n          <button \n            className=\"button-primary\" \n            onClick={exportAudio}\n            disabled={isExporting}\n          >\n            {isExporting ? '🔄 出力中...' : '🎧 音源出力'}\n          </button>\n        </div>\n      </div>\n\n      <div className=\"daw-main-area\">\n        {showSoundPanel && (\n          <div className=\"sound-panel\">\n            <h3>🎵 音素材</h3>\n            <div className=\"sound-list\">\n              {sounds.length > 0 ? (\n                sounds.map(sound => (\n                  <SoundItem \n                    key={sound.id} \n                    sound={sound} \n                    onDragStart={async (sound) => {\n                      // ドラッグ開始時に音声の長さを計算\n                      if (sound.audioBlob) {\n                        try {\n                          const duration = await getAudioDuration(sound.audioBlob, bpm);\n                          setDraggedSoundDuration(duration);\n                        } catch (error) {\n                          console.warn('ドラッグ時の音声長さ計算に失敗:', error);\n                          setDraggedSoundDuration(400);\n                        }\n                      } else {\n                        setDraggedSoundDuration(400);\n                      }\n                    }}\n                  />\n                ))\n              ) : (\n                <div className=\"no-sounds\">\n                  <p>音素材がありません</p>\n                  <p>「音を集める」ページで音を録音してください</p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        <div className=\"daw-workspace\">\n          <div className=\"track-headers\">\n            {tracks.map(track => (\n              <TrackHeader \n                key={track.id} \n                track={track} \n                onRemove={removeTrack}\n                trackHeight={trackHeight}\n              />\n            ))}\n          </div>\n\n          <div className=\"timeline-container\">\n            <Timeline bpm={bpm} />\n            <div className=\"tracks-area\" ref={timelineRef}>\n              <Playhead currentTime={currentTime} />\n              {dragPreview && (\n                <div \n                  className=\"drag-preview\"\n                  style={{\n                    left: dragPreview.left,\n                    top: dragPreview.top,\n                    width: dragPreview.width\n                  }}\n                />\n              )}\n              {tracks.map(track => (\n                <Track\n                  key={track.id}\n                  track={track}\n                  onDrop={handleDrop}\n                  onDragOver={handleDragOver}\n                  onRemoveClip={removeClip}\n                  onClipDragStart={handleClipDragStart}\n                  onDragEnd={handleDragEnd}\n                  trackHeight={trackHeight}\n                  bpm={bpm}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"instructions card\">\n        <h3>📖 使い方</h3>\n        <ul>\n          <li>左側の音素材パネルから音素材をトラックにドラッグ&ドロップして配置</li>\n          <li>配置済みの音素材もドラッグして別の場所に移動できます</li>\n          <li>ドラッグ中は配置予定位置に青い影が表示されます</li>\n          <li>音素材は拍に合わせて自動的に配置されます</li>\n          <li>音素材パネルの▶️ボタンで個別に音を確認できます</li>\n          <li>▶️ボタンで再生、⏸️ボタンで一時停止、⏹️ボタンで停止</li>\n          <li>BPMを変更して音楽の速さを調整</li>\n          <li>トラックを追加して複数の音を重ねることができます</li>\n          <li><strong>💾 プロジェクト保存:</strong> 編集中のデータをJSONファイルとして保存</li>\n          <li><strong>📁 プロジェクト読み込み:</strong> 保存したプロジェクトファイルを読み込んで編集を再開</li>\n          <li><strong>🎧 音源出力:</strong> 完成した楽曲をWAVファイルとして出力</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nconst SoundItem = ({ sound, onDragStart }) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const handleDragStart = (e) => {\n    // audioBlob以外のデータをJSON文字列として設定\n    const soundDataForTransfer = {\n      ...sound,\n      audioBlob: null // Blobは直接シリアライズできないため一時的にnullに\n    };\n    \n    e.dataTransfer.setData('application/json', JSON.stringify(soundDataForTransfer));\n    e.dataTransfer.effectAllowed = 'copy';\n    \n    // 実際のaudioBlobは別途グローバル変数で保持\n    window.currentDraggedSoundBlob = sound.audioBlob;\n    \n    // 親コンポーネントのonDragStart関数を呼び出し（音声の長さを計算）\n    if (onDragStart) {\n      onDragStart(sound);\n    }\n  };\n\n  const playSound = () => {\n    if (sound.audioBlob && !isPlaying) {\n      const audio = new Audio();\n      audio.src = URL.createObjectURL(sound.audioBlob);\n      audio.play()\n        .then(() => {\n          setIsPlaying(true);\n          audio.addEventListener('ended', () => {\n            setIsPlaying(false);\n          });\n        })\n        .catch(error => {\n          console.error('音声再生エラー:', error);\n        });\n    }\n  };\n\n  return (\n    <div\n      className=\"sound-item\"\n      draggable=\"true\"\n      onDragStart={handleDragStart}\n    >\n      <div className=\"sound-info\">\n        <h4>{sound.name}</h4>\n        <div className=\"sound-tags\">\n          {sound.tags.map((tag, index) => (\n            <span key={index} className=\"sound-tag\">{tag}</span>\n          ))}\n        </div>\n      </div>\n      <div className=\"sound-actions\">\n        <button \n          className=\"play-sound-btn\"\n          onClick={playSound}\n          disabled={isPlaying}\n        >\n          {isPlaying ? '⏸️' : '▶️'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst TrackHeader = ({ track, onRemove, trackHeight }) => {\n  return (\n    <div className=\"track-header\" style={{ height: trackHeight }}>\n      <div className=\"track-info\">\n        <h4>{track.name}</h4>\n        <div className=\"track-actions\">\n          <button \n            className=\"remove-track-btn\"\n            onClick={() => onRemove(track.id)}\n            title=\"トラックを削除\"\n          >\n            🗑️\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Timeline = ({ bpm }) => {\n  const measures = 16; // 16小節表示\n  const beatsPerMeasure = 4; // 4/4拍子\n  const beatWidth = 100; // 1拍の幅\n  const subBeatWidth = beatWidth / 2; // 8分音符（裏拍）の幅\n\n  return (\n    <div className=\"timeline\">\n      {Array.from({ length: measures }, (_, measureIndex) => (\n        <div key={measureIndex} className=\"measure\">\n          <div className=\"measure-number\">{measureIndex + 1}</div>\n          <div className=\"beats\">\n            {Array.from({ length: beatsPerMeasure }, (_, beatIndex) => (\n              <div \n                key={beatIndex} \n                className=\"beat\"\n                style={{ width: beatWidth }}\n              >\n                <div className=\"beat-main\">\n                  {beatIndex + 1}\n                </div>\n                <div className=\"beat-sub\">\n                  <div className=\"sub-beat-marker\">・</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst Track = ({ track, onDrop, onDragOver, onRemoveClip, onClipDragStart, onDragEnd, trackHeight, bpm }) => {\n  const handleDrop = (e) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const timePosition = e.clientX - rect.left;\n    onDrop(e, track.id, timePosition);\n  };\n\n  return (\n    <div \n      className=\"track\"\n      style={{ height: trackHeight }}\n      data-track-id={track.id}\n      onDrop={handleDrop}\n      onDragOver={onDragOver}\n    >\n      <div className=\"track-grid\">\n        {/* 表拍（主要な拍）の境界線を表示 */}\n        {Array.from({ length: 64 }, (_, index) => (\n          <div key={`main-${index}`} className=\"beat-line beat-line-main\" style={{ left: index * 100 }} />\n        ))}\n        {/* 裏拍（8分音符）の境界線を表示 */}\n        {Array.from({ length: 64 }, (_, index) => (\n          <div key={`sub-${index}`} className=\"beat-line beat-line-sub\" style={{ left: index * 100 + 50 }} />\n        ))}\n      </div>\n      \n      {track.clips.map(clip => (\n        <AudioClip\n          key={clip.id}\n          clip={clip}\n          trackId={track.id}\n          onRemove={() => onRemoveClip(track.id, clip.id)}\n          onDragStart={onClipDragStart}\n          onDragEnd={onDragEnd}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst AudioClip = ({ clip, trackId, onRemove, onDragStart, onDragEnd }) => {\n  const [waveformData, setWaveformData] = React.useState([]);\n\n  React.useEffect(() => {\n    // 簡単な波形データ生成（実際の実装では音声解析が必要）\n    const generateWaveform = () => {\n      const points = 20; // 波形のポイント数\n      const data = [];\n      for (let i = 0; i < points; i++) {\n        data.push(Math.random() * 0.8 + 0.2); // 0.2-1.0の間のランダム値\n      }\n      setWaveformData(data);\n    };\n\n    generateWaveform();\n  }, [clip.soundData]);\n\n  const handleDragStart = (e) => {\n    e.stopPropagation(); // イベントバブリングを防ぐ\n    \n    // ドラッグデータに既存クリップの情報を設定\n    e.dataTransfer.setData('text/plain', `existing-clip-${clip.id}`);\n    e.dataTransfer.effectAllowed = 'move';\n    \n    // onDragStartコールバックを呼び出し\n    onDragStart(clip, trackId);\n  };\n\n  return (\n    <div \n      className=\"audio-clip\"\n      draggable=\"true\"\n      onDragStart={handleDragStart}\n      onDragEnd={onDragEnd}\n      style={{\n        left: clip.startTime,\n        width: isFinite(clip.duration) && clip.duration > 0 ? clip.duration : 400 // デフォルト1小節\n      }}\n    >\n      <div className=\"clip-header\">\n        <span className=\"clip-name\">{clip.soundData.name}</span>\n        <button \n          className=\"remove-clip-btn\"\n          onClick={onRemove}\n          title=\"クリップを削除\"\n        >\n          ×\n        </button>\n      </div>\n      <div className=\"clip-waveform\">\n        {waveformData.length > 0 ? (\n          <svg className=\"waveform-svg\" width=\"100%\" height=\"30\">\n            {waveformData.map((height, index) => (\n              <rect\n                key={index}\n                x={`${(index / waveformData.length) * 100}%`}\n                y={`${(1 - height) * 15}`}\n                width={`${80 / waveformData.length}%`}\n                height={`${height * 30}`}\n                fill=\"rgba(255, 255, 255, 0.8)\"\n              />\n            ))}\n          </svg>\n        ) : (\n          <div className=\"waveform-placeholder\">🔊</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst Playhead = ({ currentTime }) => {\n  // currentTimeが有効な数値かチェック\n  const safeCurrentTime = isFinite(currentTime) && currentTime >= 0 ? currentTime : 0;\n  \n  return (\n    <div \n      className=\"playhead\"\n      style={{ left: safeCurrentTime }}\n    />\n  );\n};\n\nexport default DAWPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}